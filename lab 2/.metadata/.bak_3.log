!SESSION 2023-09-08 10:54:47.027 -----------------------------------------------
eclipse.buildId=4.28.0.20230608-1200
java.version=17.0.8
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=uk_UA
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

This is a continuation of log file A:\NULP\КЗП\Лабораторні\роботи\lab 3\.metadata\.bak_2.log
Created Time: 2023-09-08 11:56:51.866

!ENTRY org.eclipse.jdt.ui 4 2 2023-09-08 11:56:51.867
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-09-08 11:56:51.867
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-09-08 11:56:51.876
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
/**
 * 
 */
package CI_306.Shyryi.Lab3;

import java.util.List;
import java.util.ArrayList;

/**
 * 
 */
public class BoatOnOars {
	
	private String name;
	private Boat boat;
	private PairOfOars[] pairOfOars;
	private Sailer[] sailer;
	private List<Person> passengers = new ArrayList<>();

    public BoatOnOars() {
    	System.out.print("\nПуста шлюпка на веслах була створенна");
    }

    public BoatOnOars(String name, Boat boat, PairOfOars[] pairOfOars, Sailer[] sailer, List<Person> passengers) {
        this.name = name;
        this.boat = boat;
        this.pairOfOars = pairOfOars;
        this.sailer = sailer;
        this.passengers = passengers;
    }

    public BoatOnOars(BoatOnOars other) {
        this.name = other.name;
        this.boat = new Boat(other.boat);
        this.pairOfOars = other.pairOfOars.clone();
        this.sailer = other.sailer.clone();
        this.passengers = new ArrayList<>(other.passengers);
    }

    {
        this.name = "Невідомо";
        this.boat = new Boat();
        this.pairOfOars = new PairOfOars[2];
        this.sailer = new Sailer[2];
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Boat getBoat() {
        return boat;
    }

    public void setBoat(Boat boat) {
        this.boat = boat;
    }

    public PairOfOars[] getPairOfOars() {
        return pairOfOars;
    }

    public void setPairOfOars(PairOfOars[] pairOfOars) {
        this.pairOfOars = pairOfOars;
    }

    public Sailer[] getSailer() {
        return sailer;
    }

    public void setSailer(Sailer[] sailer) {
        this.sailer = sailer;
    }

    public List<Person> getPassengers() {
        return passengers;
    }

    public void setPassengers(List<Person> passengers) {
        this.passengers = passengers;
    }
	
	class Boat 
	{
		private Deck deck;
		private Body body;

	    public Boat() {
	    	System.out.print("\nПуста шлюпка була створенна");
	    }

	    public Boat(Deck deck, Body body) {
	        this.deck = deck;
	        this.body = body;
	    }

	    public Boat(Boat other) {
	        this.deck = new Deck(other.deck);
	        this.body = new Body(other.body);
	    }

	    {
	        this.deck = new Deck();
	        this.body = new Body();
	    }

	    public Deck getDeck() {
	        return deck;
	    }

	    public void setDeck(Deck deck) {
	        this.deck = deck;
	    }

	    public Body getBody() {
	        return body;
	    }

	    public void setBody(Body body) {
	        this.body = body;
	    }
		
	}
	
	class Deck
	{
		private Integer sailorsCapacity;
		private Integer passengerCapacity;
		
		 public Deck() {
			 System.out.print("\nПуста палуба була створенна");
	    }

	    public Deck(Integer sailorsCapacity, Integer passengerCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	        this.passengerCapacity = passengerCapacity;
	    }

	    public Deck(Deck other) {
	        this.sailorsCapacity = other.sailorsCapacity;
	        this.passengerCapacity = other.passengerCapacity;
	    }

	    {
	        this.sailorsCapacity = 0;
	        this.passengerCapacity = 0;
	    }

	    public Integer getSailorsCapacity() {
	        return sailorsCapacity;
	    }

	    public void setSailorsCapacity(Integer sailorsCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	    }

	    public Integer getPassengerCapacity() {
	        return passengerCapacity;
	    }

	    public void setPassengerCapacity(Integer passengerCapacity) {
	        this.passengerCapacity = passengerCapacity;
	    }
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "кількість of sailors='" + sailorsCapacity + '\'' +
	                ", кількість пасажирів='" + passengerCapacity + '\'' +
	                '}';
	    }
	}
	
	class Body
	{
		private String material;
		private Integer durability;
		
		public Body() {
			System.out.print("\nПустий корпус був створений");
	    }

	    public Body(String material, Integer durability) {
	        this.material = material;
	        this.durability = durability;
	    }

	    public Body(Body other) {
	        this.material = other.material;
	        this.durability = other.durability;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 0;
	    }

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }
	    @Override
	    public String toString() {
	        return "Корпус{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                '}';
	    }
	}
	
	class PairOfOars
	{
		private Oar rightOar;
		private Oar leftOar;
		
	    public PairOfOars() {
	    	System.out.print("\nПуста пара весел була створенна");
	    }

	    public PairOfOars(Oar rightOar, Oar leftOar) {
	        this.rightOar = rightOar;
	        this.leftOar = leftOar;
	    }

	    public PairOfOars(PairOfOars other) {
	        this.rightOar = new Oar(other.rightOar);
	        this.leftOar = new Oar(other.leftOar);
	    }

	    {
	        this.rightOar = new Oar();
	        this.leftOar = new Oar();
	    }
	    
	    public Boolean RowingToFowva
	    {
	    	return rightOar.Rowing();
	    }
	    
	    public Boolean RowingToLeft
	    {
	    	return rightOar.Rowing();
	    }
	    
	    public Boolean RowingToRight
	    {
	    	return leftOar.Rowing();
	    }

	    public Oar getRightOar() {
	        return rightOar;
	    }

	    public void setRightOar(Oar rightOar) {
	        this.rightOar = rightOar;
	    }

	    public Oar getLeftOar() {
	        return leftOar;
	    }

	    public void setLeftOar(Oar leftOar) {
	        this.leftOar = leftOar;
	    }
		
	}
	
	class Oar 
	{
		private String material;
		private Integer durability;
		private Integer maxDurability;
		private Integer quality;
		
		public Oar() {
			System.out.print("\nПусте весло було створене");
	    }

	    public Oar(String material, Integer durability, Integer quality) {
	        this.material = material;
	        this.durability = durability;
	        this.quality = quality;
	    }

	    public Oar(Oar other) {
	        this.material = other.material;
	        this.durability = other.durability;
	        this.quality = other.quality;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 1000;
	        this.quality = 30;
	    }
	    
	    public Boolean Rowing()
	    {
	    	if (durability > 0)
	    	{
	    		this.durability -= ((int)(Math.random() * 11)*100)/this.quality;
	    		return true;
	    	}
	    	return false;
	    }
	    
	    public Boolean Repair()
	    {
	    	if (this.maxDurability*this.quality)/100 > this.durability)
	    	{
	    		this.durability = ((this.maxDurability*100)/this.quality)(int)(Math.random() * 1.1);
	    		return true;
	    	}
	    	return false;
	    }
	    

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }

	    public Integer getQuality() {
	        return quality;
	    }

	    public void setQuality(Integer quality) {
	        this.quality = quality;
	    }
	    
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                ", якість=" + quality +
	                '}';
	    }
	}
	
	class Sailer extends Person
	{
		private Integer Stamina;
		private Integer Power;
		private Integer Experience;
		
	    public Sailer() {
	        super();
	        System.out.print("\nПустий, той хто працює веслом, був створений");
	    }

	    public Sailer(String firstname, String lastname, Integer years, Integer Stamina, Integer Power, Integer Experience) {
	        super(firstname, lastname, years);
	        this.Stamina = Stamina;
	        this.Power = Power;
	        this.Experience = Experience;
	    }

	    public Sailer(Sailer other) {
	        super(other);
	        this.Stamina = other.Stamina;
	        this.Power = other.Power;
	        this.Experience = other.Experience;
	    }

	    {
	        this.Stamina = 0;
	        this.Power = 0;
	        this.Experience = 0;
	    }

	    public Integer getStamina() {
	        return Stamina;
	    }

	    public void setStamina(Integer Stamina) {
	        this.Stamina = Stamina;
	    }

	    public Integer getPower() {
	        return Power;
	    }

	    public void setPower(Integer Power) {
	        this.Power = Power;
	    }

	    public Integer getExperience() {
	        return Experience;
	    }

	    public void setExperience(Integer Experience) {
	        this.Experience = Experience;
	    }

	    @Override
	    public String toString() {
	        return "Sailer{" +
	                "ім'я='" + getFirstname() + '\'' +
	                ", прізвище='" + getLastname() + '\'' +
	                ", вік=" + getYears() +
	                ", енергія=" + Stamina +
	                ", потужність=" + Power +
	                ", досвід=" + Experience +
	                '}';
	    }

	}
	
	class Person
	{
		private String firstname;
		private String lastname;
		private Integer years;
		
	    public Person() {
	    	System.out.print("\nПуста людина була створена");
	    }

	    public Person(String firstname, String lastname, Integer years) {
	        this.firstname = firstname;
	        this.lastname = lastname;
	        this.years = years;
	    }

	    public Person(Person other) {
	        this.firstname = other.firstname;
	        this.lastname = other.lastname;
	        this.years = other.years;
	    }

	    {
	        this.firstname = "Невідомо";
	        this.lastname = "Невідомо";
	        this.years = 0;
	    }

	    public String getFirstname() {
	        return firstname;
	    }

	    public void setFirstname(String firstname) {
	        this.firstname = firstname;
	    }

	    public String getLastname() {
	        return lastname;
	    }

	    public void setLastname(String lastname) {
	        this.lastname = lastname;
	    }

	    public Integer getYears() {
	        return years;
	    }

	    public void setYears(Integer years) {
	        this.years = years;
	    }

	    @Override
	    public String toString() {
	        return "Людина{" +
	                "ім'я='" + firstname + '\'' +
	                ", прізвище='" + lastname + '\'' +
	                ", вік=" + years +
	                '}';
	    }
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-09-08 11:56:51.877
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-09-08 11:56:51.877
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-09-08 11:56:53.212
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
/**
 * 
 */
package CI_306.Shyryi.Lab3;

import java.util.List;
import java.util.ArrayList;

/**
 * 
 */
public class BoatOnOars {
	
	private String name;
	private Boat boat;
	private PairOfOars[] pairOfOars;
	private Sailer[] sailer;
	private List<Person> passengers = new ArrayList<>();

    public BoatOnOars() {
    	System.out.print("\nПуста шлюпка на веслах була створенна");
    }

    public BoatOnOars(String name, Boat boat, PairOfOars[] pairOfOars, Sailer[] sailer, List<Person> passengers) {
        this.name = name;
        this.boat = boat;
        this.pairOfOars = pairOfOars;
        this.sailer = sailer;
        this.passengers = passengers;
    }

    public BoatOnOars(BoatOnOars other) {
        this.name = other.name;
        this.boat = new Boat(other.boat);
        this.pairOfOars = other.pairOfOars.clone();
        this.sailer = other.sailer.clone();
        this.passengers = new ArrayList<>(other.passengers);
    }

    {
        this.name = "Невідомо";
        this.boat = new Boat();
        this.pairOfOars = new PairOfOars[2];
        this.sailer = new Sailer[2];
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Boat getBoat() {
        return boat;
    }

    public void setBoat(Boat boat) {
        this.boat = boat;
    }

    public PairOfOars[] getPairOfOars() {
        return pairOfOars;
    }

    public void setPairOfOars(PairOfOars[] pairOfOars) {
        this.pairOfOars = pairOfOars;
    }

    public Sailer[] getSailer() {
        return sailer;
    }

    public void setSailer(Sailer[] sailer) {
        this.sailer = sailer;
    }

    public List<Person> getPassengers() {
        return passengers;
    }

    public void setPassengers(List<Person> passengers) {
        this.passengers = passengers;
    }
	
	class Boat 
	{
		private Deck deck;
		private Body body;

	    public Boat() {
	    	System.out.print("\nПуста шлюпка була створенна");
	    }

	    public Boat(Deck deck, Body body) {
	        this.deck = deck;
	        this.body = body;
	    }

	    public Boat(Boat other) {
	        this.deck = new Deck(other.deck);
	        this.body = new Body(other.body);
	    }

	    {
	        this.deck = new Deck();
	        this.body = new Body();
	    }

	    public Deck getDeck() {
	        return deck;
	    }

	    public void setDeck(Deck deck) {
	        this.deck = deck;
	    }

	    public Body getBody() {
	        return body;
	    }

	    public void setBody(Body body) {
	        this.body = body;
	    }
		
	}
	
	class Deck
	{
		private Integer sailorsCapacity;
		private Integer passengerCapacity;
		
		 public Deck() {
			 System.out.print("\nПуста палуба була створенна");
	    }

	    public Deck(Integer sailorsCapacity, Integer passengerCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	        this.passengerCapacity = passengerCapacity;
	    }

	    public Deck(Deck other) {
	        this.sailorsCapacity = other.sailorsCapacity;
	        this.passengerCapacity = other.passengerCapacity;
	    }

	    {
	        this.sailorsCapacity = 0;
	        this.passengerCapacity = 0;
	    }

	    public Integer getSailorsCapacity() {
	        return sailorsCapacity;
	    }

	    public void setSailorsCapacity(Integer sailorsCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	    }

	    public Integer getPassengerCapacity() {
	        return passengerCapacity;
	    }

	    public void setPassengerCapacity(Integer passengerCapacity) {
	        this.passengerCapacity = passengerCapacity;
	    }
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "кількість of sailors='" + sailorsCapacity + '\'' +
	                ", кількість пасажирів='" + passengerCapacity + '\'' +
	                '}';
	    }
	}
	
	class Body
	{
		private String material;
		private Integer durability;
		
		public Body() {
			System.out.print("\nПустий корпус був створений");
	    }

	    public Body(String material, Integer durability) {
	        this.material = material;
	        this.durability = durability;
	    }

	    public Body(Body other) {
	        this.material = other.material;
	        this.durability = other.durability;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 0;
	    }

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }
	    @Override
	    public String toString() {
	        return "Корпус{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                '}';
	    }
	}
	
	class PairOfOars
	{
		private Oar rightOar;
		private Oar leftOar;
		
	    public PairOfOars() {
	    	System.out.print("\nПуста пара весел була створенна");
	    }

	    public PairOfOars(Oar rightOar, Oar leftOar) {
	        this.rightOar = rightOar;
	        this.leftOar = leftOar;
	    }

	    public PairOfOars(PairOfOars other) {
	        this.rightOar = new Oar(other.rightOar);
	        this.leftOar = new Oar(other.leftOar);
	    }

	    {
	        this.rightOar = new Oar();
	        this.leftOar = new Oar();
	    }
	    
	    public Boolean RowingToFo
	    {
	    	return rightOar.Rowing();
	    }
	    
	    public Boolean RowingToLeft
	    {
	    	return rightOar.Rowing();
	    }
	    
	    public Boolean RowingToRight
	    {
	    	return leftOar.Rowing();
	    }

	    public Oar getRightOar() {
	        return rightOar;
	    }

	    public void setRightOar(Oar rightOar) {
	        this.rightOar = rightOar;
	    }

	    public Oar getLeftOar() {
	        return leftOar;
	    }

	    public void setLeftOar(Oar leftOar) {
	        this.leftOar = leftOar;
	    }
		
	}
	
	class Oar 
	{
		private String material;
		private Integer durability;
		private Integer maxDurability;
		private Integer quality;
		
		public Oar() {
			System.out.print("\nПусте весло було створене");
	    }

	    public Oar(String material, Integer durability, Integer quality) {
	        this.material = material;
	        this.durability = durability;
	        this.quality = quality;
	    }

	    public Oar(Oar other) {
	        this.material = other.material;
	        this.durability = other.durability;
	        this.quality = other.quality;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 1000;
	        this.quality = 30;
	    }
	    
	    public Boolean Rowing()
	    {
	    	if (durability > 0)
	    	{
	    		this.durability -= ((int)(Math.random() * 11)*100)/this.quality;
	    		return true;
	    	}
	    	return false;
	    }
	    
	    public Boolean Repair()
	    {
	    	if (this.maxDurability*this.quality)/100 > this.durability)
	    	{
	    		this.durability = ((this.maxDurability*100)/this.quality)(int)(Math.random() * 1.1);
	    		return true;
	    	}
	    	return false;
	    }
	    

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }

	    public Integer getQuality() {
	        return quality;
	    }

	    public void setQuality(Integer quality) {
	        this.quality = quality;
	    }
	    
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                ", якість=" + quality +
	                '}';
	    }
	}
	
	class Sailer extends Person
	{
		private Integer Stamina;
		private Integer Power;
		private Integer Experience;
		
	    public Sailer() {
	        super();
	        System.out.print("\nПустий, той хто працює веслом, був створений");
	    }

	    public Sailer(String firstname, String lastname, Integer years, Integer Stamina, Integer Power, Integer Experience) {
	        super(firstname, lastname, years);
	        this.Stamina = Stamina;
	        this.Power = Power;
	        this.Experience = Experience;
	    }

	    public Sailer(Sailer other) {
	        super(other);
	        this.Stamina = other.Stamina;
	        this.Power = other.Power;
	        this.Experience = other.Experience;
	    }

	    {
	        this.Stamina = 0;
	        this.Power = 0;
	        this.Experience = 0;
	    }

	    public Integer getStamina() {
	        return Stamina;
	    }

	    public void setStamina(Integer Stamina) {
	        this.Stamina = Stamina;
	    }

	    public Integer getPower() {
	        return Power;
	    }

	    public void setPower(Integer Power) {
	        this.Power = Power;
	    }

	    public Integer getExperience() {
	        return Experience;
	    }

	    public void setExperience(Integer Experience) {
	        this.Experience = Experience;
	    }

	    @Override
	    public String toString() {
	        return "Sailer{" +
	                "ім'я='" + getFirstname() + '\'' +
	                ", прізвище='" + getLastname() + '\'' +
	                ", вік=" + getYears() +
	                ", енергія=" + Stamina +
	                ", потужність=" + Power +
	                ", досвід=" + Experience +
	                '}';
	    }

	}
	
	class Person
	{
		private String firstname;
		private String lastname;
		private Integer years;
		
	    public Person() {
	    	System.out.print("\nПуста людина була створена");
	    }

	    public Person(String firstname, String lastname, Integer years) {
	        this.firstname = firstname;
	        this.lastname = lastname;
	        this.years = years;
	    }

	    public Person(Person other) {
	        this.firstname = other.firstname;
	        this.lastname = other.lastname;
	        this.years = other.years;
	    }

	    {
	        this.firstname = "Невідомо";
	        this.lastname = "Невідомо";
	        this.years = 0;
	    }

	    public String getFirstname() {
	        return firstname;
	    }

	    public void setFirstname(String firstname) {
	        this.firstname = firstname;
	    }

	    public String getLastname() {
	        return lastname;
	    }

	    public void setLastname(String lastname) {
	        this.lastname = lastname;
	    }

	    public Integer getYears() {
	        return years;
	    }

	    public void setYears(Integer years) {
	        this.years = years;
	    }

	    @Override
	    public String toString() {
	        return "Людина{" +
	                "ім'я='" + firstname + '\'' +
	                ", прізвище='" + lastname + '\'' +
	                ", вік=" + years +
	                '}';
	    }
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-09-08 11:56:53.213
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-09-08 11:56:53.213
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-09-08 11:56:53.282
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
/**
 * 
 */
package CI_306.Shyryi.Lab3;

import java.util.List;
import java.util.ArrayList;

/**
 * 
 */
public class BoatOnOars {
	
	private String name;
	private Boat boat;
	private PairOfOars[] pairOfOars;
	private Sailer[] sailer;
	private List<Person> passengers = new ArrayList<>();

    public BoatOnOars() {
    	System.out.print("\nПуста шлюпка на веслах була створенна");
    }

    public BoatOnOars(String name, Boat boat, PairOfOars[] pairOfOars, Sailer[] sailer, List<Person> passengers) {
        this.name = name;
        this.boat = boat;
        this.pairOfOars = pairOfOars;
        this.sailer = sailer;
        this.passengers = passengers;
    }

    public BoatOnOars(BoatOnOars other) {
        this.name = other.name;
        this.boat = new Boat(other.boat);
        this.pairOfOars = other.pairOfOars.clone();
        this.sailer = other.sailer.clone();
        this.passengers = new ArrayList<>(other.passengers);
    }

    {
        this.name = "Невідомо";
        this.boat = new Boat();
        this.pairOfOars = new PairOfOars[2];
        this.sailer = new Sailer[2];
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Boat getBoat() {
        return boat;
    }

    public void setBoat(Boat boat) {
        this.boat = boat;
    }

    public PairOfOars[] getPairOfOars() {
        return pairOfOars;
    }

    public void setPairOfOars(PairOfOars[] pairOfOars) {
        this.pairOfOars = pairOfOars;
    }

    public Sailer[] getSailer() {
        return sailer;
    }

    public void setSailer(Sailer[] sailer) {
        this.sailer = sailer;
    }

    public List<Person> getPassengers() {
        return passengers;
    }

    public void setPassengers(List<Person> passengers) {
        this.passengers = passengers;
    }
	
	class Boat 
	{
		private Deck deck;
		private Body body;

	    public Boat() {
	    	System.out.print("\nПуста шлюпка була створенна");
	    }

	    public Boat(Deck deck, Body body) {
	        this.deck = deck;
	        this.body = body;
	    }

	    public Boat(Boat other) {
	        this.deck = new Deck(other.deck);
	        this.body = new Body(other.body);
	    }

	    {
	        this.deck = new Deck();
	        this.body = new Body();
	    }

	    public Deck getDeck() {
	        return deck;
	    }

	    public void setDeck(Deck deck) {
	        this.deck = deck;
	    }

	    public Body getBody() {
	        return body;
	    }

	    public void setBody(Body body) {
	        this.body = body;
	    }
		
	}
	
	class Deck
	{
		private Integer sailorsCapacity;
		private Integer passengerCapacity;
		
		 public Deck() {
			 System.out.print("\nПуста палуба була створенна");
	    }

	    public Deck(Integer sailorsCapacity, Integer passengerCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	        this.passengerCapacity = passengerCapacity;
	    }

	    public Deck(Deck other) {
	        this.sailorsCapacity = other.sailorsCapacity;
	        this.passengerCapacity = other.passengerCapacity;
	    }

	    {
	        this.sailorsCapacity = 0;
	        this.passengerCapacity = 0;
	    }

	    public Integer getSailorsCapacity() {
	        return sailorsCapacity;
	    }

	    public void setSailorsCapacity(Integer sailorsCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	    }

	    public Integer getPassengerCapacity() {
	        return passengerCapacity;
	    }

	    public void setPassengerCapacity(Integer passengerCapacity) {
	        this.passengerCapacity = passengerCapacity;
	    }
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "кількість of sailors='" + sailorsCapacity + '\'' +
	                ", кількість пасажирів='" + passengerCapacity + '\'' +
	                '}';
	    }
	}
	
	class Body
	{
		private String material;
		private Integer durability;
		
		public Body() {
			System.out.print("\nПустий корпус був створений");
	    }

	    public Body(String material, Integer durability) {
	        this.material = material;
	        this.durability = durability;
	    }

	    public Body(Body other) {
	        this.material = other.material;
	        this.durability = other.durability;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 0;
	    }

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }
	    @Override
	    public String toString() {
	        return "Корпус{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                '}';
	    }
	}
	
	class PairOfOars
	{
		private Oar rightOar;
		private Oar leftOar;
		
	    public PairOfOars() {
	    	System.out.print("\nПуста пара весел була створенна");
	    }

	    public PairOfOars(Oar rightOar, Oar leftOar) {
	        this.rightOar = rightOar;
	        this.leftOar = leftOar;
	    }

	    public PairOfOars(PairOfOars other) {
	        this.rightOar = new Oar(other.rightOar);
	        this.leftOar = new Oar(other.leftOar);
	    }

	    {
	        this.rightOar = new Oar();
	        this.leftOar = new Oar();
	    }
	    
	    public Boolean RowingToFo
	    {
	    	return rightOar.Rowing();
	    }
	    
	    public Boolean RowingToLeft
	    {
	    	return rightOar.Rowing();
	    }
	    
	    public Boolean RowingToRight
	    {
	    	return leftOar.Rowing();
	    }

	    public Oar getRightOar() {
	        return rightOar;
	    }

	    public void setRightOar(Oar rightOar) {
	        this.rightOar = rightOar;
	    }

	    public Oar getLeftOar() {
	        return leftOar;
	    }

	    public void setLeftOar(Oar leftOar) {
	        this.leftOar = leftOar;
	    }
		
	}
	
	class Oar 
	{
		private String material;
		private Integer durability;
		private Integer maxDurability;
		private Integer quality;
		
		public Oar() {
			System.out.print("\nПусте весло було створене");
	    }

	    public Oar(String material, Integer durability, Integer quality) {
	        this.material = material;
	        this.durability = durability;
	        this.quality = quality;
	    }

	    public Oar(Oar other) {
	        this.material = other.material;
	        this.durability = other.durability;
	        this.quality = other.quality;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 1000;
	        this.quality = 30;
	    }
	    
	    public Boolean Rowing()
	    {
	    	if (durability > 0)
	    	{
	    		this.durability -= ((int)(Math.random() * 11)*100)/this.quality;
	    		return true;
	    	}
	    	return false;
	    }
	    
	    public Boolean Repair()
	    {
	    	if (this.maxDurability*this.quality)/100 > this.durability)
	    	{
	    		this.durability = ((this.maxDurability*100)/this.quality)(int)(Math.random() * 1.1);
	    		return true;
	    	}
	    	return false;
	    }
	    

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }

	    public Integer getQuality() {
	        return quality;
	    }

	    public void setQuality(Integer quality) {
	        this.quality = quality;
	    }
	    
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                ", якість=" + quality +
	                '}';
	    }
	}
	
	class Sailer extends Person
	{
		private Integer Stamina;
		private Integer Power;
		private Integer Experience;
		
	    public Sailer() {
	        super();
	        System.out.print("\nПустий, той хто працює веслом, був створений");
	    }

	    public Sailer(String firstname, String lastname, Integer years, Integer Stamina, Integer Power, Integer Experience) {
	        super(firstname, lastname, years);
	        this.Stamina = Stamina;
	        this.Power = Power;
	        this.Experience = Experience;
	    }

	    public Sailer(Sailer other) {
	        super(other);
	        this.Stamina = other.Stamina;
	        this.Power = other.Power;
	        this.Experience = other.Experience;
	    }

	    {
	        this.Stamina = 0;
	        this.Power = 0;
	        this.Experience = 0;
	    }

	    public Integer getStamina() {
	        return Stamina;
	    }

	    public void setStamina(Integer Stamina) {
	        this.Stamina = Stamina;
	    }

	    public Integer getPower() {
	        return Power;
	    }

	    public void setPower(Integer Power) {
	        this.Power = Power;
	    }

	    public Integer getExperience() {
	        return Experience;
	    }

	    public void setExperience(Integer Experience) {
	        this.Experience = Experience;
	    }

	    @Override
	    public String toString() {
	        return "Sailer{" +
	                "ім'я='" + getFirstname() + '\'' +
	                ", прізвище='" + getLastname() + '\'' +
	                ", вік=" + getYears() +
	                ", енергія=" + Stamina +
	                ", потужність=" + Power +
	                ", досвід=" + Experience +
	                '}';
	    }

	}
	
	class Person
	{
		private String firstname;
		private String lastname;
		private Integer years;
		
	    public Person() {
	    	System.out.print("\nПуста людина була створена");
	    }

	    public Person(String firstname, String lastname, Integer years) {
	        this.firstname = firstname;
	        this.lastname = lastname;
	        this.years = years;
	    }

	    public Person(Person other) {
	        this.firstname = other.firstname;
	        this.lastname = other.lastname;
	        this.years = other.years;
	    }

	    {
	        this.firstname = "Невідомо";
	        this.lastname = "Невідомо";
	        this.years = 0;
	    }

	    public String getFirstname() {
	        return firstname;
	    }

	    public void setFirstname(String firstname) {
	        this.firstname = firstname;
	    }

	    public String getLastname() {
	        return lastname;
	    }

	    public void setLastname(String lastname) {
	        this.lastname = lastname;
	    }

	    public Integer getYears() {
	        return years;
	    }

	    public void setYears(Integer years) {
	        this.years = years;
	    }

	    @Override
	    public String toString() {
	        return "Людина{" +
	                "ім'я='" + firstname + '\'' +
	                ", прізвище='" + lastname + '\'' +
	                ", вік=" + years +
	                '}';
	    }
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-09-08 11:56:53.283
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-09-08 11:56:53.283
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-09-08 11:56:54.047
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
/**
 * 
 */
package CI_306.Shyryi.Lab3;

import java.util.List;
import java.util.ArrayList;

/**
 * 
 */
public class BoatOnOars {
	
	private String name;
	private Boat boat;
	private PairOfOars[] pairOfOars;
	private Sailer[] sailer;
	private List<Person> passengers = new ArrayList<>();

    public BoatOnOars() {
    	System.out.print("\nПуста шлюпка на веслах була створенна");
    }

    public BoatOnOars(String name, Boat boat, PairOfOars[] pairOfOars, Sailer[] sailer, List<Person> passengers) {
        this.name = name;
        this.boat = boat;
        this.pairOfOars = pairOfOars;
        this.sailer = sailer;
        this.passengers = passengers;
    }

    public BoatOnOars(BoatOnOars other) {
        this.name = other.name;
        this.boat = new Boat(other.boat);
        this.pairOfOars = other.pairOfOars.clone();
        this.sailer = other.sailer.clone();
        this.passengers = new ArrayList<>(other.passengers);
    }

    {
        this.name = "Невідомо";
        this.boat = new Boat();
        this.pairOfOars = new PairOfOars[2];
        this.sailer = new Sailer[2];
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Boat getBoat() {
        return boat;
    }

    public void setBoat(Boat boat) {
        this.boat = boat;
    }

    public PairOfOars[] getPairOfOars() {
        return pairOfOars;
    }

    public void setPairOfOars(PairOfOars[] pairOfOars) {
        this.pairOfOars = pairOfOars;
    }

    public Sailer[] getSailer() {
        return sailer;
    }

    public void setSailer(Sailer[] sailer) {
        this.sailer = sailer;
    }

    public List<Person> getPassengers() {
        return passengers;
    }

    public void setPassengers(List<Person> passengers) {
        this.passengers = passengers;
    }
	
	class Boat 
	{
		private Deck deck;
		private Body body;

	    public Boat() {
	    	System.out.print("\nПуста шлюпка була створенна");
	    }

	    public Boat(Deck deck, Body body) {
	        this.deck = deck;
	        this.body = body;
	    }

	    public Boat(Boat other) {
	        this.deck = new Deck(other.deck);
	        this.body = new Body(other.body);
	    }

	    {
	        this.deck = new Deck();
	        this.body = new Body();
	    }

	    public Deck getDeck() {
	        return deck;
	    }

	    public void setDeck(Deck deck) {
	        this.deck = deck;
	    }

	    public Body getBody() {
	        return body;
	    }

	    public void setBody(Body body) {
	        this.body = body;
	    }
		
	}
	
	class Deck
	{
		private Integer sailorsCapacity;
		private Integer passengerCapacity;
		
		 public Deck() {
			 System.out.print("\nПуста палуба була створенна");
	    }

	    public Deck(Integer sailorsCapacity, Integer passengerCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	        this.passengerCapacity = passengerCapacity;
	    }

	    public Deck(Deck other) {
	        this.sailorsCapacity = other.sailorsCapacity;
	        this.passengerCapacity = other.passengerCapacity;
	    }

	    {
	        this.sailorsCapacity = 0;
	        this.passengerCapacity = 0;
	    }

	    public Integer getSailorsCapacity() {
	        return sailorsCapacity;
	    }

	    public void setSailorsCapacity(Integer sailorsCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	    }

	    public Integer getPassengerCapacity() {
	        return passengerCapacity;
	    }

	    public void setPassengerCapacity(Integer passengerCapacity) {
	        this.passengerCapacity = passengerCapacity;
	    }
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "кількість of sailors='" + sailorsCapacity + '\'' +
	                ", кількість пасажирів='" + passengerCapacity + '\'' +
	                '}';
	    }
	}
	
	class Body
	{
		private String material;
		private Integer durability;
		
		public Body() {
			System.out.print("\nПустий корпус був створений");
	    }

	    public Body(String material, Integer durability) {
	        this.material = material;
	        this.durability = durability;
	    }

	    public Body(Body other) {
	        this.material = other.material;
	        this.durability = other.durability;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 0;
	    }

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }
	    @Override
	    public String toString() {
	        return "Корпус{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                '}';
	    }
	}
	
	class PairOfOars
	{
		private Oar rightOar;
		private Oar leftOar;
		
	    public PairOfOars() {
	    	System.out.print("\nПуста пара весел була створенна");
	    }

	    public PairOfOars(Oar rightOar, Oar leftOar) {
	        this.rightOar = rightOar;
	        this.leftOar = leftOar;
	    }

	    public PairOfOars(PairOfOars other) {
	        this.rightOar = new Oar(other.rightOar);
	        this.leftOar = new Oar(other.leftOar);
	    }

	    {
	        this.rightOar = new Oar();
	        this.leftOar = new Oar();
	    }
	    
	    public Boolean RowingToFor
	    {
	    	return rightOar.Rowing();
	    }
	    
	    public Boolean RowingToLeft
	    {
	    	return rightOar.Rowing();
	    }
	    
	    public Boolean RowingToRight
	    {
	    	return leftOar.Rowing();
	    }

	    public Oar getRightOar() {
	        return rightOar;
	    }

	    public void setRightOar(Oar rightOar) {
	        this.rightOar = rightOar;
	    }

	    public Oar getLeftOar() {
	        return leftOar;
	    }

	    public void setLeftOar(Oar leftOar) {
	        this.leftOar = leftOar;
	    }
		
	}
	
	class Oar 
	{
		private String material;
		private Integer durability;
		private Integer maxDurability;
		private Integer quality;
		
		public Oar() {
			System.out.print("\nПусте весло було створене");
	    }

	    public Oar(String material, Integer durability, Integer quality) {
	        this.material = material;
	        this.durability = durability;
	        this.quality = quality;
	    }

	    public Oar(Oar other) {
	        this.material = other.material;
	        this.durability = other.durability;
	        this.quality = other.quality;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 1000;
	        this.quality = 30;
	    }
	    
	    public Boolean Rowing()
	    {
	    	if (durability > 0)
	    	{
	    		this.durability -= ((int)(Math.random() * 11)*100)/this.quality;
	    		return true;
	    	}
	    	return false;
	    }
	    
	    public Boolean Repair()
	    {
	    	if (this.maxDurability*this.quality)/100 > this.durability)
	    	{
	    		this.durability = ((this.maxDurability*100)/this.quality)(int)(Math.random() * 1.1);
	    		return true;
	    	}
	    	return false;
	    }
	    

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }

	    public Integer getQuality() {
	        return quality;
	    }

	    public void setQuality(Integer quality) {
	        this.quality = quality;
	    }
	    
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                ", якість=" + quality +
	                '}';
	    }
	}
	
	class Sailer extends Person
	{
		private Integer Stamina;
		private Integer Power;
		private Integer Experience;
		
	    public Sailer() {
	        super();
	        System.out.print("\nПустий, той хто працює веслом, був створений");
	    }

	    public Sailer(String firstname, String lastname, Integer years, Integer Stamina, Integer Power, Integer Experience) {
	        super(firstname, lastname, years);
	        this.Stamina = Stamina;
	        this.Power = Power;
	        this.Experience = Experience;
	    }

	    public Sailer(Sailer other) {
	        super(other);
	        this.Stamina = other.Stamina;
	        this.Power = other.Power;
	        this.Experience = other.Experience;
	    }

	    {
	        this.Stamina = 0;
	        this.Power = 0;
	        this.Experience = 0;
	    }

	    public Integer getStamina() {
	        return Stamina;
	    }

	    public void setStamina(Integer Stamina) {
	        this.Stamina = Stamina;
	    }

	    public Integer getPower() {
	        return Power;
	    }

	    public void setPower(Integer Power) {
	        this.Power = Power;
	    }

	    public Integer getExperience() {
	        return Experience;
	    }

	    public void setExperience(Integer Experience) {
	        this.Experience = Experience;
	    }

	    @Override
	    public String toString() {
	        return "Sailer{" +
	                "ім'я='" + getFirstname() + '\'' +
	                ", прізвище='" + getLastname() + '\'' +
	                ", вік=" + getYears() +
	                ", енергія=" + Stamina +
	                ", потужність=" + Power +
	                ", досвід=" + Experience +
	                '}';
	    }

	}
	
	class Person
	{
		private String firstname;
		private String lastname;
		private Integer years;
		
	    public Person() {
	    	System.out.print("\nПуста людина була створена");
	    }

	    public Person(String firstname, String lastname, Integer years) {
	        this.firstname = firstname;
	        this.lastname = lastname;
	        this.years = years;
	    }

	    public Person(Person other) {
	        this.firstname = other.firstname;
	        this.lastname = other.lastname;
	        this.years = other.years;
	    }

	    {
	        this.firstname = "Невідомо";
	        this.lastname = "Невідомо";
	        this.years = 0;
	    }

	    public String getFirstname() {
	        return firstname;
	    }

	    public void setFirstname(String firstname) {
	        this.firstname = firstname;
	    }

	    public String getLastname() {
	        return lastname;
	    }

	    public void setLastname(String lastname) {
	        this.lastname = lastname;
	    }

	    public Integer getYears() {
	        return years;
	    }

	    public void setYears(Integer years) {
	        this.years = years;
	    }

	    @Override
	    public String toString() {
	        return "Людина{" +
	                "ім'я='" + firstname + '\'' +
	                ", прізвище='" + lastname + '\'' +
	                ", вік=" + years +
	                '}';
	    }
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-09-08 11:56:54.048
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-09-08 11:56:54.049
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-09-08 11:56:54.135
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
/**
 * 
 */
package CI_306.Shyryi.Lab3;

import java.util.List;
import java.util.ArrayList;

/**
 * 
 */
public class BoatOnOars {
	
	private String name;
	private Boat boat;
	private PairOfOars[] pairOfOars;
	private Sailer[] sailer;
	private List<Person> passengers = new ArrayList<>();

    public BoatOnOars() {
    	System.out.print("\nПуста шлюпка на веслах була створенна");
    }

    public BoatOnOars(String name, Boat boat, PairOfOars[] pairOfOars, Sailer[] sailer, List<Person> passengers) {
        this.name = name;
        this.boat = boat;
        this.pairOfOars = pairOfOars;
        this.sailer = sailer;
        this.passengers = passengers;
    }

    public BoatOnOars(BoatOnOars other) {
        this.name = other.name;
        this.boat = new Boat(other.boat);
        this.pairOfOars = other.pairOfOars.clone();
        this.sailer = other.sailer.clone();
        this.passengers = new ArrayList<>(other.passengers);
    }

    {
        this.name = "Невідомо";
        this.boat = new Boat();
        this.pairOfOars = new PairOfOars[2];
        this.sailer = new Sailer[2];
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Boat getBoat() {
        return boat;
    }

    public void setBoat(Boat boat) {
        this.boat = boat;
    }

    public PairOfOars[] getPairOfOars() {
        return pairOfOars;
    }

    public void setPairOfOars(PairOfOars[] pairOfOars) {
        this.pairOfOars = pairOfOars;
    }

    public Sailer[] getSailer() {
        return sailer;
    }

    public void setSailer(Sailer[] sailer) {
        this.sailer = sailer;
    }

    public List<Person> getPassengers() {
        return passengers;
    }

    public void setPassengers(List<Person> passengers) {
        this.passengers = passengers;
    }
	
	class Boat 
	{
		private Deck deck;
		private Body body;

	    public Boat() {
	    	System.out.print("\nПуста шлюпка була створенна");
	    }

	    public Boat(Deck deck, Body body) {
	        this.deck = deck;
	        this.body = body;
	    }

	    public Boat(Boat other) {
	        this.deck = new Deck(other.deck);
	        this.body = new Body(other.body);
	    }

	    {
	        this.deck = new Deck();
	        this.body = new Body();
	    }

	    public Deck getDeck() {
	        return deck;
	    }

	    public void setDeck(Deck deck) {
	        this.deck = deck;
	    }

	    public Body getBody() {
	        return body;
	    }

	    public void setBody(Body body) {
	        this.body = body;
	    }
		
	}
	
	class Deck
	{
		private Integer sailorsCapacity;
		private Integer passengerCapacity;
		
		 public Deck() {
			 System.out.print("\nПуста палуба була створенна");
	    }

	    public Deck(Integer sailorsCapacity, Integer passengerCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	        this.passengerCapacity = passengerCapacity;
	    }

	    public Deck(Deck other) {
	        this.sailorsCapacity = other.sailorsCapacity;
	        this.passengerCapacity = other.passengerCapacity;
	    }

	    {
	        this.sailorsCapacity = 0;
	        this.passengerCapacity = 0;
	    }

	    public Integer getSailorsCapacity() {
	        return sailorsCapacity;
	    }

	    public void setSailorsCapacity(Integer sailorsCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	    }

	    public Integer getPassengerCapacity() {
	        return passengerCapacity;
	    }

	    public void setPassengerCapacity(Integer passengerCapacity) {
	        this.passengerCapacity = passengerCapacity;
	    }
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "кількість of sailors='" + sailorsCapacity + '\'' +
	                ", кількість пасажирів='" + passengerCapacity + '\'' +
	                '}';
	    }
	}
	
	class Body
	{
		private String material;
		private Integer durability;
		
		public Body() {
			System.out.print("\nПустий корпус був створений");
	    }

	    public Body(String material, Integer durability) {
	        this.material = material;
	        this.durability = durability;
	    }

	    public Body(Body other) {
	        this.material = other.material;
	        this.durability = other.durability;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 0;
	    }

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }
	    @Override
	    public String toString() {
	        return "Корпус{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                '}';
	    }
	}
	
	class PairOfOars
	{
		private Oar rightOar;
		private Oar leftOar;
		
	    public PairOfOars() {
	    	System.out.print("\nПуста пара весел була створенна");
	    }

	    public PairOfOars(Oar rightOar, Oar leftOar) {
	        this.rightOar = rightOar;
	        this.leftOar = leftOar;
	    }

	    public PairOfOars(PairOfOars other) {
	        this.rightOar = new Oar(other.rightOar);
	        this.leftOar = new Oar(other.leftOar);
	    }

	    {
	        this.rightOar = new Oar();
	        this.leftOar = new Oar();
	    }
	    
	    public Boolean RowingToFor
	    {
	    	return rightOar.Rowing();
	    }
	    
	    public Boolean RowingToLeft
	    {
	    	return rightOar.Rowing();
	    }
	    
	    public Boolean RowingToRight
	    {
	    	return leftOar.Rowing();
	    }

	    public Oar getRightOar() {
	        return rightOar;
	    }

	    public void setRightOar(Oar rightOar) {
	        this.rightOar = rightOar;
	    }

	    public Oar getLeftOar() {
	        return leftOar;
	    }

	    public void setLeftOar(Oar leftOar) {
	        this.leftOar = leftOar;
	    }
		
	}
	
	class Oar 
	{
		private String material;
		private Integer durability;
		private Integer maxDurability;
		private Integer quality;
		
		public Oar() {
			System.out.print("\nПусте весло було створене");
	    }

	    public Oar(String material, Integer durability, Integer quality) {
	        this.material = material;
	        this.durability = durability;
	        this.quality = quality;
	    }

	    public Oar(Oar other) {
	        this.material = other.material;
	        this.durability = other.durability;
	        this.quality = other.quality;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 1000;
	        this.quality = 30;
	    }
	    
	    public Boolean Rowing()
	    {
	    	if (durability > 0)
	    	{
	    		this.durability -= ((int)(Math.random() * 11)*100)/this.quality;
	    		return true;
	    	}
	    	return false;
	    }
	    
	    public Boolean Repair()
	    {
	    	if (this.maxDurability*this.quality)/100 > this.durability)
	    	{
	    		this.durability = ((this.maxDurability*100)/this.quality)(int)(Math.random() * 1.1);
	    		return true;
	    	}
	    	return false;
	    }
	    

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }

	    public Integer getQuality() {
	        return quality;
	    }

	    public void setQuality(Integer quality) {
	        this.quality = quality;
	    }
	    
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                ", якість=" + quality +
	                '}';
	    }
	}
	
	class Sailer extends Person
	{
		private Integer Stamina;
		private Integer Power;
		private Integer Experience;
		
	    public Sailer() {
	        super();
	        System.out.print("\nПустий, той хто працює веслом, був створений");
	    }

	    public Sailer(String firstname, String lastname, Integer years, Integer Stamina, Integer Power, Integer Experience) {
	        super(firstname, lastname, years);
	        this.Stamina = Stamina;
	        this.Power = Power;
	        this.Experience = Experience;
	    }

	    public Sailer(Sailer other) {
	        super(other);
	        this.Stamina = other.Stamina;
	        this.Power = other.Power;
	        this.Experience = other.Experience;
	    }

	    {
	        this.Stamina = 0;
	        this.Power = 0;
	        this.Experience = 0;
	    }

	    public Integer getStamina() {
	        return Stamina;
	    }

	    public void setStamina(Integer Stamina) {
	        this.Stamina = Stamina;
	    }

	    public Integer getPower() {
	        return Power;
	    }

	    public void setPower(Integer Power) {
	        this.Power = Power;
	    }

	    public Integer getExperience() {
	        return Experience;
	    }

	    public void setExperience(Integer Experience) {
	        this.Experience = Experience;
	    }

	    @Override
	    public String toString() {
	        return "Sailer{" +
	                "ім'я='" + getFirstname() + '\'' +
	                ", прізвище='" + getLastname() + '\'' +
	                ", вік=" + getYears() +
	                ", енергія=" + Stamina +
	                ", потужність=" + Power +
	                ", досвід=" + Experience +
	                '}';
	    }

	}
	
	class Person
	{
		private String firstname;
		private String lastname;
		private Integer years;
		
	    public Person() {
	    	System.out.print("\nПуста людина була створена");
	    }

	    public Person(String firstname, String lastname, Integer years) {
	        this.firstname = firstname;
	        this.lastname = lastname;
	        this.years = years;
	    }

	    public Person(Person other) {
	        this.firstname = other.firstname;
	        this.lastname = other.lastname;
	        this.years = other.years;
	    }

	    {
	        this.firstname = "Невідомо";
	        this.lastname = "Невідомо";
	        this.years = 0;
	    }

	    public String getFirstname() {
	        return firstname;
	    }

	    public void setFirstname(String firstname) {
	        this.firstname = firstname;
	    }

	    public String getLastname() {
	        return lastname;
	    }

	    public void setLastname(String lastname) {
	        this.lastname = lastname;
	    }

	    public Integer getYears() {
	        return years;
	    }

	    public void setYears(Integer years) {
	        this.years = years;
	    }

	    @Override
	    public String toString() {
	        return "Людина{" +
	                "ім'я='" + firstname + '\'' +
	                ", прізвище='" + lastname + '\'' +
	                ", вік=" + years +
	                '}';
	    }
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-09-08 11:56:54.136
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-09-08 11:56:54.136
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-09-08 11:56:54.915
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
/**
 * 
 */
package CI_306.Shyryi.Lab3;

import java.util.List;
import java.util.ArrayList;

/**
 * 
 */
public class BoatOnOars {
	
	private String name;
	private Boat boat;
	private PairOfOars[] pairOfOars;
	private Sailer[] sailer;
	private List<Person> passengers = new ArrayList<>();

    public BoatOnOars() {
    	System.out.print("\nПуста шлюпка на веслах була створенна");
    }

    public BoatOnOars(String name, Boat boat, PairOfOars[] pairOfOars, Sailer[] sailer, List<Person> passengers) {
        this.name = name;
        this.boat = boat;
        this.pairOfOars = pairOfOars;
        this.sailer = sailer;
        this.passengers = passengers;
    }

    public BoatOnOars(BoatOnOars other) {
        this.name = other.name;
        this.boat = new Boat(other.boat);
        this.pairOfOars = other.pairOfOars.clone();
        this.sailer = other.sailer.clone();
        this.passengers = new ArrayList<>(other.passengers);
    }

    {
        this.name = "Невідомо";
        this.boat = new Boat();
        this.pairOfOars = new PairOfOars[2];
        this.sailer = new Sailer[2];
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Boat getBoat() {
        return boat;
    }

    public void setBoat(Boat boat) {
        this.boat = boat;
    }

    public PairOfOars[] getPairOfOars() {
        return pairOfOars;
    }

    public void setPairOfOars(PairOfOars[] pairOfOars) {
        this.pairOfOars = pairOfOars;
    }

    public Sailer[] getSailer() {
        return sailer;
    }

    public void setSailer(Sailer[] sailer) {
        this.sailer = sailer;
    }

    public List<Person> getPassengers() {
        return passengers;
    }

    public void setPassengers(List<Person> passengers) {
        this.passengers = passengers;
    }
	
	class Boat 
	{
		private Deck deck;
		private Body body;

	    public Boat() {
	    	System.out.print("\nПуста шлюпка була створенна");
	    }

	    public Boat(Deck deck, Body body) {
	        this.deck = deck;
	        this.body = body;
	    }

	    public Boat(Boat other) {
	        this.deck = new Deck(other.deck);
	        this.body = new Body(other.body);
	    }

	    {
	        this.deck = new Deck();
	        this.body = new Body();
	    }

	    public Deck getDeck() {
	        return deck;
	    }

	    public void setDeck(Deck deck) {
	        this.deck = deck;
	    }

	    public Body getBody() {
	        return body;
	    }

	    public void setBody(Body body) {
	        this.body = body;
	    }
		
	}
	
	class Deck
	{
		private Integer sailorsCapacity;
		private Integer passengerCapacity;
		
		 public Deck() {
			 System.out.print("\nПуста палуба була створенна");
	    }

	    public Deck(Integer sailorsCapacity, Integer passengerCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	        this.passengerCapacity = passengerCapacity;
	    }

	    public Deck(Deck other) {
	        this.sailorsCapacity = other.sailorsCapacity;
	        this.passengerCapacity = other.passengerCapacity;
	    }

	    {
	        this.sailorsCapacity = 0;
	        this.passengerCapacity = 0;
	    }

	    public Integer getSailorsCapacity() {
	        return sailorsCapacity;
	    }

	    public void setSailorsCapacity(Integer sailorsCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	    }

	    public Integer getPassengerCapacity() {
	        return passengerCapacity;
	    }

	    public void setPassengerCapacity(Integer passengerCapacity) {
	        this.passengerCapacity = passengerCapacity;
	    }
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "кількість of sailors='" + sailorsCapacity + '\'' +
	                ", кількість пасажирів='" + passengerCapacity + '\'' +
	                '}';
	    }
	}
	
	class Body
	{
		private String material;
		private Integer durability;
		
		public Body() {
			System.out.print("\nПустий корпус був створений");
	    }

	    public Body(String material, Integer durability) {
	        this.material = material;
	        this.durability = durability;
	    }

	    public Body(Body other) {
	        this.material = other.material;
	        this.durability = other.durability;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 0;
	    }

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }
	    @Override
	    public String toString() {
	        return "Корпус{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                '}';
	    }
	}
	
	class PairOfOars
	{
		private Oar rightOar;
		private Oar leftOar;
		
	    public PairOfOars() {
	    	System.out.print("\nПуста пара весел була створенна");
	    }

	    public PairOfOars(Oar rightOar, Oar leftOar) {
	        this.rightOar = rightOar;
	        this.leftOar = leftOar;
	    }

	    public PairOfOars(PairOfOars other) {
	        this.rightOar = new Oar(other.rightOar);
	        this.leftOar = new Oar(other.leftOar);
	    }

	    {
	        this.rightOar = new Oar();
	        this.leftOar = new Oar();
	    }
	    
	    public Boolean RowingToForwa
	    {
	    	return rightOar.Rowing();
	    }
	    
	    public Boolean RowingToLeft
	    {
	    	return rightOar.Rowing();
	    }
	    
	    public Boolean RowingToRight
	    {
	    	return leftOar.Rowing();
	    }

	    public Oar getRightOar() {
	        return rightOar;
	    }

	    public void setRightOar(Oar rightOar) {
	        this.rightOar = rightOar;
	    }

	    public Oar getLeftOar() {
	        return leftOar;
	    }

	    public void setLeftOar(Oar leftOar) {
	        this.leftOar = leftOar;
	    }
		
	}
	
	class Oar 
	{
		private String material;
		private Integer durability;
		private Integer maxDurability;
		private Integer quality;
		
		public Oar() {
			System.out.print("\nПусте весло було створене");
	    }

	    public Oar(String material, Integer durability, Integer quality) {
	        this.material = material;
	        this.durability = durability;
	        this.quality = quality;
	    }

	    public Oar(Oar other) {
	        this.material = other.material;
	        this.durability = other.durability;
	        this.quality = other.quality;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 1000;
	        this.quality = 30;
	    }
	    
	    public Boolean Rowing()
	    {
	    	if (durability > 0)
	    	{
	    		this.durability -= ((int)(Math.random() * 11)*100)/this.quality;
	    		return true;
	    	}
	    	return false;
	    }
	    
	    public Boolean Repair()
	    {
	    	if (this.maxDurability*this.quality)/100 > this.durability)
	    	{
	    		this.durability = ((this.maxDurability*100)/this.quality)(int)(Math.random() * 1.1);
	    		return true;
	    	}
	    	return false;
	    }
	    

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }

	    public Integer getQuality() {
	        return quality;
	    }

	    public void setQuality(Integer quality) {
	        this.quality = quality;
	    }
	    
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                ", якість=" + quality +
	                '}';
	    }
	}
	
	class Sailer extends Person
	{
		private Integer Stamina;
		private Integer Power;
		private Integer Experience;
		
	    public Sailer() {
	        super();
	        System.out.print("\nПустий, той хто працює веслом, був створений");
	    }

	    public Sailer(String firstname, String lastname, Integer years, Integer Stamina, Integer Power, Integer Experience) {
	        super(firstname, lastname, years);
	        this.Stamina = Stamina;
	        this.Power = Power;
	        this.Experience = Experience;
	    }

	    public Sailer(Sailer other) {
	        super(other);
	        this.Stamina = other.Stamina;
	        this.Power = other.Power;
	        this.Experience = other.Experience;
	    }

	    {
	        this.Stamina = 0;
	        this.Power = 0;
	        this.Experience = 0;
	    }

	    public Integer getStamina() {
	        return Stamina;
	    }

	    public void setStamina(Integer Stamina) {
	        this.Stamina = Stamina;
	    }

	    public Integer getPower() {
	        return Power;
	    }

	    public void setPower(Integer Power) {
	        this.Power = Power;
	    }

	    public Integer getExperience() {
	        return Experience;
	    }

	    public void setExperience(Integer Experience) {
	        this.Experience = Experience;
	    }

	    @Override
	    public String toString() {
	        return "Sailer{" +
	                "ім'я='" + getFirstname() + '\'' +
	                ", прізвище='" + getLastname() + '\'' +
	                ", вік=" + getYears() +
	                ", енергія=" + Stamina +
	                ", потужність=" + Power +
	                ", досвід=" + Experience +
	                '}';
	    }

	}
	
	class Person
	{
		private String firstname;
		private String lastname;
		private Integer years;
		
	    public Person() {
	    	System.out.print("\nПуста людина була створена");
	    }

	    public Person(String firstname, String lastname, Integer years) {
	        this.firstname = firstname;
	        this.lastname = lastname;
	        this.years = years;
	    }

	    public Person(Person other) {
	        this.firstname = other.firstname;
	        this.lastname = other.lastname;
	        this.years = other.years;
	    }

	    {
	        this.firstname = "Невідомо";
	        this.lastname = "Невідомо";
	        this.years = 0;
	    }

	    public String getFirstname() {
	        return firstname;
	    }

	    public void setFirstname(String firstname) {
	        this.firstname = firstname;
	    }

	    public String getLastname() {
	        return lastname;
	    }

	    public void setLastname(String lastname) {
	        this.lastname = lastname;
	    }

	    public Integer getYears() {
	        return years;
	    }

	    public void setYears(Integer years) {
	        this.years = years;
	    }

	    @Override
	    public String toString() {
	        return "Людина{" +
	                "ім'я='" + firstname + '\'' +
	                ", прізвище='" + lastname + '\'' +
	                ", вік=" + years +
	                '}';
	    }
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-09-08 11:56:54.916
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-09-08 11:56:54.917
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-09-08 11:56:54.970
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
/**
 * 
 */
package CI_306.Shyryi.Lab3;

import java.util.List;
import java.util.ArrayList;

/**
 * 
 */
public class BoatOnOars {
	
	private String name;
	private Boat boat;
	private PairOfOars[] pairOfOars;
	private Sailer[] sailer;
	private List<Person> passengers = new ArrayList<>();

    public BoatOnOars() {
    	System.out.print("\nПуста шлюпка на веслах була створенна");
    }

    public BoatOnOars(String name, Boat boat, PairOfOars[] pairOfOars, Sailer[] sailer, List<Person> passengers) {
        this.name = name;
        this.boat = boat;
        this.pairOfOars = pairOfOars;
        this.sailer = sailer;
        this.passengers = passengers;
    }

    public BoatOnOars(BoatOnOars other) {
        this.name = other.name;
        this.boat = new Boat(other.boat);
        this.pairOfOars = other.pairOfOars.clone();
        this.sailer = other.sailer.clone();
        this.passengers = new ArrayList<>(other.passengers);
    }

    {
        this.name = "Невідомо";
        this.boat = new Boat();
        this.pairOfOars = new PairOfOars[2];
        this.sailer = new Sailer[2];
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Boat getBoat() {
        return boat;
    }

    public void setBoat(Boat boat) {
        this.boat = boat;
    }

    public PairOfOars[] getPairOfOars() {
        return pairOfOars;
    }

    public void setPairOfOars(PairOfOars[] pairOfOars) {
        this.pairOfOars = pairOfOars;
    }

    public Sailer[] getSailer() {
        return sailer;
    }

    public void setSailer(Sailer[] sailer) {
        this.sailer = sailer;
    }

    public List<Person> getPassengers() {
        return passengers;
    }

    public void setPassengers(List<Person> passengers) {
        this.passengers = passengers;
    }
	
	class Boat 
	{
		private Deck deck;
		private Body body;

	    public Boat() {
	    	System.out.print("\nПуста шлюпка була створенна");
	    }

	    public Boat(Deck deck, Body body) {
	        this.deck = deck;
	        this.body = body;
	    }

	    public Boat(Boat other) {
	        this.deck = new Deck(other.deck);
	        this.body = new Body(other.body);
	    }

	    {
	        this.deck = new Deck();
	        this.body = new Body();
	    }

	    public Deck getDeck() {
	        return deck;
	    }

	    public void setDeck(Deck deck) {
	        this.deck = deck;
	    }

	    public Body getBody() {
	        return body;
	    }

	    public void setBody(Body body) {
	        this.body = body;
	    }
		
	}
	
	class Deck
	{
		private Integer sailorsCapacity;
		private Integer passengerCapacity;
		
		 public Deck() {
			 System.out.print("\nПуста палуба була створенна");
	    }

	    public Deck(Integer sailorsCapacity, Integer passengerCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	        this.passengerCapacity = passengerCapacity;
	    }

	    public Deck(Deck other) {
	        this.sailorsCapacity = other.sailorsCapacity;
	        this.passengerCapacity = other.passengerCapacity;
	    }

	    {
	        this.sailorsCapacity = 0;
	        this.passengerCapacity = 0;
	    }

	    public Integer getSailorsCapacity() {
	        return sailorsCapacity;
	    }

	    public void setSailorsCapacity(Integer sailorsCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	    }

	    public Integer getPassengerCapacity() {
	        return passengerCapacity;
	    }

	    public void setPassengerCapacity(Integer passengerCapacity) {
	        this.passengerCapacity = passengerCapacity;
	    }
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "кількість of sailors='" + sailorsCapacity + '\'' +
	                ", кількість пасажирів='" + passengerCapacity + '\'' +
	                '}';
	    }
	}
	
	class Body
	{
		private String material;
		private Integer durability;
		
		public Body() {
			System.out.print("\nПустий корпус був створений");
	    }

	    public Body(String material, Integer durability) {
	        this.material = material;
	        this.durability = durability;
	    }

	    public Body(Body other) {
	        this.material = other.material;
	        this.durability = other.durability;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 0;
	    }

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }
	    @Override
	    public String toString() {
	        return "Корпус{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                '}';
	    }
	}
	
	class PairOfOars
	{
		private Oar rightOar;
		private Oar leftOar;
		
	    public PairOfOars() {
	    	System.out.print("\nПуста пара весел була створенна");
	    }

	    public PairOfOars(Oar rightOar, Oar leftOar) {
	        this.rightOar = rightOar;
	        this.leftOar = leftOar;
	    }

	    public PairOfOars(PairOfOars other) {
	        this.rightOar = new Oar(other.rightOar);
	        this.leftOar = new Oar(other.leftOar);
	    }

	    {
	        this.rightOar = new Oar();
	        this.leftOar = new Oar();
	    }
	    
	    public Boolean RowingToForwa
	    {
	    	return rightOar.Rowing();
	    }
	    
	    public Boolean RowingToLeft
	    {
	    	return rightOar.Rowing();
	    }
	    
	    public Boolean RowingToRight
	    {
	    	return leftOar.Rowing();
	    }

	    public Oar getRightOar() {
	        return rightOar;
	    }

	    public void setRightOar(Oar rightOar) {
	        this.rightOar = rightOar;
	    }

	    public Oar getLeftOar() {
	        return leftOar;
	    }

	    public void setLeftOar(Oar leftOar) {
	        this.leftOar = leftOar;
	    }
		
	}
	
	class Oar 
	{
		private String material;
		private Integer durability;
		private Integer maxDurability;
		private Integer quality;
		
		public Oar() {
			System.out.print("\nПусте весло було створене");
	    }

	    public Oar(String material, Integer durability, Integer quality) {
	        this.material = material;
	        this.durability = durability;
	        this.quality = quality;
	    }

	    public Oar(Oar other) {
	        this.material = other.material;
	        this.durability = other.durability;
	        this.quality = other.quality;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 1000;
	        this.quality = 30;
	    }
	    
	    public Boolean Rowing()
	    {
	    	if (durability > 0)
	    	{
	    		this.durability -= ((int)(Math.random() * 11)*100)/this.quality;
	    		return true;
	    	}
	    	return false;
	    }
	    
	    public Boolean Repair()
	    {
	    	if (this.maxDurability*this.quality)/100 > this.durability)
	    	{
	    		this.durability = ((this.maxDurability*100)/this.quality)(int)(Math.random() * 1.1);
	    		return true;
	    	}
	    	return false;
	    }
	    

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }

	    public Integer getQuality() {
	        return quality;
	    }

	    public void setQuality(Integer quality) {
	        this.quality = quality;
	    }
	    
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                ", якість=" + quality +
	                '}';
	    }
	}
	
	class Sailer extends Person
	{
		private Integer Stamina;
		private Integer Power;
		private Integer Experience;
		
	    public Sailer() {
	        super();
	        System.out.print("\nПустий, той хто працює веслом, був створений");
	    }

	    public Sailer(String firstname, String lastname, Integer years, Integer Stamina, Integer Power, Integer Experience) {
	        super(firstname, lastname, years);
	        this.Stamina = Stamina;
	        this.Power = Power;
	        this.Experience = Experience;
	    }

	    public Sailer(Sailer other) {
	        super(other);
	        this.Stamina = other.Stamina;
	        this.Power = other.Power;
	        this.Experience = other.Experience;
	    }

	    {
	        this.Stamina = 0;
	        this.Power = 0;
	        this.Experience = 0;
	    }

	    public Integer getStamina() {
	        return Stamina;
	    }

	    public void setStamina(Integer Stamina) {
	        this.Stamina = Stamina;
	    }

	    public Integer getPower() {
	        return Power;
	    }

	    public void setPower(Integer Power) {
	        this.Power = Power;
	    }

	    public Integer getExperience() {
	        return Experience;
	    }

	    public void setExperience(Integer Experience) {
	        this.Experience = Experience;
	    }

	    @Override
	    public String toString() {
	        return "Sailer{" +
	                "ім'я='" + getFirstname() + '\'' +
	                ", прізвище='" + getLastname() + '\'' +
	                ", вік=" + getYears() +
	                ", енергія=" + Stamina +
	                ", потужність=" + Power +
	                ", досвід=" + Experience +
	                '}';
	    }

	}
	
	class Person
	{
		private String firstname;
		private String lastname;
		private Integer years;
		
	    public Person() {
	    	System.out.print("\nПуста людина була створена");
	    }

	    public Person(String firstname, String lastname, Integer years) {
	        this.firstname = firstname;
	        this.lastname = lastname;
	        this.years = years;
	    }

	    public Person(Person other) {
	        this.firstname = other.firstname;
	        this.lastname = other.lastname;
	        this.years = other.years;
	    }

	    {
	        this.firstname = "Невідомо";
	        this.lastname = "Невідомо";
	        this.years = 0;
	    }

	    public String getFirstname() {
	        return firstname;
	    }

	    public void setFirstname(String firstname) {
	        this.firstname = firstname;
	    }

	    public String getLastname() {
	        return lastname;
	    }

	    public void setLastname(String lastname) {
	        this.lastname = lastname;
	    }

	    public Integer getYears() {
	        return years;
	    }

	    public void setYears(Integer years) {
	        this.years = years;
	    }

	    @Override
	    public String toString() {
	        return "Людина{" +
	                "ім'я='" + firstname + '\'' +
	                ", прізвище='" + lastname + '\'' +
	                ", вік=" + years +
	                '}';
	    }
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-09-08 11:56:54.971
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-09-08 11:56:54.971
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-09-08 11:56:56.505
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
/**
 * 
 */
package CI_306.Shyryi.Lab3;

import java.util.List;
import java.util.ArrayList;

/**
 * 
 */
public class BoatOnOars {
	
	private String name;
	private Boat boat;
	private PairOfOars[] pairOfOars;
	private Sailer[] sailer;
	private List<Person> passengers = new ArrayList<>();

    public BoatOnOars() {
    	System.out.print("\nПуста шлюпка на веслах була створенна");
    }

    public BoatOnOars(String name, Boat boat, PairOfOars[] pairOfOars, Sailer[] sailer, List<Person> passengers) {
        this.name = name;
        this.boat = boat;
        this.pairOfOars = pairOfOars;
        this.sailer = sailer;
        this.passengers = passengers;
    }

    public BoatOnOars(BoatOnOars other) {
        this.name = other.name;
        this.boat = new Boat(other.boat);
        this.pairOfOars = other.pairOfOars.clone();
        this.sailer = other.sailer.clone();
        this.passengers = new ArrayList<>(other.passengers);
    }

    {
        this.name = "Невідомо";
        this.boat = new Boat();
        this.pairOfOars = new PairOfOars[2];
        this.sailer = new Sailer[2];
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Boat getBoat() {
        return boat;
    }

    public void setBoat(Boat boat) {
        this.boat = boat;
    }

    public PairOfOars[] getPairOfOars() {
        return pairOfOars;
    }

    public void setPairOfOars(PairOfOars[] pairOfOars) {
        this.pairOfOars = pairOfOars;
    }

    public Sailer[] getSailer() {
        return sailer;
    }

    public void setSailer(Sailer[] sailer) {
        this.sailer = sailer;
    }

    public List<Person> getPassengers() {
        return passengers;
    }

    public void setPassengers(List<Person> passengers) {
        this.passengers = passengers;
    }
	
	class Boat 
	{
		private Deck deck;
		private Body body;

	    public Boat() {
	    	System.out.print("\nПуста шлюпка була створенна");
	    }

	    public Boat(Deck deck, Body body) {
	        this.deck = deck;
	        this.body = body;
	    }

	    public Boat(Boat other) {
	        this.deck = new Deck(other.deck);
	        this.body = new Body(other.body);
	    }

	    {
	        this.deck = new Deck();
	        this.body = new Body();
	    }

	    public Deck getDeck() {
	        return deck;
	    }

	    public void setDeck(Deck deck) {
	        this.deck = deck;
	    }

	    public Body getBody() {
	        return body;
	    }

	    public void setBody(Body body) {
	        this.body = body;
	    }
		
	}
	
	class Deck
	{
		private Integer sailorsCapacity;
		private Integer passengerCapacity;
		
		 public Deck() {
			 System.out.print("\nПуста палуба була створенна");
	    }

	    public Deck(Integer sailorsCapacity, Integer passengerCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	        this.passengerCapacity = passengerCapacity;
	    }

	    public Deck(Deck other) {
	        this.sailorsCapacity = other.sailorsCapacity;
	        this.passengerCapacity = other.passengerCapacity;
	    }

	    {
	        this.sailorsCapacity = 0;
	        this.passengerCapacity = 0;
	    }

	    public Integer getSailorsCapacity() {
	        return sailorsCapacity;
	    }

	    public void setSailorsCapacity(Integer sailorsCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	    }

	    public Integer getPassengerCapacity() {
	        return passengerCapacity;
	    }

	    public void setPassengerCapacity(Integer passengerCapacity) {
	        this.passengerCapacity = passengerCapacity;
	    }
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "кількість of sailors='" + sailorsCapacity + '\'' +
	                ", кількість пасажирів='" + passengerCapacity + '\'' +
	                '}';
	    }
	}
	
	class Body
	{
		private String material;
		private Integer durability;
		
		public Body() {
			System.out.print("\nПустий корпус був створений");
	    }

	    public Body(String material, Integer durability) {
	        this.material = material;
	        this.durability = durability;
	    }

	    public Body(Body other) {
	        this.material = other.material;
	        this.durability = other.durability;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 0;
	    }

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }
	    @Override
	    public String toString() {
	        return "Корпус{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                '}';
	    }
	}
	
	class PairOfOars
	{
		private Oar rightOar;
		private Oar leftOar;
		
	    public PairOfOars() {
	    	System.out.print("\nПуста пара весел була створенна");
	    }

	    public PairOfOars(Oar rightOar, Oar leftOar) {
	        this.rightOar = rightOar;
	        this.leftOar = leftOar;
	    }

	    public PairOfOars(PairOfOars other) {
	        this.rightOar = new Oar(other.rightOar);
	        this.leftOar = new Oar(other.leftOar);
	    }

	    {
	        this.rightOar = new Oar();
	        this.leftOar = new Oar();
	    }
	    
	    public Boolean RowingToForward
	    {
	    	return rightOar.Rowing();
	    }
	    
	    public Boolean RowingToLeft
	    {
	    	return rightOar.Rowing();
	    }
	    
	    public Boolean RowingToRight
	    {
	    	return leftOar.Rowing();
	    }

	    public Oar getRightOar() {
	        return rightOar;
	    }

	    public void setRightOar(Oar rightOar) {
	        this.rightOar = rightOar;
	    }

	    public Oar getLeftOar() {
	        return leftOar;
	    }

	    public void setLeftOar(Oar leftOar) {
	        this.leftOar = leftOar;
	    }
		
	}
	
	class Oar 
	{
		private String material;
		private Integer durability;
		private Integer maxDurability;
		private Integer quality;
		
		public Oar() {
			System.out.print("\nПусте весло було створене");
	    }

	    public Oar(String material, Integer durability, Integer quality) {
	        this.material = material;
	        this.durability = durability;
	        this.quality = quality;
	    }

	    public Oar(Oar other) {
	        this.material = other.material;
	        this.durability = other.durability;
	        this.quality = other.quality;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 1000;
	        this.quality = 30;
	    }
	    
	    public Boolean Rowing()
	    {
	    	if (durability > 0)
	    	{
	    		this.durability -= ((int)(Math.random() * 11)*100)/this.quality;
	    		return true;
	    	}
	    	return false;
	    }
	    
	    public Boolean Repair()
	    {
	    	if (this.maxDurability*this.quality)/100 > this.durability)
	    	{
	    		this.durability = ((this.maxDurability*100)/this.quality)(int)(Math.random() * 1.1);
	    		return true;
	    	}
	    	return false;
	    }
	    

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }

	    public Integer getQuality() {
	        return quality;
	    }

	    public void setQuality(Integer quality) {
	        this.quality = quality;
	    }
	    
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                ", якість=" + quality +
	                '}';
	    }
	}
	
	class Sailer extends Person
	{
		private Integer Stamina;
		private Integer Power;
		private Integer Experience;
		
	    public Sailer() {
	        super();
	        System.out.print("\nПустий, той хто працює веслом, був створений");
	    }

	    public Sailer(String firstname, String lastname, Integer years, Integer Stamina, Integer Power, Integer Experience) {
	        super(firstname, lastname, years);
	        this.Stamina = Stamina;
	        this.Power = Power;
	        this.Experience = Experience;
	    }

	    public Sailer(Sailer other) {
	        super(other);
	        this.Stamina = other.Stamina;
	        this.Power = other.Power;
	        this.Experience = other.Experience;
	    }

	    {
	        this.Stamina = 0;
	        this.Power = 0;
	        this.Experience = 0;
	    }

	    public Integer getStamina() {
	        return Stamina;
	    }

	    public void setStamina(Integer Stamina) {
	        this.Stamina = Stamina;
	    }

	    public Integer getPower() {
	        return Power;
	    }

	    public void setPower(Integer Power) {
	        this.Power = Power;
	    }

	    public Integer getExperience() {
	        return Experience;
	    }

	    public void setExperience(Integer Experience) {
	        this.Experience = Experience;
	    }

	    @Override
	    public String toString() {
	        return "Sailer{" +
	                "ім'я='" + getFirstname() + '\'' +
	                ", прізвище='" + getLastname() + '\'' +
	                ", вік=" + getYears() +
	                ", енергія=" + Stamina +
	                ", потужність=" + Power +
	                ", досвід=" + Experience +
	                '}';
	    }

	}
	
	class Person
	{
		private String firstname;
		private String lastname;
		private Integer years;
		
	    public Person() {
	    	System.out.print("\nПуста людина була створена");
	    }

	    public Person(String firstname, String lastname, Integer years) {
	        this.firstname = firstname;
	        this.lastname = lastname;
	        this.years = years;
	    }

	    public Person(Person other) {
	        this.firstname = other.firstname;
	        this.lastname = other.lastname;
	        this.years = other.years;
	    }

	    {
	        this.firstname = "Невідомо";
	        this.lastname = "Невідомо";
	        this.years = 0;
	    }

	    public String getFirstname() {
	        return firstname;
	    }

	    public void setFirstname(String firstname) {
	        this.firstname = firstname;
	    }

	    public String getLastname() {
	        return lastname;
	    }

	    public void setLastname(String lastname) {
	        this.lastname = lastname;
	    }

	    public Integer getYears() {
	        return years;
	    }

	    public void setYears(Integer years) {
	        this.years = years;
	    }

	    @Override
	    public String toString() {
	        return "Людина{" +
	                "ім'я='" + firstname + '\'' +
	                ", прізвище='" + lastname + '\'' +
	                ", вік=" + years +
	                '}';
	    }
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-09-08 11:56:56.506
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-09-08 11:56:56.506
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-09-08 11:56:56.585
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
/**
 * 
 */
package CI_306.Shyryi.Lab3;

import java.util.List;
import java.util.ArrayList;

/**
 * 
 */
public class BoatOnOars {
	
	private String name;
	private Boat boat;
	private PairOfOars[] pairOfOars;
	private Sailer[] sailer;
	private List<Person> passengers = new ArrayList<>();

    public BoatOnOars() {
    	System.out.print("\nПуста шлюпка на веслах була створенна");
    }

    public BoatOnOars(String name, Boat boat, PairOfOars[] pairOfOars, Sailer[] sailer, List<Person> passengers) {
        this.name = name;
        this.boat = boat;
        this.pairOfOars = pairOfOars;
        this.sailer = sailer;
        this.passengers = passengers;
    }

    public BoatOnOars(BoatOnOars other) {
        this.name = other.name;
        this.boat = new Boat(other.boat);
        this.pairOfOars = other.pairOfOars.clone();
        this.sailer = other.sailer.clone();
        this.passengers = new ArrayList<>(other.passengers);
    }

    {
        this.name = "Невідомо";
        this.boat = new Boat();
        this.pairOfOars = new PairOfOars[2];
        this.sailer = new Sailer[2];
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Boat getBoat() {
        return boat;
    }

    public void setBoat(Boat boat) {
        this.boat = boat;
    }

    public PairOfOars[] getPairOfOars() {
        return pairOfOars;
    }

    public void setPairOfOars(PairOfOars[] pairOfOars) {
        this.pairOfOars = pairOfOars;
    }

    public Sailer[] getSailer() {
        return sailer;
    }

    public void setSailer(Sailer[] sailer) {
        this.sailer = sailer;
    }

    public List<Person> getPassengers() {
        return passengers;
    }

    public void setPassengers(List<Person> passengers) {
        this.passengers = passengers;
    }
	
	class Boat 
	{
		private Deck deck;
		private Body body;

	    public Boat() {
	    	System.out.print("\nПуста шлюпка була створенна");
	    }

	    public Boat(Deck deck, Body body) {
	        this.deck = deck;
	        this.body = body;
	    }

	    public Boat(Boat other) {
	        this.deck = new Deck(other.deck);
	        this.body = new Body(other.body);
	    }

	    {
	        this.deck = new Deck();
	        this.body = new Body();
	    }

	    public Deck getDeck() {
	        return deck;
	    }

	    public void setDeck(Deck deck) {
	        this.deck = deck;
	    }

	    public Body getBody() {
	        return body;
	    }

	    public void setBody(Body body) {
	        this.body = body;
	    }
		
	}
	
	class Deck
	{
		private Integer sailorsCapacity;
		private Integer passengerCapacity;
		
		 public Deck() {
			 System.out.print("\nПуста палуба була створенна");
	    }

	    public Deck(Integer sailorsCapacity, Integer passengerCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	        this.passengerCapacity = passengerCapacity;
	    }

	    public Deck(Deck other) {
	        this.sailorsCapacity = other.sailorsCapacity;
	        this.passengerCapacity = other.passengerCapacity;
	    }

	    {
	        this.sailorsCapacity = 0;
	        this.passengerCapacity = 0;
	    }

	    public Integer getSailorsCapacity() {
	        return sailorsCapacity;
	    }

	    public void setSailorsCapacity(Integer sailorsCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	    }

	    public Integer getPassengerCapacity() {
	        return passengerCapacity;
	    }

	    public void setPassengerCapacity(Integer passengerCapacity) {
	        this.passengerCapacity = passengerCapacity;
	    }
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "кількість of sailors='" + sailorsCapacity + '\'' +
	                ", кількість пасажирів='" + passengerCapacity + '\'' +
	                '}';
	    }
	}
	
	class Body
	{
		private String material;
		private Integer durability;
		
		public Body() {
			System.out.print("\nПустий корпус був створений");
	    }

	    public Body(String material, Integer durability) {
	        this.material = material;
	        this.durability = durability;
	    }

	    public Body(Body other) {
	        this.material = other.material;
	        this.durability = other.durability;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 0;
	    }

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }
	    @Override
	    public String toString() {
	        return "Корпус{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                '}';
	    }
	}
	
	class PairOfOars
	{
		private Oar rightOar;
		private Oar leftOar;
		
	    public PairOfOars() {
	    	System.out.print("\nПуста пара весел була створенна");
	    }

	    public PairOfOars(Oar rightOar, Oar leftOar) {
	        this.rightOar = rightOar;
	        this.leftOar = leftOar;
	    }

	    public PairOfOars(PairOfOars other) {
	        this.rightOar = new Oar(other.rightOar);
	        this.leftOar = new Oar(other.leftOar);
	    }

	    {
	        this.rightOar = new Oar();
	        this.leftOar = new Oar();
	    }
	    
	    public Boolean RowingToForward
	    {
	    	return rightOar.Rowing();
	    }
	    
	    public Boolean RowingToLeft
	    {
	    	return rightOar.Rowing();
	    }
	    
	    public Boolean RowingToRight
	    {
	    	return leftOar.Rowing();
	    }

	    public Oar getRightOar() {
	        return rightOar;
	    }

	    public void setRightOar(Oar rightOar) {
	        this.rightOar = rightOar;
	    }

	    public Oar getLeftOar() {
	        return leftOar;
	    }

	    public void setLeftOar(Oar leftOar) {
	        this.leftOar = leftOar;
	    }
		
	}
	
	class Oar 
	{
		private String material;
		private Integer durability;
		private Integer maxDurability;
		private Integer quality;
		
		public Oar() {
			System.out.print("\nПусте весло було створене");
	    }

	    public Oar(String material, Integer durability, Integer quality) {
	        this.material = material;
	        this.durability = durability;
	        this.quality = quality;
	    }

	    public Oar(Oar other) {
	        this.material = other.material;
	        this.durability = other.durability;
	        this.quality = other.quality;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 1000;
	        this.quality = 30;
	    }
	    
	    public Boolean Rowing()
	    {
	    	if (durability > 0)
	    	{
	    		this.durability -= ((int)(Math.random() * 11)*100)/this.quality;
	    		return true;
	    	}
	    	return false;
	    }
	    
	    public Boolean Repair()
	    {
	    	if (this.maxDurability*this.quality)/100 > this.durability)
	    	{
	    		this.durability = ((this.maxDurability*100)/this.quality)(int)(Math.random() * 1.1);
	    		return true;
	    	}
	    	return false;
	    }
	    

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }

	    public Integer getQuality() {
	        return quality;
	    }

	    public void setQuality(Integer quality) {
	        this.quality = quality;
	    }
	    
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                ", якість=" + quality +
	                '}';
	    }
	}
	
	class Sailer extends Person
	{
		private Integer Stamina;
		private Integer Power;
		private Integer Experience;
		
	    public Sailer() {
	        super();
	        System.out.print("\nПустий, той хто працює веслом, був створений");
	    }

	    public Sailer(String firstname, String lastname, Integer years, Integer Stamina, Integer Power, Integer Experience) {
	        super(firstname, lastname, years);
	        this.Stamina = Stamina;
	        this.Power = Power;
	        this.Experience = Experience;
	    }

	    public Sailer(Sailer other) {
	        super(other);
	        this.Stamina = other.Stamina;
	        this.Power = other.Power;
	        this.Experience = other.Experience;
	    }

	    {
	        this.Stamina = 0;
	        this.Power = 0;
	        this.Experience = 0;
	    }

	    public Integer getStamina() {
	        return Stamina;
	    }

	    public void setStamina(Integer Stamina) {
	        this.Stamina = Stamina;
	    }

	    public Integer getPower() {
	        return Power;
	    }

	    public void setPower(Integer Power) {
	        this.Power = Power;
	    }

	    public Integer getExperience() {
	        return Experience;
	    }

	    public void setExperience(Integer Experience) {
	        this.Experience = Experience;
	    }

	    @Override
	    public String toString() {
	        return "Sailer{" +
	                "ім'я='" + getFirstname() + '\'' +
	                ", прізвище='" + getLastname() + '\'' +
	                ", вік=" + getYears() +
	                ", енергія=" + Stamina +
	                ", потужність=" + Power +
	                ", досвід=" + Experience +
	                '}';
	    }

	}
	
	class Person
	{
		private String firstname;
		private String lastname;
		private Integer years;
		
	    public Person() {
	    	System.out.print("\nПуста людина була створена");
	    }

	    public Person(String firstname, String lastname, Integer years) {
	        this.firstname = firstname;
	        this.lastname = lastname;
	        this.years = years;
	    }

	    public Person(Person other) {
	        this.firstname = other.firstname;
	        this.lastname = other.lastname;
	        this.years = other.years;
	    }

	    {
	        this.firstname = "Невідомо";
	        this.lastname = "Невідомо";
	        this.years = 0;
	    }

	    public String getFirstname() {
	        return firstname;
	    }

	    public void setFirstname(String firstname) {
	        this.firstname = firstname;
	    }

	    public String getLastname() {
	        return lastname;
	    }

	    public void setLastname(String lastname) {
	        this.lastname = lastname;
	    }

	    public Integer getYears() {
	        return years;
	    }

	    public void setYears(Integer years) {
	        this.years = years;
	    }

	    @Override
	    public String toString() {
	        return "Людина{" +
	                "ім'я='" + firstname + '\'' +
	                ", прізвище='" + lastname + '\'' +
	                ", вік=" + years +
	                '}';
	    }
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-09-08 11:56:56.586
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-09-08 11:56:56.586
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-09-08 11:56:57.906
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
/**
 * 
 */
package CI_306.Shyryi.Lab3;

import java.util.List;
import java.util.ArrayList;

/**
 * 
 */
public class BoatOnOars {
	
	private String name;
	private Boat boat;
	private PairOfOars[] pairOfOars;
	private Sailer[] sailer;
	private List<Person> passengers = new ArrayList<>();

    public BoatOnOars() {
    	System.out.print("\nПуста шлюпка на веслах була створенна");
    }

    public BoatOnOars(String name, Boat boat, PairOfOars[] pairOfOars, Sailer[] sailer, List<Person> passengers) {
        this.name = name;
        this.boat = boat;
        this.pairOfOars = pairOfOars;
        this.sailer = sailer;
        this.passengers = passengers;
    }

    public BoatOnOars(BoatOnOars other) {
        this.name = other.name;
        this.boat = new Boat(other.boat);
        this.pairOfOars = other.pairOfOars.clone();
        this.sailer = other.sailer.clone();
        this.passengers = new ArrayList<>(other.passengers);
    }

    {
        this.name = "Невідомо";
        this.boat = new Boat();
        this.pairOfOars = new PairOfOars[2];
        this.sailer = new Sailer[2];
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Boat getBoat() {
        return boat;
    }

    public void setBoat(Boat boat) {
        this.boat = boat;
    }

    public PairOfOars[] getPairOfOars() {
        return pairOfOars;
    }

    public void setPairOfOars(PairOfOars[] pairOfOars) {
        this.pairOfOars = pairOfOars;
    }

    public Sailer[] getSailer() {
        return sailer;
    }

    public void setSailer(Sailer[] sailer) {
        this.sailer = sailer;
    }

    public List<Person> getPassengers() {
        return passengers;
    }

    public void setPassengers(List<Person> passengers) {
        this.passengers = passengers;
    }
	
	class Boat 
	{
		private Deck deck;
		private Body body;

	    public Boat() {
	    	System.out.print("\nПуста шлюпка була створенна");
	    }

	    public Boat(Deck deck, Body body) {
	        this.deck = deck;
	        this.body = body;
	    }

	    public Boat(Boat other) {
	        this.deck = new Deck(other.deck);
	        this.body = new Body(other.body);
	    }

	    {
	        this.deck = new Deck();
	        this.body = new Body();
	    }

	    public Deck getDeck() {
	        return deck;
	    }

	    public void setDeck(Deck deck) {
	        this.deck = deck;
	    }

	    public Body getBody() {
	        return body;
	    }

	    public void setBody(Body body) {
	        this.body = body;
	    }
		
	}
	
	class Deck
	{
		private Integer sailorsCapacity;
		private Integer passengerCapacity;
		
		 public Deck() {
			 System.out.print("\nПуста палуба була створенна");
	    }

	    public Deck(Integer sailorsCapacity, Integer passengerCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	        this.passengerCapacity = passengerCapacity;
	    }

	    public Deck(Deck other) {
	        this.sailorsCapacity = other.sailorsCapacity;
	        this.passengerCapacity = other.passengerCapacity;
	    }

	    {
	        this.sailorsCapacity = 0;
	        this.passengerCapacity = 0;
	    }

	    public Integer getSailorsCapacity() {
	        return sailorsCapacity;
	    }

	    public void setSailorsCapacity(Integer sailorsCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	    }

	    public Integer getPassengerCapacity() {
	        return passengerCapacity;
	    }

	    public void setPassengerCapacity(Integer passengerCapacity) {
	        this.passengerCapacity = passengerCapacity;
	    }
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "кількість of sailors='" + sailorsCapacity + '\'' +
	                ", кількість пасажирів='" + passengerCapacity + '\'' +
	                '}';
	    }
	}
	
	class Body
	{
		private String material;
		private Integer durability;
		
		public Body() {
			System.out.print("\nПустий корпус був створений");
	    }

	    public Body(String material, Integer durability) {
	        this.material = material;
	        this.durability = durability;
	    }

	    public Body(Body other) {
	        this.material = other.material;
	        this.durability = other.durability;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 0;
	    }

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }
	    @Override
	    public String toString() {
	        return "Корпус{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                '}';
	    }
	}
	
	class PairOfOars
	{
		private Oar rightOar;
		private Oar leftOar;
		
	    public PairOfOars() {
	    	System.out.print("\nПуста пара весел була створенна");
	    }

	    public PairOfOars(Oar rightOar, Oar leftOar) {
	        this.rightOar = rightOar;
	        this.leftOar = leftOar;
	    }

	    public PairOfOars(PairOfOars other) {
	        this.rightOar = new Oar(other.rightOar);
	        this.leftOar = new Oar(other.leftOar);
	    }

	    {
	        this.rightOar = new Oar();
	        this.leftOar = new Oar();
	    }
	    
	    public Boolean RowingToForward
	    {
	    	return rightOar.Rowing();
	    }
	    
	    public Boolean RowingToLeft
	    {
	    	return rightOar.Rowing();
	    }
	    
	    public Boolean RowingToRight
	    {
	    	return leftOar.Rowing();
	    }

	    public Oar getRightOar() {
	        return rightOar;
	    }

	    public void setRightOar(Oar rightOar) {
	        this.rightOar = rightOar;
	    }

	    public Oar getLeftOar() {
	        return leftOar;
	    }

	    public void setLeftOar(Oar leftOar) {
	        this.leftOar = leftOar;
	    }
		
	}
	
	class Oar 
	{
		private String material;
		private Integer durability;
		private Integer maxDurability;
		private Integer quality;
		
		public Oar() {
			System.out.print("\nПусте весло було створене");
	    }

	    public Oar(String material, Integer durability, Integer quality) {
	        this.material = material;
	        this.durability = durability;
	        this.quality = quality;
	    }

	    public Oar(Oar other) {
	        this.material = other.material;
	        this.durability = other.durability;
	        this.quality = other.quality;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 1000;
	        this.quality = 30;
	    }
	    
	    public Boolean Rowing()
	    {
	    	if (durability > 0)
	    	{
	    		this.durability -= ((int)(Math.random() * 11)*100)/this.quality;
	    		return true;
	    	}
	    	return false;
	    }
	    
	    public Boolean Repair()
	    {
	    	if (this.maxDurability*this.quality)/100 > this.durability)
	    	{
	    		this.durability = ((this.maxDurability*100)/this.quality)(int)(Math.random() * 1.1);
	    		return true;
	    	}
	    	return false;
	    }
	    

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }

	    public Integer getQuality() {
	        return quality;
	    }

	    public void setQuality(Integer quality) {
	        this.quality = quality;
	    }
	    
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                ", якість=" + quality +
	                '}';
	    }
	}
	
	class Sailer extends Person
	{
		private Integer Stamina;
		private Integer Power;
		private Integer Experience;
		
	    public Sailer() {
	        super();
	        System.out.print("\nПустий, той хто працює веслом, був створений");
	    }

	    public Sailer(String firstname, String lastname, Integer years, Integer Stamina, Integer Power, Integer Experience) {
	        super(firstname, lastname, years);
	        this.Stamina = Stamina;
	        this.Power = Power;
	        this.Experience = Experience;
	    }

	    public Sailer(Sailer other) {
	        super(other);
	        this.Stamina = other.Stamina;
	        this.Power = other.Power;
	        this.Experience = other.Experience;
	    }

	    {
	        this.Stamina = 0;
	        this.Power = 0;
	        this.Experience = 0;
	    }

	    public Integer getStamina() {
	        return Stamina;
	    }

	    public void setStamina(Integer Stamina) {
	        this.Stamina = Stamina;
	    }

	    public Integer getPower() {
	        return Power;
	    }

	    public void setPower(Integer Power) {
	        this.Power = Power;
	    }

	    public Integer getExperience() {
	        return Experience;
	    }

	    public void setExperience(Integer Experience) {
	        this.Experience = Experience;
	    }

	    @Override
	    public String toString() {
	        return "Sailer{" +
	                "ім'я='" + getFirstname() + '\'' +
	                ", прізвище='" + getLastname() + '\'' +
	                ", вік=" + getYears() +
	                ", енергія=" + Stamina +
	                ", потужність=" + Power +
	                ", досвід=" + Experience +
	                '}';
	    }

	}
	
	class Person
	{
		private String firstname;
		private String lastname;
		private Integer years;
		
	    public Person() {
	    	System.out.print("\nПуста людина була створена");
	    }

	    public Person(String firstname, String lastname, Integer years) {
	        this.firstname = firstname;
	        this.lastname = lastname;
	        this.years = years;
	    }

	    public Person(Person other) {
	        this.firstname = other.firstname;
	        this.lastname = other.lastname;
	        this.years = other.years;
	    }

	    {
	        this.firstname = "Невідомо";
	        this.lastname = "Невідомо";
	        this.years = 0;
	    }

	    public String getFirstname() {
	        return firstname;
	    }

	    public void setFirstname(String firstname) {
	        this.firstname = firstname;
	    }

	    public String getLastname() {
	        return lastname;
	    }

	    public void setLastname(String lastname) {
	        this.lastname = lastname;
	    }

	    public Integer getYears() {
	        return years;
	    }

	    public void setYears(Integer years) {
	        this.years = years;
	    }

	    @Override
	    public String toString() {
	        return "Людина{" +
	                "ім'я='" + firstname + '\'' +
	                ", прізвище='" + lastname + '\'' +
	                ", вік=" + years +
	                '}';
	    }
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-09-08 11:56:57.906
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-09-08 11:56:57.906
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-09-08 11:56:58.980
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
/**
 * 
 */
package CI_306.Shyryi.Lab3;

import java.util.List;
import java.util.ArrayList;

/**
 * 
 */
public class BoatOnOars {
	
	private String name;
	private Boat boat;
	private PairOfOars[] pairOfOars;
	private Sailer[] sailer;
	private List<Person> passengers = new ArrayList<>();

    public BoatOnOars() {
    	System.out.print("\nПуста шлюпка на веслах була створенна");
    }

    public BoatOnOars(String name, Boat boat, PairOfOars[] pairOfOars, Sailer[] sailer, List<Person> passengers) {
        this.name = name;
        this.boat = boat;
        this.pairOfOars = pairOfOars;
        this.sailer = sailer;
        this.passengers = passengers;
    }

    public BoatOnOars(BoatOnOars other) {
        this.name = other.name;
        this.boat = new Boat(other.boat);
        this.pairOfOars = other.pairOfOars.clone();
        this.sailer = other.sailer.clone();
        this.passengers = new ArrayList<>(other.passengers);
    }

    {
        this.name = "Невідомо";
        this.boat = new Boat();
        this.pairOfOars = new PairOfOars[2];
        this.sailer = new Sailer[2];
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Boat getBoat() {
        return boat;
    }

    public void setBoat(Boat boat) {
        this.boat = boat;
    }

    public PairOfOars[] getPairOfOars() {
        return pairOfOars;
    }

    public void setPairOfOars(PairOfOars[] pairOfOars) {
        this.pairOfOars = pairOfOars;
    }

    public Sailer[] getSailer() {
        return sailer;
    }

    public void setSailer(Sailer[] sailer) {
        this.sailer = sailer;
    }

    public List<Person> getPassengers() {
        return passengers;
    }

    public void setPassengers(List<Person> passengers) {
        this.passengers = passengers;
    }
	
	class Boat 
	{
		private Deck deck;
		private Body body;

	    public Boat() {
	    	System.out.print("\nПуста шлюпка була створенна");
	    }

	    public Boat(Deck deck, Body body) {
	        this.deck = deck;
	        this.body = body;
	    }

	    public Boat(Boat other) {
	        this.deck = new Deck(other.deck);
	        this.body = new Body(other.body);
	    }

	    {
	        this.deck = new Deck();
	        this.body = new Body();
	    }

	    public Deck getDeck() {
	        return deck;
	    }

	    public void setDeck(Deck deck) {
	        this.deck = deck;
	    }

	    public Body getBody() {
	        return body;
	    }

	    public void setBody(Body body) {
	        this.body = body;
	    }
		
	}
	
	class Deck
	{
		private Integer sailorsCapacity;
		private Integer passengerCapacity;
		
		 public Deck() {
			 System.out.print("\nПуста палуба була створенна");
	    }

	    public Deck(Integer sailorsCapacity, Integer passengerCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	        this.passengerCapacity = passengerCapacity;
	    }

	    public Deck(Deck other) {
	        this.sailorsCapacity = other.sailorsCapacity;
	        this.passengerCapacity = other.passengerCapacity;
	    }

	    {
	        this.sailorsCapacity = 0;
	        this.passengerCapacity = 0;
	    }

	    public Integer getSailorsCapacity() {
	        return sailorsCapacity;
	    }

	    public void setSailorsCapacity(Integer sailorsCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	    }

	    public Integer getPassengerCapacity() {
	        return passengerCapacity;
	    }

	    public void setPassengerCapacity(Integer passengerCapacity) {
	        this.passengerCapacity = passengerCapacity;
	    }
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "кількість of sailors='" + sailorsCapacity + '\'' +
	                ", кількість пасажирів='" + passengerCapacity + '\'' +
	                '}';
	    }
	}
	
	class Body
	{
		private String material;
		private Integer durability;
		
		public Body() {
			System.out.print("\nПустий корпус був створений");
	    }

	    public Body(String material, Integer durability) {
	        this.material = material;
	        this.durability = durability;
	    }

	    public Body(Body other) {
	        this.material = other.material;
	        this.durability = other.durability;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 0;
	    }

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }
	    @Override
	    public String toString() {
	        return "Корпус{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                '}';
	    }
	}
	
	class PairOfOars
	{
		private Oar rightOar;
		private Oar leftOar;
		
	    public PairOfOars() {
	    	System.out.print("\nПуста пара весел була створенна");
	    }

	    public PairOfOars(Oar rightOar, Oar leftOar) {
	        this.rightOar = rightOar;
	        this.leftOar = leftOar;
	    }

	    public PairOfOars(PairOfOars other) {
	        this.rightOar = new Oar(other.rightOar);
	        this.leftOar = new Oar(other.leftOar);
	    }

	    {
	        this.rightOar = new Oar();
	        this.leftOar = new Oar();
	    }
	    
	    public Boolean RowingToForward
	    {
	    	return rightOar.Rowing();
	    }
	    
	    public Boolean RowingToLeft
	    {
	    	return rightOar.Rowing();
	    }
	    
	    public Boolean RowingToRight
	    {
	    	return leftOar.Rowing();
	    }

	    public Oar getRightOar() {
	        return rightOar;
	    }

	    public void setRightOar(Oar rightOar) {
	        this.rightOar = rightOar;
	    }

	    public Oar getLeftOar() {
	        return leftOar;
	    }

	    public void setLeftOar(Oar leftOar) {
	        this.leftOar = leftOar;
	    }
		
	}
	
	class Oar 
	{
		private String material;
		private Integer durability;
		private Integer maxDurability;
		private Integer quality;
		
		public Oar() {
			System.out.print("\nПусте весло було створене");
	    }

	    public Oar(String material, Integer durability, Integer quality) {
	        this.material = material;
	        this.durability = durability;
	        this.quality = quality;
	    }

	    public Oar(Oar other) {
	        this.material = other.material;
	        this.durability = other.durability;
	        this.quality = other.quality;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 1000;
	        this.quality = 30;
	    }
	    
	    public Boolean Rowing()
	    {
	    	if (durability > 0)
	    	{
	    		this.durability -= ((int)(Math.random() * 11)*100)/this.quality;
	    		return true;
	    	}
	    	return false;
	    }
	    
	    public Boolean Repair()
	    {
	    	if (this.maxDurability*this.quality)/100 > this.durability)
	    	{
	    		this.durability = ((this.maxDurability*100)/this.quality)(int)(Math.random() * 1.1);
	    		return true;
	    	}
	    	return false;
	    }
	    

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }

	    public Integer getQuality() {
	        return quality;
	    }

	    public void setQuality(Integer quality) {
	        this.quality = quality;
	    }
	    
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                ", якість=" + quality +
	                '}';
	    }
	}
	
	class Sailer extends Person
	{
		private Integer Stamina;
		private Integer Power;
		private Integer Experience;
		
	    public Sailer() {
	        super();
	        System.out.print("\nПустий, той хто працює веслом, був створений");
	    }

	    public Sailer(String firstname, String lastname, Integer years, Integer Stamina, Integer Power, Integer Experience) {
	        super(firstname, lastname, years);
	        this.Stamina = Stamina;
	        this.Power = Power;
	        this.Experience = Experience;
	    }

	    public Sailer(Sailer other) {
	        super(other);
	        this.Stamina = other.Stamina;
	        this.Power = other.Power;
	        this.Experience = other.Experience;
	    }

	    {
	        this.Stamina = 0;
	        this.Power = 0;
	        this.Experience = 0;
	    }

	    public Integer getStamina() {
	        return Stamina;
	    }

	    public void setStamina(Integer Stamina) {
	        this.Stamina = Stamina;
	    }

	    public Integer getPower() {
	        return Power;
	    }

	    public void setPower(Integer Power) {
	        this.Power = Power;
	    }

	    public Integer getExperience() {
	        return Experience;
	    }

	    public void setExperience(Integer Experience) {
	        this.Experience = Experience;
	    }

	    @Override
	    public String toString() {
	        return "Sailer{" +
	                "ім'я='" + getFirstname() + '\'' +
	                ", прізвище='" + getLastname() + '\'' +
	                ", вік=" + getYears() +
	                ", енергія=" + Stamina +
	                ", потужність=" + Power +
	                ", досвід=" + Experience +
	                '}';
	    }

	}
	
	class Person
	{
		private String firstname;
		private String lastname;
		private Integer years;
		
	    public Person() {
	    	System.out.print("\nПуста людина була створена");
	    }

	    public Person(String firstname, String lastname, Integer years) {
	        this.firstname = firstname;
	        this.lastname = lastname;
	        this.years = years;
	    }

	    public Person(Person other) {
	        this.firstname = other.firstname;
	        this.lastname = other.lastname;
	        this.years = other.years;
	    }

	    {
	        this.firstname = "Невідомо";
	        this.lastname = "Невідомо";
	        this.years = 0;
	    }

	    public String getFirstname() {
	        return firstname;
	    }

	    public void setFirstname(String firstname) {
	        this.firstname = firstname;
	    }

	    public String getLastname() {
	        return lastname;
	    }

	    public void setLastname(String lastname) {
	        this.lastname = lastname;
	    }

	    public Integer getYears() {
	        return years;
	    }

	    public void setYears(Integer years) {
	        this.years = years;
	    }

	    @Override
	    public String toString() {
	        return "Людина{" +
	                "ім'я='" + firstname + '\'' +
	                ", прізвище='" + lastname + '\'' +
	                ", вік=" + years +
	                '}';
	    }
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-09-08 11:56:58.980
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-09-08 11:56:58.980
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-09-08 11:57:01.283
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
/**
 * 
 */
package CI_306.Shyryi.Lab3;

import java.util.List;
import java.util.ArrayList;

/**
 * 
 */
public class BoatOnOars {
	
	private String name;
	private Boat boat;
	private PairOfOars[] pairOfOars;
	private Sailer[] sailer;
	private List<Person> passengers = new ArrayList<>();

    public BoatOnOars() {
    	System.out.print("\nПуста шлюпка на веслах була створенна");
    }

    public BoatOnOars(String name, Boat boat, PairOfOars[] pairOfOars, Sailer[] sailer, List<Person> passengers) {
        this.name = name;
        this.boat = boat;
        this.pairOfOars = pairOfOars;
        this.sailer = sailer;
        this.passengers = passengers;
    }

    public BoatOnOars(BoatOnOars other) {
        this.name = other.name;
        this.boat = new Boat(other.boat);
        this.pairOfOars = other.pairOfOars.clone();
        this.sailer = other.sailer.clone();
        this.passengers = new ArrayList<>(other.passengers);
    }

    {
        this.name = "Невідомо";
        this.boat = new Boat();
        this.pairOfOars = new PairOfOars[2];
        this.sailer = new Sailer[2];
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Boat getBoat() {
        return boat;
    }

    public void setBoat(Boat boat) {
        this.boat = boat;
    }

    public PairOfOars[] getPairOfOars() {
        return pairOfOars;
    }

    public void setPairOfOars(PairOfOars[] pairOfOars) {
        this.pairOfOars = pairOfOars;
    }

    public Sailer[] getSailer() {
        return sailer;
    }

    public void setSailer(Sailer[] sailer) {
        this.sailer = sailer;
    }

    public List<Person> getPassengers() {
        return passengers;
    }

    public void setPassengers(List<Person> passengers) {
        this.passengers = passengers;
    }
	
	class Boat 
	{
		private Deck deck;
		private Body body;

	    public Boat() {
	    	System.out.print("\nПуста шлюпка була створенна");
	    }

	    public Boat(Deck deck, Body body) {
	        this.deck = deck;
	        this.body = body;
	    }

	    public Boat(Boat other) {
	        this.deck = new Deck(other.deck);
	        this.body = new Body(other.body);
	    }

	    {
	        this.deck = new Deck();
	        this.body = new Body();
	    }

	    public Deck getDeck() {
	        return deck;
	    }

	    public void setDeck(Deck deck) {
	        this.deck = deck;
	    }

	    public Body getBody() {
	        return body;
	    }

	    public void setBody(Body body) {
	        this.body = body;
	    }
		
	}
	
	class Deck
	{
		private Integer sailorsCapacity;
		private Integer passengerCapacity;
		
		 public Deck() {
			 System.out.print("\nПуста палуба була створенна");
	    }

	    public Deck(Integer sailorsCapacity, Integer passengerCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	        this.passengerCapacity = passengerCapacity;
	    }

	    public Deck(Deck other) {
	        this.sailorsCapacity = other.sailorsCapacity;
	        this.passengerCapacity = other.passengerCapacity;
	    }

	    {
	        this.sailorsCapacity = 0;
	        this.passengerCapacity = 0;
	    }

	    public Integer getSailorsCapacity() {
	        return sailorsCapacity;
	    }

	    public void setSailorsCapacity(Integer sailorsCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	    }

	    public Integer getPassengerCapacity() {
	        return passengerCapacity;
	    }

	    public void setPassengerCapacity(Integer passengerCapacity) {
	        this.passengerCapacity = passengerCapacity;
	    }
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "кількість of sailors='" + sailorsCapacity + '\'' +
	                ", кількість пасажирів='" + passengerCapacity + '\'' +
	                '}';
	    }
	}
	
	class Body
	{
		private String material;
		private Integer durability;
		
		public Body() {
			System.out.print("\nПустий корпус був створений");
	    }

	    public Body(String material, Integer durability) {
	        this.material = material;
	        this.durability = durability;
	    }

	    public Body(Body other) {
	        this.material = other.material;
	        this.durability = other.durability;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 0;
	    }

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }
	    @Override
	    public String toString() {
	        return "Корпус{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                '}';
	    }
	}
	
	class PairOfOars
	{
		private Oar rightOar;
		private Oar leftOar;
		
	    public PairOfOars() {
	    	System.out.print("\nПуста пара весел була створенна");
	    }

	    public PairOfOars(Oar rightOar, Oar leftOar) {
	        this.rightOar = rightOar;
	        this.leftOar = leftOar;
	    }

	    public PairOfOars(PairOfOars other) {
	        this.rightOar = new Oar(other.rightOar);
	        this.leftOar = new Oar(other.leftOar);
	    }

	    {
	        this.rightOar = new Oar();
	        this.leftOar = new Oar();
	    }
	    
	    public Boolean RowingToForward
	    {
	    	return rightOar.Rowing();
	    }
	    
	    public Boolean RowingToLeft
	    {
	    	return rightOar.Rowing();
	    }
	    
	    public Boolean RowingToRight
	    {
	    	return leftOar.Rowing();
	    }

	    public Oar getRightOar() {
	        return rightOar;
	    }

	    public void setRightOar(Oar rightOar) {
	        this.rightOar = rightOar;
	    }

	    public Oar getLeftOar() {
	        return leftOar;
	    }

	    public void setLeftOar(Oar leftOar) {
	        this.leftOar = leftOar;
	    }
		
	}
	
	class Oar 
	{
		private String material;
		private Integer durability;
		private Integer maxDurability;
		private Integer quality;
		
		public Oar() {
			System.out.print("\nПусте весло було створене");
	    }

	    public Oar(String material, Integer durability, Integer quality) {
	        this.material = material;
	        this.durability = durability;
	        this.quality = quality;
	    }

	    public Oar(Oar other) {
	        this.material = other.material;
	        this.durability = other.durability;
	        this.quality = other.quality;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 1000;
	        this.quality = 30;
	    }
	    
	    public Boolean Rowing()
	    {
	    	if (durability > 0)
	    	{
	    		this.durability -= ((int)(Math.random() * 11)*100)/this.quality;
	    		return true;
	    	}
	    	return false;
	    }
	    
	    public Boolean Repair()
	    {
	    	if (this.maxDurability*this.quality)/100 > this.durability)
	    	{
	    		this.durability = ((this.maxDurability*100)/this.quality)(int)(Math.random() * 1.1);
	    		return true;
	    	}
	    	return false;
	    }
	    

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }

	    public Integer getQuality() {
	        return quality;
	    }

	    public void setQuality(Integer quality) {
	        this.quality = quality;
	    }
	    
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                ", якість=" + quality +
	                '}';
	    }
	}
	
	class Sailer extends Person
	{
		private Integer Stamina;
		private Integer Power;
		private Integer Experience;
		
	    public Sailer() {
	        super();
	        System.out.print("\nПустий, той хто працює веслом, був створений");
	    }

	    public Sailer(String firstname, String lastname, Integer years, Integer Stamina, Integer Power, Integer Experience) {
	        super(firstname, lastname, years);
	        this.Stamina = Stamina;
	        this.Power = Power;
	        this.Experience = Experience;
	    }

	    public Sailer(Sailer other) {
	        super(other);
	        this.Stamina = other.Stamina;
	        this.Power = other.Power;
	        this.Experience = other.Experience;
	    }

	    {
	        this.Stamina = 0;
	        this.Power = 0;
	        this.Experience = 0;
	    }

	    public Integer getStamina() {
	        return Stamina;
	    }

	    public void setStamina(Integer Stamina) {
	        this.Stamina = Stamina;
	    }

	    public Integer getPower() {
	        return Power;
	    }

	    public void setPower(Integer Power) {
	        this.Power = Power;
	    }

	    public Integer getExperience() {
	        return Experience;
	    }

	    public void setExperience(Integer Experience) {
	        this.Experience = Experience;
	    }

	    @Override
	    public String toString() {
	        return "Sailer{" +
	                "ім'я='" + getFirstname() + '\'' +
	                ", прізвище='" + getLastname() + '\'' +
	                ", вік=" + getYears() +
	                ", енергія=" + Stamina +
	                ", потужність=" + Power +
	                ", досвід=" + Experience +
	                '}';
	    }

	}
	
	class Person
	{
		private String firstname;
		private String lastname;
		private Integer years;
		
	    public Person() {
	    	System.out.print("\nПуста людина була створена");
	    }

	    public Person(String firstname, String lastname, Integer years) {
	        this.firstname = firstname;
	        this.lastname = lastname;
	        this.years = years;
	    }

	    public Person(Person other) {
	        this.firstname = other.firstname;
	        this.lastname = other.lastname;
	        this.years = other.years;
	    }

	    {
	        this.firstname = "Невідомо";
	        this.lastname = "Невідомо";
	        this.years = 0;
	    }

	    public String getFirstname() {
	        return firstname;
	    }

	    public void setFirstname(String firstname) {
	        this.firstname = firstname;
	    }

	    public String getLastname() {
	        return lastname;
	    }

	    public void setLastname(String lastname) {
	        this.lastname = lastname;
	    }

	    public Integer getYears() {
	        return years;
	    }

	    public void setYears(Integer years) {
	        this.years = years;
	    }

	    @Override
	    public String toString() {
	        return "Людина{" +
	                "ім'я='" + firstname + '\'' +
	                ", прізвище='" + lastname + '\'' +
	                ", вік=" + years +
	                '}';
	    }
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-09-08 11:57:01.284
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-09-08 11:57:01.284
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-09-08 11:57:01.559
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
/**
 * 
 */
package CI_306.Shyryi.Lab3;

import java.util.List;
import java.util.ArrayList;

/**
 * 
 */
public class BoatOnOars {
	
	private String name;
	private Boat boat;
	private PairOfOars[] pairOfOars;
	private Sailer[] sailer;
	private List<Person> passengers = new ArrayList<>();

    public BoatOnOars() {
    	System.out.print("\nПуста шлюпка на веслах була створенна");
    }

    public BoatOnOars(String name, Boat boat, PairOfOars[] pairOfOars, Sailer[] sailer, List<Person> passengers) {
        this.name = name;
        this.boat = boat;
        this.pairOfOars = pairOfOars;
        this.sailer = sailer;
        this.passengers = passengers;
    }

    public BoatOnOars(BoatOnOars other) {
        this.name = other.name;
        this.boat = new Boat(other.boat);
        this.pairOfOars = other.pairOfOars.clone();
        this.sailer = other.sailer.clone();
        this.passengers = new ArrayList<>(other.passengers);
    }

    {
        this.name = "Невідомо";
        this.boat = new Boat();
        this.pairOfOars = new PairOfOars[2];
        this.sailer = new Sailer[2];
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Boat getBoat() {
        return boat;
    }

    public void setBoat(Boat boat) {
        this.boat = boat;
    }

    public PairOfOars[] getPairOfOars() {
        return pairOfOars;
    }

    public void setPairOfOars(PairOfOars[] pairOfOars) {
        this.pairOfOars = pairOfOars;
    }

    public Sailer[] getSailer() {
        return sailer;
    }

    public void setSailer(Sailer[] sailer) {
        this.sailer = sailer;
    }

    public List<Person> getPassengers() {
        return passengers;
    }

    public void setPassengers(List<Person> passengers) {
        this.passengers = passengers;
    }
	
	class Boat 
	{
		private Deck deck;
		private Body body;

	    public Boat() {
	    	System.out.print("\nПуста шлюпка була створенна");
	    }

	    public Boat(Deck deck, Body body) {
	        this.deck = deck;
	        this.body = body;
	    }

	    public Boat(Boat other) {
	        this.deck = new Deck(other.deck);
	        this.body = new Body(other.body);
	    }

	    {
	        this.deck = new Deck();
	        this.body = new Body();
	    }

	    public Deck getDeck() {
	        return deck;
	    }

	    public void setDeck(Deck deck) {
	        this.deck = deck;
	    }

	    public Body getBody() {
	        return body;
	    }

	    public void setBody(Body body) {
	        this.body = body;
	    }
		
	}
	
	class Deck
	{
		private Integer sailorsCapacity;
		private Integer passengerCapacity;
		
		 public Deck() {
			 System.out.print("\nПуста палуба була створенна");
	    }

	    public Deck(Integer sailorsCapacity, Integer passengerCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	        this.passengerCapacity = passengerCapacity;
	    }

	    public Deck(Deck other) {
	        this.sailorsCapacity = other.sailorsCapacity;
	        this.passengerCapacity = other.passengerCapacity;
	    }

	    {
	        this.sailorsCapacity = 0;
	        this.passengerCapacity = 0;
	    }

	    public Integer getSailorsCapacity() {
	        return sailorsCapacity;
	    }

	    public void setSailorsCapacity(Integer sailorsCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	    }

	    public Integer getPassengerCapacity() {
	        return passengerCapacity;
	    }

	    public void setPassengerCapacity(Integer passengerCapacity) {
	        this.passengerCapacity = passengerCapacity;
	    }
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "кількість of sailors='" + sailorsCapacity + '\'' +
	                ", кількість пасажирів='" + passengerCapacity + '\'' +
	                '}';
	    }
	}
	
	class Body
	{
		private String material;
		private Integer durability;
		
		public Body() {
			System.out.print("\nПустий корпус був створений");
	    }

	    public Body(String material, Integer durability) {
	        this.material = material;
	        this.durability = durability;
	    }

	    public Body(Body other) {
	        this.material = other.material;
	        this.durability = other.durability;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 0;
	    }

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }
	    @Override
	    public String toString() {
	        return "Корпус{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                '}';
	    }
	}
	
	class PairOfOars
	{
		private Oar rightOar;
		private Oar leftOar;
		
	    public PairOfOars() {
	    	System.out.print("\nПуста пара весел була створенна");
	    }

	    public PairOfOars(Oar rightOar, Oar leftOar) {
	        this.rightOar = rightOar;
	        this.leftOar = leftOar;
	    }

	    public PairOfOars(PairOfOars other) {
	        this.rightOar = new Oar(other.rightOar);
	        this.leftOar = new Oar(other.leftOar);
	    }

	    {
	        this.rightOar = new Oar();
	        this.leftOar = new Oar();
	    }
	    
	    public Boolean RowingToForward
	    {
	    	return rightOar.Rowing();
	    }
	    
	    public Boolean RowingToLeft
	    {
	    	return rightOar.Rowing();
	    }
	    
	    public Boolean RowingToRight
	    {
	    	return leftOar.Rowing();
	    }

	    public Oar getRightOar() {
	        return rightOar;
	    }

	    public void setRightOar(Oar rightOar) {
	        this.rightOar = rightOar;
	    }

	    public Oar getLeftOar() {
	        return leftOar;
	    }

	    public void setLeftOar(Oar leftOar) {
	        this.leftOar = leftOar;
	    }
		
	}
	
	class Oar 
	{
		private String material;
		private Integer durability;
		private Integer maxDurability;
		private Integer quality;
		
		public Oar() {
			System.out.print("\nПусте весло було створене");
	    }

	    public Oar(String material, Integer durability, Integer quality) {
	        this.material = material;
	        this.durability = durability;
	        this.quality = quality;
	    }

	    public Oar(Oar other) {
	        this.material = other.material;
	        this.durability = other.durability;
	        this.quality = other.quality;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 1000;
	        this.quality = 30;
	    }
	    
	    public Boolean Rowing()
	    {
	    	if (durability > 0)
	    	{
	    		this.durability -= ((int)(Math.random() * 11)*100)/this.quality;
	    		return true;
	    	}
	    	return false;
	    }
	    
	    public Boolean Repair()
	    {
	    	if (this.maxDurability*this.quality)/100 > this.durability)
	    	{
	    		this.durability = ((this.maxDurability*100)/this.quality)(int)(Math.random() * 1.1);
	    		return true;
	    	}
	    	return false;
	    }
	    

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }

	    public Integer getQuality() {
	        return quality;
	    }

	    public void setQuality(Integer quality) {
	        this.quality = quality;
	    }
	    
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                ", якість=" + quality +
	                '}';
	    }
	}
	
	class Sailer extends Person
	{
		private Integer Stamina;
		private Integer Power;
		private Integer Experience;
		
	    public Sailer() {
	        super();
	        System.out.print("\nПустий, той хто працює веслом, був створений");
	    }

	    public Sailer(String firstname, String lastname, Integer years, Integer Stamina, Integer Power, Integer Experience) {
	        super(firstname, lastname, years);
	        this.Stamina = Stamina;
	        this.Power = Power;
	        this.Experience = Experience;
	    }

	    public Sailer(Sailer other) {
	        super(other);
	        this.Stamina = other.Stamina;
	        this.Power = other.Power;
	        this.Experience = other.Experience;
	    }

	    {
	        this.Stamina = 0;
	        this.Power = 0;
	        this.Experience = 0;
	    }

	    public Integer getStamina() {
	        return Stamina;
	    }

	    public void setStamina(Integer Stamina) {
	        this.Stamina = Stamina;
	    }

	    public Integer getPower() {
	        return Power;
	    }

	    public void setPower(Integer Power) {
	        this.Power = Power;
	    }

	    public Integer getExperience() {
	        return Experience;
	    }

	    public void setExperience(Integer Experience) {
	        this.Experience = Experience;
	    }

	    @Override
	    public String toString() {
	        return "Sailer{" +
	                "ім'я='" + getFirstname() + '\'' +
	                ", прізвище='" + getLastname() + '\'' +
	                ", вік=" + getYears() +
	                ", енергія=" + Stamina +
	                ", потужність=" + Power +
	                ", досвід=" + Experience +
	                '}';
	    }

	}
	
	class Person
	{
		private String firstname;
		private String lastname;
		private Integer years;
		
	    public Person() {
	    	System.out.print("\nПуста людина була створена");
	    }

	    public Person(String firstname, String lastname, Integer years) {
	        this.firstname = firstname;
	        this.lastname = lastname;
	        this.years = years;
	    }

	    public Person(Person other) {
	        this.firstname = other.firstname;
	        this.lastname = other.lastname;
	        this.years = other.years;
	    }

	    {
	        this.firstname = "Невідомо";
	        this.lastname = "Невідомо";
	        this.years = 0;
	    }

	    public String getFirstname() {
	        return firstname;
	    }

	    public void setFirstname(String firstname) {
	        this.firstname = firstname;
	    }

	    public String getLastname() {
	        return lastname;
	    }

	    public void setLastname(String lastname) {
	        this.lastname = lastname;
	    }

	    public Integer getYears() {
	        return years;
	    }

	    public void setYears(Integer years) {
	        this.years = years;
	    }

	    @Override
	    public String toString() {
	        return "Людина{" +
	                "ім'я='" + firstname + '\'' +
	                ", прізвище='" + lastname + '\'' +
	                ", вік=" + years +
	                '}';
	    }
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.getClipboardData(ClipboardOperationAction.java:486)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.doCutCopyWithImportsOperation(ClipboardOperationAction.java:407)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.internalDoOperation(ClipboardOperationAction.java:366)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:67)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.run(ClipboardOperationAction.java:287)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:474)
	at org.eclipse.jface.commands.ActionHandler.execute(ActionHandler.java:121)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at jdk.internal.reflect.GeneratedMethodAccessor44.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:309)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:243)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:485)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:655)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1286)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1065)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1090)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1075)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1117)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1113)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1594)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4865)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4743)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5040)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3658)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:643)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:550)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:171)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1440)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-09-08 11:57:01.560
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.getClipboardData(ClipboardOperationAction.java:486)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.doCutCopyWithImportsOperation(ClipboardOperationAction.java:407)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.internalDoOperation(ClipboardOperationAction.java:366)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:67)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.run(ClipboardOperationAction.java:287)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:474)
	at org.eclipse.jface.commands.ActionHandler.execute(ActionHandler.java:121)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at jdk.internal.reflect.GeneratedMethodAccessor44.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:309)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:243)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:485)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:655)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1286)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1065)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1090)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1075)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1117)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1113)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1594)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4865)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4743)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5040)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3658)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:643)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:550)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:171)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1440)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-09-08 11:57:01.560
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.getClipboardData(ClipboardOperationAction.java:486)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.doCutCopyWithImportsOperation(ClipboardOperationAction.java:407)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.internalDoOperation(ClipboardOperationAction.java:366)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:67)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.run(ClipboardOperationAction.java:287)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:474)
	at org.eclipse.jface.commands.ActionHandler.execute(ActionHandler.java:121)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at jdk.internal.reflect.GeneratedMethodAccessor44.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:309)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:243)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:485)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:655)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1286)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1065)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1090)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1075)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1117)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1113)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1594)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4865)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4743)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5040)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3658)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:643)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:550)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:171)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1440)

!ENTRY org.eclipse.jdt.core 4 4 2023-09-08 11:57:04.225
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
/**
 * 
 */
package CI_306.Shyryi.Lab3;

import java.util.List;
import java.util.ArrayList;

/**
 * 
 */
public class BoatOnOars {
	
	private String name;
	private Boat boat;
	private PairOfOars[] pairOfOars;
	private Sailer[] sailer;
	private List<Person> passengers = new ArrayList<>();

    public BoatOnOars() {
    	System.out.print("\nПуста шлюпка на веслах була створенна");
    }

    public BoatOnOars(String name, Boat boat, PairOfOars[] pairOfOars, Sailer[] sailer, List<Person> passengers) {
        this.name = name;
        this.boat = boat;
        this.pairOfOars = pairOfOars;
        this.sailer = sailer;
        this.passengers = passengers;
    }

    public BoatOnOars(BoatOnOars other) {
        this.name = other.name;
        this.boat = new Boat(other.boat);
        this.pairOfOars = other.pairOfOars.clone();
        this.sailer = other.sailer.clone();
        this.passengers = new ArrayList<>(other.passengers);
    }

    {
        this.name = "Невідомо";
        this.boat = new Boat();
        this.pairOfOars = new PairOfOars[2];
        this.sailer = new Sailer[2];
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Boat getBoat() {
        return boat;
    }

    public void setBoat(Boat boat) {
        this.boat = boat;
    }

    public PairOfOars[] getPairOfOars() {
        return pairOfOars;
    }

    public void setPairOfOars(PairOfOars[] pairOfOars) {
        this.pairOfOars = pairOfOars;
    }

    public Sailer[] getSailer() {
        return sailer;
    }

    public void setSailer(Sailer[] sailer) {
        this.sailer = sailer;
    }

    public List<Person> getPassengers() {
        return passengers;
    }

    public void setPassengers(List<Person> passengers) {
        this.passengers = passengers;
    }
	
	class Boat 
	{
		private Deck deck;
		private Body body;

	    public Boat() {
	    	System.out.print("\nПуста шлюпка була створенна");
	    }

	    public Boat(Deck deck, Body body) {
	        this.deck = deck;
	        this.body = body;
	    }

	    public Boat(Boat other) {
	        this.deck = new Deck(other.deck);
	        this.body = new Body(other.body);
	    }

	    {
	        this.deck = new Deck();
	        this.body = new Body();
	    }

	    public Deck getDeck() {
	        return deck;
	    }

	    public void setDeck(Deck deck) {
	        this.deck = deck;
	    }

	    public Body getBody() {
	        return body;
	    }

	    public void setBody(Body body) {
	        this.body = body;
	    }
		
	}
	
	class Deck
	{
		private Integer sailorsCapacity;
		private Integer passengerCapacity;
		
		 public Deck() {
			 System.out.print("\nПуста палуба була створенна");
	    }

	    public Deck(Integer sailorsCapacity, Integer passengerCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	        this.passengerCapacity = passengerCapacity;
	    }

	    public Deck(Deck other) {
	        this.sailorsCapacity = other.sailorsCapacity;
	        this.passengerCapacity = other.passengerCapacity;
	    }

	    {
	        this.sailorsCapacity = 0;
	        this.passengerCapacity = 0;
	    }

	    public Integer getSailorsCapacity() {
	        return sailorsCapacity;
	    }

	    public void setSailorsCapacity(Integer sailorsCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	    }

	    public Integer getPassengerCapacity() {
	        return passengerCapacity;
	    }

	    public void setPassengerCapacity(Integer passengerCapacity) {
	        this.passengerCapacity = passengerCapacity;
	    }
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "кількість of sailors='" + sailorsCapacity + '\'' +
	                ", кількість пасажирів='" + passengerCapacity + '\'' +
	                '}';
	    }
	}
	
	class Body
	{
		private String material;
		private Integer durability;
		
		public Body() {
			System.out.print("\nПустий корпус був створений");
	    }

	    public Body(String material, Integer durability) {
	        this.material = material;
	        this.durability = durability;
	    }

	    public Body(Body other) {
	        this.material = other.material;
	        this.durability = other.durability;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 0;
	    }

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }
	    @Override
	    public String toString() {
	        return "Корпус{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                '}';
	    }
	}
	
	class PairOfOars
	{
		private Oar rightOar;
		private Oar leftOar;
		
	    public PairOfOars() {
	    	System.out.print("\nПуста пара весел була створенна");
	    }

	    public PairOfOars(Oar rightOar, Oar leftOar) {
	        this.rightOar = rightOar;
	        this.leftOar = leftOar;
	    }

	    public PairOfOars(PairOfOars other) {
	        this.rightOar = new Oar(other.rightOar);
	        this.leftOar = new Oar(other.leftOar);
	    }

	    {
	        this.rightOar = new Oar();
	        this.leftOar = new Oar();
	    }
	    
	    public Boolean RowingToForward
	    {
	    	return  rightOar.Rowing();
	    }
	    
	    public Boolean RowingToLeft
	    {
	    	return rightOar.Rowing();
	    }
	    
	    public Boolean RowingToRight
	    {
	    	return leftOar.Rowing();
	    }

	    public Oar getRightOar() {
	        return rightOar;
	    }

	    public void setRightOar(Oar rightOar) {
	        this.rightOar = rightOar;
	    }

	    public Oar getLeftOar() {
	        return leftOar;
	    }

	    public void setLeftOar(Oar leftOar) {
	        this.leftOar = leftOar;
	    }
		
	}
	
	class Oar 
	{
		private String material;
		private Integer durability;
		private Integer maxDurability;
		private Integer quality;
		
		public Oar() {
			System.out.print("\nПусте весло було створене");
	    }

	    public Oar(String material, Integer durability, Integer quality) {
	        this.material = material;
	        this.durability = durability;
	        this.quality = quality;
	    }

	    public Oar(Oar other) {
	        this.material = other.material;
	        this.durability = other.durability;
	        this.quality = other.quality;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 1000;
	        this.quality = 30;
	    }
	    
	    public Boolean Rowing()
	    {
	    	if (durability > 0)
	    	{
	    		this.durability -= ((int)(Math.random() * 11)*100)/this.quality;
	    		return true;
	    	}
	    	return false;
	    }
	    
	    public Boolean Repair()
	    {
	    	if (this.maxDurability*this.quality)/100 > this.durability)
	    	{
	    		this.durability = ((this.maxDurability*100)/this.quality)(int)(Math.random() * 1.1);
	    		return true;
	    	}
	    	return false;
	    }
	    

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }

	    public Integer getQuality() {
	        return quality;
	    }

	    public void setQuality(Integer quality) {
	        this.quality = quality;
	    }
	    
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                ", якість=" + quality +
	                '}';
	    }
	}
	
	class Sailer extends Person
	{
		private Integer Stamina;
		private Integer Power;
		private Integer Experience;
		
	    public Sailer() {
	        super();
	        System.out.print("\nПустий, той хто працює веслом, був створений");
	    }

	    public Sailer(String firstname, String lastname, Integer years, Integer Stamina, Integer Power, Integer Experience) {
	        super(firstname, lastname, years);
	        this.Stamina = Stamina;
	        this.Power = Power;
	        this.Experience = Experience;
	    }

	    public Sailer(Sailer other) {
	        super(other);
	        this.Stamina = other.Stamina;
	        this.Power = other.Power;
	        this.Experience = other.Experience;
	    }

	    {
	        this.Stamina = 0;
	        this.Power = 0;
	        this.Experience = 0;
	    }

	    public Integer getStamina() {
	        return Stamina;
	    }

	    public void setStamina(Integer Stamina) {
	        this.Stamina = Stamina;
	    }

	    public Integer getPower() {
	        return Power;
	    }

	    public void setPower(Integer Power) {
	        this.Power = Power;
	    }

	    public Integer getExperience() {
	        return Experience;
	    }

	    public void setExperience(Integer Experience) {
	        this.Experience = Experience;
	    }

	    @Override
	    public String toString() {
	        return "Sailer{" +
	                "ім'я='" + getFirstname() + '\'' +
	                ", прізвище='" + getLastname() + '\'' +
	                ", вік=" + getYears() +
	                ", енергія=" + Stamina +
	                ", потужність=" + Power +
	                ", досвід=" + Experience +
	                '}';
	    }

	}
	
	class Person
	{
		private String firstname;
		private String lastname;
		private Integer years;
		
	    public Person() {
	    	System.out.print("\nПуста людина була створена");
	    }

	    public Person(String firstname, String lastname, Integer years) {
	        this.firstname = firstname;
	        this.lastname = lastname;
	        this.years = years;
	    }

	    public Person(Person other) {
	        this.firstname = other.firstname;
	        this.lastname = other.lastname;
	        this.years = other.years;
	    }

	    {
	        this.firstname = "Невідомо";
	        this.lastname = "Невідомо";
	        this.years = 0;
	    }

	    public String getFirstname() {
	        return firstname;
	    }

	    public void setFirstname(String firstname) {
	        this.firstname = firstname;
	    }

	    public String getLastname() {
	        return lastname;
	    }

	    public void setLastname(String lastname) {
	        this.lastname = lastname;
	    }

	    public Integer getYears() {
	        return years;
	    }

	    public void setYears(Integer years) {
	        this.years = years;
	    }

	    @Override
	    public String toString() {
	        return "Людина{" +
	                "ім'я='" + firstname + '\'' +
	                ", прізвище='" + lastname + '\'' +
	                ", вік=" + years +
	                '}';
	    }
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-09-08 11:57:04.226
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-09-08 11:57:04.228
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-09-08 11:57:04.239
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
/**
 * 
 */
package CI_306.Shyryi.Lab3;

import java.util.List;
import java.util.ArrayList;

/**
 * 
 */
public class BoatOnOars {
	
	private String name;
	private Boat boat;
	private PairOfOars[] pairOfOars;
	private Sailer[] sailer;
	private List<Person> passengers = new ArrayList<>();

    public BoatOnOars() {
    	System.out.print("\nПуста шлюпка на веслах була створенна");
    }

    public BoatOnOars(String name, Boat boat, PairOfOars[] pairOfOars, Sailer[] sailer, List<Person> passengers) {
        this.name = name;
        this.boat = boat;
        this.pairOfOars = pairOfOars;
        this.sailer = sailer;
        this.passengers = passengers;
    }

    public BoatOnOars(BoatOnOars other) {
        this.name = other.name;
        this.boat = new Boat(other.boat);
        this.pairOfOars = other.pairOfOars.clone();
        this.sailer = other.sailer.clone();
        this.passengers = new ArrayList<>(other.passengers);
    }

    {
        this.name = "Невідомо";
        this.boat = new Boat();
        this.pairOfOars = new PairOfOars[2];
        this.sailer = new Sailer[2];
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Boat getBoat() {
        return boat;
    }

    public void setBoat(Boat boat) {
        this.boat = boat;
    }

    public PairOfOars[] getPairOfOars() {
        return pairOfOars;
    }

    public void setPairOfOars(PairOfOars[] pairOfOars) {
        this.pairOfOars = pairOfOars;
    }

    public Sailer[] getSailer() {
        return sailer;
    }

    public void setSailer(Sailer[] sailer) {
        this.sailer = sailer;
    }

    public List<Person> getPassengers() {
        return passengers;
    }

    public void setPassengers(List<Person> passengers) {
        this.passengers = passengers;
    }
	
	class Boat 
	{
		private Deck deck;
		private Body body;

	    public Boat() {
	    	System.out.print("\nПуста шлюпка була створенна");
	    }

	    public Boat(Deck deck, Body body) {
	        this.deck = deck;
	        this.body = body;
	    }

	    public Boat(Boat other) {
	        this.deck = new Deck(other.deck);
	        this.body = new Body(other.body);
	    }

	    {
	        this.deck = new Deck();
	        this.body = new Body();
	    }

	    public Deck getDeck() {
	        return deck;
	    }

	    public void setDeck(Deck deck) {
	        this.deck = deck;
	    }

	    public Body getBody() {
	        return body;
	    }

	    public void setBody(Body body) {
	        this.body = body;
	    }
		
	}
	
	class Deck
	{
		private Integer sailorsCapacity;
		private Integer passengerCapacity;
		
		 public Deck() {
			 System.out.print("\nПуста палуба була створенна");
	    }

	    public Deck(Integer sailorsCapacity, Integer passengerCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	        this.passengerCapacity = passengerCapacity;
	    }

	    public Deck(Deck other) {
	        this.sailorsCapacity = other.sailorsCapacity;
	        this.passengerCapacity = other.passengerCapacity;
	    }

	    {
	        this.sailorsCapacity = 0;
	        this.passengerCapacity = 0;
	    }

	    public Integer getSailorsCapacity() {
	        return sailorsCapacity;
	    }

	    public void setSailorsCapacity(Integer sailorsCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	    }

	    public Integer getPassengerCapacity() {
	        return passengerCapacity;
	    }

	    public void setPassengerCapacity(Integer passengerCapacity) {
	        this.passengerCapacity = passengerCapacity;
	    }
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "кількість of sailors='" + sailorsCapacity + '\'' +
	                ", кількість пасажирів='" + passengerCapacity + '\'' +
	                '}';
	    }
	}
	
	class Body
	{
		private String material;
		private Integer durability;
		
		public Body() {
			System.out.print("\nПустий корпус був створений");
	    }

	    public Body(String material, Integer durability) {
	        this.material = material;
	        this.durability = durability;
	    }

	    public Body(Body other) {
	        this.material = other.material;
	        this.durability = other.durability;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 0;
	    }

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }
	    @Override
	    public String toString() {
	        return "Корпус{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                '}';
	    }
	}
	
	class PairOfOars
	{
		private Oar rightOar;
		private Oar leftOar;
		
	    public PairOfOars() {
	    	System.out.print("\nПуста пара весел була створенна");
	    }

	    public PairOfOars(Oar rightOar, Oar leftOar) {
	        this.rightOar = rightOar;
	        this.leftOar = leftOar;
	    }

	    public PairOfOars(PairOfOars other) {
	        this.rightOar = new Oar(other.rightOar);
	        this.leftOar = new Oar(other.leftOar);
	    }

	    {
	        this.rightOar = new Oar();
	        this.leftOar = new Oar();
	    }
	    
	    public Boolean RowingToForward
	    {
	    	return  rightOar.Rowing();
	    }
	    
	    public Boolean RowingToLeft
	    {
	    	return rightOar.Rowing();
	    }
	    
	    public Boolean RowingToRight
	    {
	    	return leftOar.Rowing();
	    }

	    public Oar getRightOar() {
	        return rightOar;
	    }

	    public void setRightOar(Oar rightOar) {
	        this.rightOar = rightOar;
	    }

	    public Oar getLeftOar() {
	        return leftOar;
	    }

	    public void setLeftOar(Oar leftOar) {
	        this.leftOar = leftOar;
	    }
		
	}
	
	class Oar 
	{
		private String material;
		private Integer durability;
		private Integer maxDurability;
		private Integer quality;
		
		public Oar() {
			System.out.print("\nПусте весло було створене");
	    }

	    public Oar(String material, Integer durability, Integer quality) {
	        this.material = material;
	        this.durability = durability;
	        this.quality = quality;
	    }

	    public Oar(Oar other) {
	        this.material = other.material;
	        this.durability = other.durability;
	        this.quality = other.quality;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 1000;
	        this.quality = 30;
	    }
	    
	    public Boolean Rowing()
	    {
	    	if (durability > 0)
	    	{
	    		this.durability -= ((int)(Math.random() * 11)*100)/this.quality;
	    		return true;
	    	}
	    	return false;
	    }
	    
	    public Boolean Repair()
	    {
	    	if (this.maxDurability*this.quality)/100 > this.durability)
	    	{
	    		this.durability = ((this.maxDurability*100)/this.quality)(int)(Math.random() * 1.1);
	    		return true;
	    	}
	    	return false;
	    }
	    

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }

	    public Integer getQuality() {
	        return quality;
	    }

	    public void setQuality(Integer quality) {
	        this.quality = quality;
	    }
	    
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                ", якість=" + quality +
	                '}';
	    }
	}
	
	class Sailer extends Person
	{
		private Integer Stamina;
		private Integer Power;
		private Integer Experience;
		
	    public Sailer() {
	        super();
	        System.out.print("\nПустий, той хто працює веслом, був створений");
	    }

	    public Sailer(String firstname, String lastname, Integer years, Integer Stamina, Integer Power, Integer Experience) {
	        super(firstname, lastname, years);
	        this.Stamina = Stamina;
	        this.Power = Power;
	        this.Experience = Experience;
	    }

	    public Sailer(Sailer other) {
	        super(other);
	        this.Stamina = other.Stamina;
	        this.Power = other.Power;
	        this.Experience = other.Experience;
	    }

	    {
	        this.Stamina = 0;
	        this.Power = 0;
	        this.Experience = 0;
	    }

	    public Integer getStamina() {
	        return Stamina;
	    }

	    public void setStamina(Integer Stamina) {
	        this.Stamina = Stamina;
	    }

	    public Integer getPower() {
	        return Power;
	    }

	    public void setPower(Integer Power) {
	        this.Power = Power;
	    }

	    public Integer getExperience() {
	        return Experience;
	    }

	    public void setExperience(Integer Experience) {
	        this.Experience = Experience;
	    }

	    @Override
	    public String toString() {
	        return "Sailer{" +
	                "ім'я='" + getFirstname() + '\'' +
	                ", прізвище='" + getLastname() + '\'' +
	                ", вік=" + getYears() +
	                ", енергія=" + Stamina +
	                ", потужність=" + Power +
	                ", досвід=" + Experience +
	                '}';
	    }

	}
	
	class Person
	{
		private String firstname;
		private String lastname;
		private Integer years;
		
	    public Person() {
	    	System.out.print("\nПуста людина була створена");
	    }

	    public Person(String firstname, String lastname, Integer years) {
	        this.firstname = firstname;
	        this.lastname = lastname;
	        this.years = years;
	    }

	    public Person(Person other) {
	        this.firstname = other.firstname;
	        this.lastname = other.lastname;
	        this.years = other.years;
	    }

	    {
	        this.firstname = "Невідомо";
	        this.lastname = "Невідомо";
	        this.years = 0;
	    }

	    public String getFirstname() {
	        return firstname;
	    }

	    public void setFirstname(String firstname) {
	        this.firstname = firstname;
	    }

	    public String getLastname() {
	        return lastname;
	    }

	    public void setLastname(String lastname) {
	        this.lastname = lastname;
	    }

	    public Integer getYears() {
	        return years;
	    }

	    public void setYears(Integer years) {
	        this.years = years;
	    }

	    @Override
	    public String toString() {
	        return "Людина{" +
	                "ім'я='" + firstname + '\'' +
	                ", прізвище='" + lastname + '\'' +
	                ", вік=" + years +
	                '}';
	    }
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-09-08 11:57:04.239
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-09-08 11:57:04.239
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-09-08 11:57:04.736
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
/**
 * 
 */
package CI_306.Shyryi.Lab3;

import java.util.List;
import java.util.ArrayList;

/**
 * 
 */
public class BoatOnOars {
	
	private String name;
	private Boat boat;
	private PairOfOars[] pairOfOars;
	private Sailer[] sailer;
	private List<Person> passengers = new ArrayList<>();

    public BoatOnOars() {
    	System.out.print("\nПуста шлюпка на веслах була створенна");
    }

    public BoatOnOars(String name, Boat boat, PairOfOars[] pairOfOars, Sailer[] sailer, List<Person> passengers) {
        this.name = name;
        this.boat = boat;
        this.pairOfOars = pairOfOars;
        this.sailer = sailer;
        this.passengers = passengers;
    }

    public BoatOnOars(BoatOnOars other) {
        this.name = other.name;
        this.boat = new Boat(other.boat);
        this.pairOfOars = other.pairOfOars.clone();
        this.sailer = other.sailer.clone();
        this.passengers = new ArrayList<>(other.passengers);
    }

    {
        this.name = "Невідомо";
        this.boat = new Boat();
        this.pairOfOars = new PairOfOars[2];
        this.sailer = new Sailer[2];
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Boat getBoat() {
        return boat;
    }

    public void setBoat(Boat boat) {
        this.boat = boat;
    }

    public PairOfOars[] getPairOfOars() {
        return pairOfOars;
    }

    public void setPairOfOars(PairOfOars[] pairOfOars) {
        this.pairOfOars = pairOfOars;
    }

    public Sailer[] getSailer() {
        return sailer;
    }

    public void setSailer(Sailer[] sailer) {
        this.sailer = sailer;
    }

    public List<Person> getPassengers() {
        return passengers;
    }

    public void setPassengers(List<Person> passengers) {
        this.passengers = passengers;
    }
	
	class Boat 
	{
		private Deck deck;
		private Body body;

	    public Boat() {
	    	System.out.print("\nПуста шлюпка була створенна");
	    }

	    public Boat(Deck deck, Body body) {
	        this.deck = deck;
	        this.body = body;
	    }

	    public Boat(Boat other) {
	        this.deck = new Deck(other.deck);
	        this.body = new Body(other.body);
	    }

	    {
	        this.deck = new Deck();
	        this.body = new Body();
	    }

	    public Deck getDeck() {
	        return deck;
	    }

	    public void setDeck(Deck deck) {
	        this.deck = deck;
	    }

	    public Body getBody() {
	        return body;
	    }

	    public void setBody(Body body) {
	        this.body = body;
	    }
		
	}
	
	class Deck
	{
		private Integer sailorsCapacity;
		private Integer passengerCapacity;
		
		 public Deck() {
			 System.out.print("\nПуста палуба була створенна");
	    }

	    public Deck(Integer sailorsCapacity, Integer passengerCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	        this.passengerCapacity = passengerCapacity;
	    }

	    public Deck(Deck other) {
	        this.sailorsCapacity = other.sailorsCapacity;
	        this.passengerCapacity = other.passengerCapacity;
	    }

	    {
	        this.sailorsCapacity = 0;
	        this.passengerCapacity = 0;
	    }

	    public Integer getSailorsCapacity() {
	        return sailorsCapacity;
	    }

	    public void setSailorsCapacity(Integer sailorsCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	    }

	    public Integer getPassengerCapacity() {
	        return passengerCapacity;
	    }

	    public void setPassengerCapacity(Integer passengerCapacity) {
	        this.passengerCapacity = passengerCapacity;
	    }
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "кількість of sailors='" + sailorsCapacity + '\'' +
	                ", кількість пасажирів='" + passengerCapacity + '\'' +
	                '}';
	    }
	}
	
	class Body
	{
		private String material;
		private Integer durability;
		
		public Body() {
			System.out.print("\nПустий корпус був створений");
	    }

	    public Body(String material, Integer durability) {
	        this.material = material;
	        this.durability = durability;
	    }

	    public Body(Body other) {
	        this.material = other.material;
	        this.durability = other.durability;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 0;
	    }

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }
	    @Override
	    public String toString() {
	        return "Корпус{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                '}';
	    }
	}
	
	class PairOfOars
	{
		private Oar rightOar;
		private Oar leftOar;
		
	    public PairOfOars() {
	    	System.out.print("\nПуста пара весел була створенна");
	    }

	    public PairOfOars(Oar rightOar, Oar leftOar) {
	        this.rightOar = rightOar;
	        this.leftOar = leftOar;
	    }

	    public PairOfOars(PairOfOars other) {
	        this.rightOar = new Oar(other.rightOar);
	        this.leftOar = new Oar(other.leftOar);
	    }

	    {
	        this.rightOar = new Oar();
	        this.leftOar = new Oar();
	    }
	    
	    public Boolean RowingToForward
	    {
	    	return  rightOar.Rowing();
	    }
	    
	    public Boolean RowingToLeft
	    {
	    	return rightOar.Rowing();
	    }
	    
	    public Boolean RowingToRight
	    {
	    	return leftOar.Rowing();
	    }

	    public Oar getRightOar() {
	        return rightOar;
	    }

	    public void setRightOar(Oar rightOar) {
	        this.rightOar = rightOar;
	    }

	    public Oar getLeftOar() {
	        return leftOar;
	    }

	    public void setLeftOar(Oar leftOar) {
	        this.leftOar = leftOar;
	    }
		
	}
	
	class Oar 
	{
		private String material;
		private Integer durability;
		private Integer maxDurability;
		private Integer quality;
		
		public Oar() {
			System.out.print("\nПусте весло було створене");
	    }

	    public Oar(String material, Integer durability, Integer quality) {
	        this.material = material;
	        this.durability = durability;
	        this.quality = quality;
	    }

	    public Oar(Oar other) {
	        this.material = other.material;
	        this.durability = other.durability;
	        this.quality = other.quality;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 1000;
	        this.quality = 30;
	    }
	    
	    public Boolean Rowing()
	    {
	    	if (durability > 0)
	    	{
	    		this.durability -= ((int)(Math.random() * 11)*100)/this.quality;
	    		return true;
	    	}
	    	return false;
	    }
	    
	    public Boolean Repair()
	    {
	    	if (this.maxDurability*this.quality)/100 > this.durability)
	    	{
	    		this.durability = ((this.maxDurability*100)/this.quality)(int)(Math.random() * 1.1);
	    		return true;
	    	}
	    	return false;
	    }
	    

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }

	    public Integer getQuality() {
	        return quality;
	    }

	    public void setQuality(Integer quality) {
	        this.quality = quality;
	    }
	    
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                ", якість=" + quality +
	                '}';
	    }
	}
	
	class Sailer extends Person
	{
		private Integer Stamina;
		private Integer Power;
		private Integer Experience;
		
	    public Sailer() {
	        super();
	        System.out.print("\nПустий, той хто працює веслом, був створений");
	    }

	    public Sailer(String firstname, String lastname, Integer years, Integer Stamina, Integer Power, Integer Experience) {
	        super(firstname, lastname, years);
	        this.Stamina = Stamina;
	        this.Power = Power;
	        this.Experience = Experience;
	    }

	    public Sailer(Sailer other) {
	        super(other);
	        this.Stamina = other.Stamina;
	        this.Power = other.Power;
	        this.Experience = other.Experience;
	    }

	    {
	        this.Stamina = 0;
	        this.Power = 0;
	        this.Experience = 0;
	    }

	    public Integer getStamina() {
	        return Stamina;
	    }

	    public void setStamina(Integer Stamina) {
	        this.Stamina = Stamina;
	    }

	    public Integer getPower() {
	        return Power;
	    }

	    public void setPower(Integer Power) {
	        this.Power = Power;
	    }

	    public Integer getExperience() {
	        return Experience;
	    }

	    public void setExperience(Integer Experience) {
	        this.Experience = Experience;
	    }

	    @Override
	    public String toString() {
	        return "Sailer{" +
	                "ім'я='" + getFirstname() + '\'' +
	                ", прізвище='" + getLastname() + '\'' +
	                ", вік=" + getYears() +
	                ", енергія=" + Stamina +
	                ", потужність=" + Power +
	                ", досвід=" + Experience +
	                '}';
	    }

	}
	
	class Person
	{
		private String firstname;
		private String lastname;
		private Integer years;
		
	    public Person() {
	    	System.out.print("\nПуста людина була створена");
	    }

	    public Person(String firstname, String lastname, Integer years) {
	        this.firstname = firstname;
	        this.lastname = lastname;
	        this.years = years;
	    }

	    public Person(Person other) {
	        this.firstname = other.firstname;
	        this.lastname = other.lastname;
	        this.years = other.years;
	    }

	    {
	        this.firstname = "Невідомо";
	        this.lastname = "Невідомо";
	        this.years = 0;
	    }

	    public String getFirstname() {
	        return firstname;
	    }

	    public void setFirstname(String firstname) {
	        this.firstname = firstname;
	    }

	    public String getLastname() {
	        return lastname;
	    }

	    public void setLastname(String lastname) {
	        this.lastname = lastname;
	    }

	    public Integer getYears() {
	        return years;
	    }

	    public void setYears(Integer years) {
	        this.years = years;
	    }

	    @Override
	    public String toString() {
	        return "Людина{" +
	                "ім'я='" + firstname + '\'' +
	                ", прізвище='" + lastname + '\'' +
	                ", вік=" + years +
	                '}';
	    }
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-09-08 11:57:04.736
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-09-08 11:57:04.737
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-09-08 11:57:07.496
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
/**
 * 
 */
package CI_306.Shyryi.Lab3;

import java.util.List;
import java.util.ArrayList;

/**
 * 
 */
public class BoatOnOars {
	
	private String name;
	private Boat boat;
	private PairOfOars[] pairOfOars;
	private Sailer[] sailer;
	private List<Person> passengers = new ArrayList<>();

    public BoatOnOars() {
    	System.out.print("\nПуста шлюпка на веслах була створенна");
    }

    public BoatOnOars(String name, Boat boat, PairOfOars[] pairOfOars, Sailer[] sailer, List<Person> passengers) {
        this.name = name;
        this.boat = boat;
        this.pairOfOars = pairOfOars;
        this.sailer = sailer;
        this.passengers = passengers;
    }

    public BoatOnOars(BoatOnOars other) {
        this.name = other.name;
        this.boat = new Boat(other.boat);
        this.pairOfOars = other.pairOfOars.clone();
        this.sailer = other.sailer.clone();
        this.passengers = new ArrayList<>(other.passengers);
    }

    {
        this.name = "Невідомо";
        this.boat = new Boat();
        this.pairOfOars = new PairOfOars[2];
        this.sailer = new Sailer[2];
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Boat getBoat() {
        return boat;
    }

    public void setBoat(Boat boat) {
        this.boat = boat;
    }

    public PairOfOars[] getPairOfOars() {
        return pairOfOars;
    }

    public void setPairOfOars(PairOfOars[] pairOfOars) {
        this.pairOfOars = pairOfOars;
    }

    public Sailer[] getSailer() {
        return sailer;
    }

    public void setSailer(Sailer[] sailer) {
        this.sailer = sailer;
    }

    public List<Person> getPassengers() {
        return passengers;
    }

    public void setPassengers(List<Person> passengers) {
        this.passengers = passengers;
    }
	
	class Boat 
	{
		private Deck deck;
		private Body body;

	    public Boat() {
	    	System.out.print("\nПуста шлюпка була створенна");
	    }

	    public Boat(Deck deck, Body body) {
	        this.deck = deck;
	        this.body = body;
	    }

	    public Boat(Boat other) {
	        this.deck = new Deck(other.deck);
	        this.body = new Body(other.body);
	    }

	    {
	        this.deck = new Deck();
	        this.body = new Body();
	    }

	    public Deck getDeck() {
	        return deck;
	    }

	    public void setDeck(Deck deck) {
	        this.deck = deck;
	    }

	    public Body getBody() {
	        return body;
	    }

	    public void setBody(Body body) {
	        this.body = body;
	    }
		
	}
	
	class Deck
	{
		private Integer sailorsCapacity;
		private Integer passengerCapacity;
		
		 public Deck() {
			 System.out.print("\nПуста палуба була створенна");
	    }

	    public Deck(Integer sailorsCapacity, Integer passengerCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	        this.passengerCapacity = passengerCapacity;
	    }

	    public Deck(Deck other) {
	        this.sailorsCapacity = other.sailorsCapacity;
	        this.passengerCapacity = other.passengerCapacity;
	    }

	    {
	        this.sailorsCapacity = 0;
	        this.passengerCapacity = 0;
	    }

	    public Integer getSailorsCapacity() {
	        return sailorsCapacity;
	    }

	    public void setSailorsCapacity(Integer sailorsCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	    }

	    public Integer getPassengerCapacity() {
	        return passengerCapacity;
	    }

	    public void setPassengerCapacity(Integer passengerCapacity) {
	        this.passengerCapacity = passengerCapacity;
	    }
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "кількість of sailors='" + sailorsCapacity + '\'' +
	                ", кількість пасажирів='" + passengerCapacity + '\'' +
	                '}';
	    }
	}
	
	class Body
	{
		private String material;
		private Integer durability;
		
		public Body() {
			System.out.print("\nПустий корпус був створений");
	    }

	    public Body(String material, Integer durability) {
	        this.material = material;
	        this.durability = durability;
	    }

	    public Body(Body other) {
	        this.material = other.material;
	        this.durability = other.durability;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 0;
	    }

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }
	    @Override
	    public String toString() {
	        return "Корпус{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                '}';
	    }
	}
	
	class PairOfOars
	{
		private Oar rightOar;
		private Oar leftOar;
		
	    public PairOfOars() {
	    	System.out.print("\nПуста пара весел була створенна");
	    }

	    public PairOfOars(Oar rightOar, Oar leftOar) {
	        this.rightOar = rightOar;
	        this.leftOar = leftOar;
	    }

	    public PairOfOars(PairOfOars other) {
	        this.rightOar = new Oar(other.rightOar);
	        this.leftOar = new Oar(other.leftOar);
	    }

	    {
	        this.rightOar = new Oar();
	        this.leftOar = new Oar();
	    }
	    
	    public Boolean RowingToForward
	    {
	    	return && rightOar.Rowing();
	    }
	    
	    public Boolean RowingToLeft
	    {
	    	return rightOar.Rowing();
	    }
	    
	    public Boolean RowingToRight
	    {
	    	return leftOar.Rowing();
	    }

	    public Oar getRightOar() {
	        return rightOar;
	    }

	    public void setRightOar(Oar rightOar) {
	        this.rightOar = rightOar;
	    }

	    public Oar getLeftOar() {
	        return leftOar;
	    }

	    public void setLeftOar(Oar leftOar) {
	        this.leftOar = leftOar;
	    }
		
	}
	
	class Oar 
	{
		private String material;
		private Integer durability;
		private Integer maxDurability;
		private Integer quality;
		
		public Oar() {
			System.out.print("\nПусте весло було створене");
	    }

	    public Oar(String material, Integer durability, Integer quality) {
	        this.material = material;
	        this.durability = durability;
	        this.quality = quality;
	    }

	    public Oar(Oar other) {
	        this.material = other.material;
	        this.durability = other.durability;
	        this.quality = other.quality;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 1000;
	        this.quality = 30;
	    }
	    
	    public Boolean Rowing()
	    {
	    	if (durability > 0)
	    	{
	    		this.durability -= ((int)(Math.random() * 11)*100)/this.quality;
	    		return true;
	    	}
	    	return false;
	    }
	    
	    public Boolean Repair()
	    {
	    	if (this.maxDurability*this.quality)/100 > this.durability)
	    	{
	    		this.durability = ((this.maxDurability*100)/this.quality)(int)(Math.random() * 1.1);
	    		return true;
	    	}
	    	return false;
	    }
	    

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }

	    public Integer getQuality() {
	        return quality;
	    }

	    public void setQuality(Integer quality) {
	        this.quality = quality;
	    }
	    
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                ", якість=" + quality +
	                '}';
	    }
	}
	
	class Sailer extends Person
	{
		private Integer Stamina;
		private Integer Power;
		private Integer Experience;
		
	    public Sailer() {
	        super();
	        System.out.print("\nПустий, той хто працює веслом, був створений");
	    }

	    public Sailer(String firstname, String lastname, Integer years, Integer Stamina, Integer Power, Integer Experience) {
	        super(firstname, lastname, years);
	        this.Stamina = Stamina;
	        this.Power = Power;
	        this.Experience = Experience;
	    }

	    public Sailer(Sailer other) {
	        super(other);
	        this.Stamina = other.Stamina;
	        this.Power = other.Power;
	        this.Experience = other.Experience;
	    }

	    {
	        this.Stamina = 0;
	        this.Power = 0;
	        this.Experience = 0;
	    }

	    public Integer getStamina() {
	        return Stamina;
	    }

	    public void setStamina(Integer Stamina) {
	        this.Stamina = Stamina;
	    }

	    public Integer getPower() {
	        return Power;
	    }

	    public void setPower(Integer Power) {
	        this.Power = Power;
	    }

	    public Integer getExperience() {
	        return Experience;
	    }

	    public void setExperience(Integer Experience) {
	        this.Experience = Experience;
	    }

	    @Override
	    public String toString() {
	        return "Sailer{" +
	                "ім'я='" + getFirstname() + '\'' +
	                ", прізвище='" + getLastname() + '\'' +
	                ", вік=" + getYears() +
	                ", енергія=" + Stamina +
	                ", потужність=" + Power +
	                ", досвід=" + Experience +
	                '}';
	    }

	}
	
	class Person
	{
		private String firstname;
		private String lastname;
		private Integer years;
		
	    public Person() {
	    	System.out.print("\nПуста людина була створена");
	    }

	    public Person(String firstname, String lastname, Integer years) {
	        this.firstname = firstname;
	        this.lastname = lastname;
	        this.years = years;
	    }

	    public Person(Person other) {
	        this.firstname = other.firstname;
	        this.lastname = other.lastname;
	        this.years = other.years;
	    }

	    {
	        this.firstname = "Невідомо";
	        this.lastname = "Невідомо";
	        this.years = 0;
	    }

	    public String getFirstname() {
	        return firstname;
	    }

	    public void setFirstname(String firstname) {
	        this.firstname = firstname;
	    }

	    public String getLastname() {
	        return lastname;
	    }

	    public void setLastname(String lastname) {
	        this.lastname = lastname;
	    }

	    public Integer getYears() {
	        return years;
	    }

	    public void setYears(Integer years) {
	        this.years = years;
	    }

	    @Override
	    public String toString() {
	        return "Людина{" +
	                "ім'я='" + firstname + '\'' +
	                ", прізвище='" + lastname + '\'' +
	                ", вік=" + years +
	                '}';
	    }
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-09-08 11:57:07.497
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-09-08 11:57:07.497
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-09-08 11:57:08.563
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
/**
 * 
 */
package CI_306.Shyryi.Lab3;

import java.util.List;
import java.util.ArrayList;

/**
 * 
 */
public class BoatOnOars {
	
	private String name;
	private Boat boat;
	private PairOfOars[] pairOfOars;
	private Sailer[] sailer;
	private List<Person> passengers = new ArrayList<>();

    public BoatOnOars() {
    	System.out.print("\nПуста шлюпка на веслах була створенна");
    }

    public BoatOnOars(String name, Boat boat, PairOfOars[] pairOfOars, Sailer[] sailer, List<Person> passengers) {
        this.name = name;
        this.boat = boat;
        this.pairOfOars = pairOfOars;
        this.sailer = sailer;
        this.passengers = passengers;
    }

    public BoatOnOars(BoatOnOars other) {
        this.name = other.name;
        this.boat = new Boat(other.boat);
        this.pairOfOars = other.pairOfOars.clone();
        this.sailer = other.sailer.clone();
        this.passengers = new ArrayList<>(other.passengers);
    }

    {
        this.name = "Невідомо";
        this.boat = new Boat();
        this.pairOfOars = new PairOfOars[2];
        this.sailer = new Sailer[2];
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Boat getBoat() {
        return boat;
    }

    public void setBoat(Boat boat) {
        this.boat = boat;
    }

    public PairOfOars[] getPairOfOars() {
        return pairOfOars;
    }

    public void setPairOfOars(PairOfOars[] pairOfOars) {
        this.pairOfOars = pairOfOars;
    }

    public Sailer[] getSailer() {
        return sailer;
    }

    public void setSailer(Sailer[] sailer) {
        this.sailer = sailer;
    }

    public List<Person> getPassengers() {
        return passengers;
    }

    public void setPassengers(List<Person> passengers) {
        this.passengers = passengers;
    }
	
	class Boat 
	{
		private Deck deck;
		private Body body;

	    public Boat() {
	    	System.out.print("\nПуста шлюпка була створенна");
	    }

	    public Boat(Deck deck, Body body) {
	        this.deck = deck;
	        this.body = body;
	    }

	    public Boat(Boat other) {
	        this.deck = new Deck(other.deck);
	        this.body = new Body(other.body);
	    }

	    {
	        this.deck = new Deck();
	        this.body = new Body();
	    }

	    public Deck getDeck() {
	        return deck;
	    }

	    public void setDeck(Deck deck) {
	        this.deck = deck;
	    }

	    public Body getBody() {
	        return body;
	    }

	    public void setBody(Body body) {
	        this.body = body;
	    }
		
	}
	
	class Deck
	{
		private Integer sailorsCapacity;
		private Integer passengerCapacity;
		
		 public Deck() {
			 System.out.print("\nПуста палуба була створенна");
	    }

	    public Deck(Integer sailorsCapacity, Integer passengerCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	        this.passengerCapacity = passengerCapacity;
	    }

	    public Deck(Deck other) {
	        this.sailorsCapacity = other.sailorsCapacity;
	        this.passengerCapacity = other.passengerCapacity;
	    }

	    {
	        this.sailorsCapacity = 0;
	        this.passengerCapacity = 0;
	    }

	    public Integer getSailorsCapacity() {
	        return sailorsCapacity;
	    }

	    public void setSailorsCapacity(Integer sailorsCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	    }

	    public Integer getPassengerCapacity() {
	        return passengerCapacity;
	    }

	    public void setPassengerCapacity(Integer passengerCapacity) {
	        this.passengerCapacity = passengerCapacity;
	    }
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "кількість of sailors='" + sailorsCapacity + '\'' +
	                ", кількість пасажирів='" + passengerCapacity + '\'' +
	                '}';
	    }
	}
	
	class Body
	{
		private String material;
		private Integer durability;
		
		public Body() {
			System.out.print("\nПустий корпус був створений");
	    }

	    public Body(String material, Integer durability) {
	        this.material = material;
	        this.durability = durability;
	    }

	    public Body(Body other) {
	        this.material = other.material;
	        this.durability = other.durability;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 0;
	    }

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }
	    @Override
	    public String toString() {
	        return "Корпус{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                '}';
	    }
	}
	
	class PairOfOars
	{
		private Oar rightOar;
		private Oar leftOar;
		
	    public PairOfOars() {
	    	System.out.print("\nПуста пара весел була створенна");
	    }

	    public PairOfOars(Oar rightOar, Oar leftOar) {
	        this.rightOar = rightOar;
	        this.leftOar = leftOar;
	    }

	    public PairOfOars(PairOfOars other) {
	        this.rightOar = new Oar(other.rightOar);
	        this.leftOar = new Oar(other.leftOar);
	    }

	    {
	        this.rightOar = new Oar();
	        this.leftOar = new Oar();
	    }
	    
	    public Boolean RowingToForward
	    {
	    	return  && rightOar.Rowing();
	    }
	    
	    public Boolean RowingToLeft
	    {
	    	return rightOar.Rowing();
	    }
	    
	    public Boolean RowingToRight
	    {
	    	return leftOar.Rowing();
	    }

	    public Oar getRightOar() {
	        return rightOar;
	    }

	    public void setRightOar(Oar rightOar) {
	        this.rightOar = rightOar;
	    }

	    public Oar getLeftOar() {
	        return leftOar;
	    }

	    public void setLeftOar(Oar leftOar) {
	        this.leftOar = leftOar;
	    }
		
	}
	
	class Oar 
	{
		private String material;
		private Integer durability;
		private Integer maxDurability;
		private Integer quality;
		
		public Oar() {
			System.out.print("\nПусте весло було створене");
	    }

	    public Oar(String material, Integer durability, Integer quality) {
	        this.material = material;
	        this.durability = durability;
	        this.quality = quality;
	    }

	    public Oar(Oar other) {
	        this.material = other.material;
	        this.durability = other.durability;
	        this.quality = other.quality;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 1000;
	        this.quality = 30;
	    }
	    
	    public Boolean Rowing()
	    {
	    	if (durability > 0)
	    	{
	    		this.durability -= ((int)(Math.random() * 11)*100)/this.quality;
	    		return true;
	    	}
	    	return false;
	    }
	    
	    public Boolean Repair()
	    {
	    	if (this.maxDurability*this.quality)/100 > this.durability)
	    	{
	    		this.durability = ((this.maxDurability*100)/this.quality)(int)(Math.random() * 1.1);
	    		return true;
	    	}
	    	return false;
	    }
	    

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }

	    public Integer getQuality() {
	        return quality;
	    }

	    public void setQuality(Integer quality) {
	        this.quality = quality;
	    }
	    
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                ", якість=" + quality +
	                '}';
	    }
	}
	
	class Sailer extends Person
	{
		private Integer Stamina;
		private Integer Power;
		private Integer Experience;
		
	    public Sailer() {
	        super();
	        System.out.print("\nПустий, той хто працює веслом, був створений");
	    }

	    public Sailer(String firstname, String lastname, Integer years, Integer Stamina, Integer Power, Integer Experience) {
	        super(firstname, lastname, years);
	        this.Stamina = Stamina;
	        this.Power = Power;
	        this.Experience = Experience;
	    }

	    public Sailer(Sailer other) {
	        super(other);
	        this.Stamina = other.Stamina;
	        this.Power = other.Power;
	        this.Experience = other.Experience;
	    }

	    {
	        this.Stamina = 0;
	        this.Power = 0;
	        this.Experience = 0;
	    }

	    public Integer getStamina() {
	        return Stamina;
	    }

	    public void setStamina(Integer Stamina) {
	        this.Stamina = Stamina;
	    }

	    public Integer getPower() {
	        return Power;
	    }

	    public void setPower(Integer Power) {
	        this.Power = Power;
	    }

	    public Integer getExperience() {
	        return Experience;
	    }

	    public void setExperience(Integer Experience) {
	        this.Experience = Experience;
	    }

	    @Override
	    public String toString() {
	        return "Sailer{" +
	                "ім'я='" + getFirstname() + '\'' +
	                ", прізвище='" + getLastname() + '\'' +
	                ", вік=" + getYears() +
	                ", енергія=" + Stamina +
	                ", потужність=" + Power +
	                ", досвід=" + Experience +
	                '}';
	    }

	}
	
	class Person
	{
		private String firstname;
		private String lastname;
		private Integer years;
		
	    public Person() {
	    	System.out.print("\nПуста людина була створена");
	    }

	    public Person(String firstname, String lastname, Integer years) {
	        this.firstname = firstname;
	        this.lastname = lastname;
	        this.years = years;
	    }

	    public Person(Person other) {
	        this.firstname = other.firstname;
	        this.lastname = other.lastname;
	        this.years = other.years;
	    }

	    {
	        this.firstname = "Невідомо";
	        this.lastname = "Невідомо";
	        this.years = 0;
	    }

	    public String getFirstname() {
	        return firstname;
	    }

	    public void setFirstname(String firstname) {
	        this.firstname = firstname;
	    }

	    public String getLastname() {
	        return lastname;
	    }

	    public void setLastname(String lastname) {
	        this.lastname = lastname;
	    }

	    public Integer getYears() {
	        return years;
	    }

	    public void setYears(Integer years) {
	        this.years = years;
	    }

	    @Override
	    public String toString() {
	        return "Людина{" +
	                "ім'я='" + firstname + '\'' +
	                ", прізвище='" + lastname + '\'' +
	                ", вік=" + years +
	                '}';
	    }
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-09-08 11:57:08.564
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-09-08 11:57:08.564
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-09-08 11:57:09.497
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
/**
 * 
 */
package CI_306.Shyryi.Lab3;

import java.util.List;
import java.util.ArrayList;

/**
 * 
 */
public class BoatOnOars {
	
	private String name;
	private Boat boat;
	private PairOfOars[] pairOfOars;
	private Sailer[] sailer;
	private List<Person> passengers = new ArrayList<>();

    public BoatOnOars() {
    	System.out.print("\nПуста шлюпка на веслах була створенна");
    }

    public BoatOnOars(String name, Boat boat, PairOfOars[] pairOfOars, Sailer[] sailer, List<Person> passengers) {
        this.name = name;
        this.boat = boat;
        this.pairOfOars = pairOfOars;
        this.sailer = sailer;
        this.passengers = passengers;
    }

    public BoatOnOars(BoatOnOars other) {
        this.name = other.name;
        this.boat = new Boat(other.boat);
        this.pairOfOars = other.pairOfOars.clone();
        this.sailer = other.sailer.clone();
        this.passengers = new ArrayList<>(other.passengers);
    }

    {
        this.name = "Невідомо";
        this.boat = new Boat();
        this.pairOfOars = new PairOfOars[2];
        this.sailer = new Sailer[2];
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Boat getBoat() {
        return boat;
    }

    public void setBoat(Boat boat) {
        this.boat = boat;
    }

    public PairOfOars[] getPairOfOars() {
        return pairOfOars;
    }

    public void setPairOfOars(PairOfOars[] pairOfOars) {
        this.pairOfOars = pairOfOars;
    }

    public Sailer[] getSailer() {
        return sailer;
    }

    public void setSailer(Sailer[] sailer) {
        this.sailer = sailer;
    }

    public List<Person> getPassengers() {
        return passengers;
    }

    public void setPassengers(List<Person> passengers) {
        this.passengers = passengers;
    }
	
	class Boat 
	{
		private Deck deck;
		private Body body;

	    public Boat() {
	    	System.out.print("\nПуста шлюпка була створенна");
	    }

	    public Boat(Deck deck, Body body) {
	        this.deck = deck;
	        this.body = body;
	    }

	    public Boat(Boat other) {
	        this.deck = new Deck(other.deck);
	        this.body = new Body(other.body);
	    }

	    {
	        this.deck = new Deck();
	        this.body = new Body();
	    }

	    public Deck getDeck() {
	        return deck;
	    }

	    public void setDeck(Deck deck) {
	        this.deck = deck;
	    }

	    public Body getBody() {
	        return body;
	    }

	    public void setBody(Body body) {
	        this.body = body;
	    }
		
	}
	
	class Deck
	{
		private Integer sailorsCapacity;
		private Integer passengerCapacity;
		
		 public Deck() {
			 System.out.print("\nПуста палуба була створенна");
	    }

	    public Deck(Integer sailorsCapacity, Integer passengerCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	        this.passengerCapacity = passengerCapacity;
	    }

	    public Deck(Deck other) {
	        this.sailorsCapacity = other.sailorsCapacity;
	        this.passengerCapacity = other.passengerCapacity;
	    }

	    {
	        this.sailorsCapacity = 0;
	        this.passengerCapacity = 0;
	    }

	    public Integer getSailorsCapacity() {
	        return sailorsCapacity;
	    }

	    public void setSailorsCapacity(Integer sailorsCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	    }

	    public Integer getPassengerCapacity() {
	        return passengerCapacity;
	    }

	    public void setPassengerCapacity(Integer passengerCapacity) {
	        this.passengerCapacity = passengerCapacity;
	    }
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "кількість of sailors='" + sailorsCapacity + '\'' +
	                ", кількість пасажирів='" + passengerCapacity + '\'' +
	                '}';
	    }
	}
	
	class Body
	{
		private String material;
		private Integer durability;
		
		public Body() {
			System.out.print("\nПустий корпус був створений");
	    }

	    public Body(String material, Integer durability) {
	        this.material = material;
	        this.durability = durability;
	    }

	    public Body(Body other) {
	        this.material = other.material;
	        this.durability = other.durability;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 0;
	    }

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }
	    @Override
	    public String toString() {
	        return "Корпус{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                '}';
	    }
	}
	
	class PairOfOars
	{
		private Oar rightOar;
		private Oar leftOar;
		
	    public PairOfOars() {
	    	System.out.print("\nПуста пара весел була створенна");
	    }

	    public PairOfOars(Oar rightOar, Oar leftOar) {
	        this.rightOar = rightOar;
	        this.leftOar = leftOar;
	    }

	    public PairOfOars(PairOfOars other) {
	        this.rightOar = new Oar(other.rightOar);
	        this.leftOar = new Oar(other.leftOar);
	    }

	    {
	        this.rightOar = new Oar();
	        this.leftOar = new Oar();
	    }
	    
	    public Boolean RowingToForward
	    {
	    	return leftOar.Rowing() && rightOar.Rowing();
	    }
	    
	    public Boolean RowingToLeft
	    {
	    	return rightOar.Rowing();
	    }
	    
	    public Boolean RowingToRight
	    {
	    	return leftOar.Rowing();
	    }

	    public Oar getRightOar() {
	        return rightOar;
	    }

	    public void setRightOar(Oar rightOar) {
	        this.rightOar = rightOar;
	    }

	    public Oar getLeftOar() {
	        return leftOar;
	    }

	    public void setLeftOar(Oar leftOar) {
	        this.leftOar = leftOar;
	    }
		
	}
	
	class Oar 
	{
		private String material;
		private Integer durability;
		private Integer maxDurability;
		private Integer quality;
		
		public Oar() {
			System.out.print("\nПусте весло було створене");
	    }

	    public Oar(String material, Integer durability, Integer quality) {
	        this.material = material;
	        this.durability = durability;
	        this.quality = quality;
	    }

	    public Oar(Oar other) {
	        this.material = other.material;
	        this.durability = other.durability;
	        this.quality = other.quality;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 1000;
	        this.quality = 30;
	    }
	    
	    public Boolean Rowing()
	    {
	    	if (durability > 0)
	    	{
	    		this.durability -= ((int)(Math.random() * 11)*100)/this.quality;
	    		return true;
	    	}
	    	return false;
	    }
	    
	    public Boolean Repair()
	    {
	    	if (this.maxDurability*this.quality)/100 > this.durability)
	    	{
	    		this.durability = ((this.maxDurability*100)/this.quality)(int)(Math.random() * 1.1);
	    		return true;
	    	}
	    	return false;
	    }
	    

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }

	    public Integer getQuality() {
	        return quality;
	    }

	    public void setQuality(Integer quality) {
	        this.quality = quality;
	    }
	    
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                ", якість=" + quality +
	                '}';
	    }
	}
	
	class Sailer extends Person
	{
		private Integer Stamina;
		private Integer Power;
		private Integer Experience;
		
	    public Sailer() {
	        super();
	        System.out.print("\nПустий, той хто працює веслом, був створений");
	    }

	    public Sailer(String firstname, String lastname, Integer years, Integer Stamina, Integer Power, Integer Experience) {
	        super(firstname, lastname, years);
	        this.Stamina = Stamina;
	        this.Power = Power;
	        this.Experience = Experience;
	    }

	    public Sailer(Sailer other) {
	        super(other);
	        this.Stamina = other.Stamina;
	        this.Power = other.Power;
	        this.Experience = other.Experience;
	    }

	    {
	        this.Stamina = 0;
	        this.Power = 0;
	        this.Experience = 0;
	    }

	    public Integer getStamina() {
	        return Stamina;
	    }

	    public void setStamina(Integer Stamina) {
	        this.Stamina = Stamina;
	    }

	    public Integer getPower() {
	        return Power;
	    }

	    public void setPower(Integer Power) {
	        this.Power = Power;
	    }

	    public Integer getExperience() {
	        return Experience;
	    }

	    public void setExperience(Integer Experience) {
	        this.Experience = Experience;
	    }

	    @Override
	    public String toString() {
	        return "Sailer{" +
	                "ім'я='" + getFirstname() + '\'' +
	                ", прізвище='" + getLastname() + '\'' +
	                ", вік=" + getYears() +
	                ", енергія=" + Stamina +
	                ", потужність=" + Power +
	                ", досвід=" + Experience +
	                '}';
	    }

	}
	
	class Person
	{
		private String firstname;
		private String lastname;
		private Integer years;
		
	    public Person() {
	    	System.out.print("\nПуста людина була створена");
	    }

	    public Person(String firstname, String lastname, Integer years) {
	        this.firstname = firstname;
	        this.lastname = lastname;
	        this.years = years;
	    }

	    public Person(Person other) {
	        this.firstname = other.firstname;
	        this.lastname = other.lastname;
	        this.years = other.years;
	    }

	    {
	        this.firstname = "Невідомо";
	        this.lastname = "Невідомо";
	        this.years = 0;
	    }

	    public String getFirstname() {
	        return firstname;
	    }

	    public void setFirstname(String firstname) {
	        this.firstname = firstname;
	    }

	    public String getLastname() {
	        return lastname;
	    }

	    public void setLastname(String lastname) {
	        this.lastname = lastname;
	    }

	    public Integer getYears() {
	        return years;
	    }

	    public void setYears(Integer years) {
	        this.years = years;
	    }

	    @Override
	    public String toString() {
	        return "Людина{" +
	                "ім'я='" + firstname + '\'' +
	                ", прізвище='" + lastname + '\'' +
	                ", вік=" + years +
	                '}';
	    }
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-09-08 11:57:09.498
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-09-08 11:57:09.498
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-09-08 11:57:09.807
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
/**
 * 
 */
package CI_306.Shyryi.Lab3;

import java.util.List;
import java.util.ArrayList;

/**
 * 
 */
public class BoatOnOars {
	
	private String name;
	private Boat boat;
	private PairOfOars[] pairOfOars;
	private Sailer[] sailer;
	private List<Person> passengers = new ArrayList<>();

    public BoatOnOars() {
    	System.out.print("\nПуста шлюпка на веслах була створенна");
    }

    public BoatOnOars(String name, Boat boat, PairOfOars[] pairOfOars, Sailer[] sailer, List<Person> passengers) {
        this.name = name;
        this.boat = boat;
        this.pairOfOars = pairOfOars;
        this.sailer = sailer;
        this.passengers = passengers;
    }

    public BoatOnOars(BoatOnOars other) {
        this.name = other.name;
        this.boat = new Boat(other.boat);
        this.pairOfOars = other.pairOfOars.clone();
        this.sailer = other.sailer.clone();
        this.passengers = new ArrayList<>(other.passengers);
    }

    {
        this.name = "Невідомо";
        this.boat = new Boat();
        this.pairOfOars = new PairOfOars[2];
        this.sailer = new Sailer[2];
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Boat getBoat() {
        return boat;
    }

    public void setBoat(Boat boat) {
        this.boat = boat;
    }

    public PairOfOars[] getPairOfOars() {
        return pairOfOars;
    }

    public void setPairOfOars(PairOfOars[] pairOfOars) {
        this.pairOfOars = pairOfOars;
    }

    public Sailer[] getSailer() {
        return sailer;
    }

    public void setSailer(Sailer[] sailer) {
        this.sailer = sailer;
    }

    public List<Person> getPassengers() {
        return passengers;
    }

    public void setPassengers(List<Person> passengers) {
        this.passengers = passengers;
    }
	
	class Boat 
	{
		private Deck deck;
		private Body body;

	    public Boat() {
	    	System.out.print("\nПуста шлюпка була створенна");
	    }

	    public Boat(Deck deck, Body body) {
	        this.deck = deck;
	        this.body = body;
	    }

	    public Boat(Boat other) {
	        this.deck = new Deck(other.deck);
	        this.body = new Body(other.body);
	    }

	    {
	        this.deck = new Deck();
	        this.body = new Body();
	    }

	    public Deck getDeck() {
	        return deck;
	    }

	    public void setDeck(Deck deck) {
	        this.deck = deck;
	    }

	    public Body getBody() {
	        return body;
	    }

	    public void setBody(Body body) {
	        this.body = body;
	    }
		
	}
	
	class Deck
	{
		private Integer sailorsCapacity;
		private Integer passengerCapacity;
		
		 public Deck() {
			 System.out.print("\nПуста палуба була створенна");
	    }

	    public Deck(Integer sailorsCapacity, Integer passengerCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	        this.passengerCapacity = passengerCapacity;
	    }

	    public Deck(Deck other) {
	        this.sailorsCapacity = other.sailorsCapacity;
	        this.passengerCapacity = other.passengerCapacity;
	    }

	    {
	        this.sailorsCapacity = 0;
	        this.passengerCapacity = 0;
	    }

	    public Integer getSailorsCapacity() {
	        return sailorsCapacity;
	    }

	    public void setSailorsCapacity(Integer sailorsCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	    }

	    public Integer getPassengerCapacity() {
	        return passengerCapacity;
	    }

	    public void setPassengerCapacity(Integer passengerCapacity) {
	        this.passengerCapacity = passengerCapacity;
	    }
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "кількість of sailors='" + sailorsCapacity + '\'' +
	                ", кількість пасажирів='" + passengerCapacity + '\'' +
	                '}';
	    }
	}
	
	class Body
	{
		private String material;
		private Integer durability;
		
		public Body() {
			System.out.print("\nПустий корпус був створений");
	    }

	    public Body(String material, Integer durability) {
	        this.material = material;
	        this.durability = durability;
	    }

	    public Body(Body other) {
	        this.material = other.material;
	        this.durability = other.durability;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 0;
	    }

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }
	    @Override
	    public String toString() {
	        return "Корпус{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                '}';
	    }
	}
	
	class PairOfOars
	{
		private Oar rightOar;
		private Oar leftOar;
		
	    public PairOfOars() {
	    	System.out.print("\nПуста пара весел була створенна");
	    }

	    public PairOfOars(Oar rightOar, Oar leftOar) {
	        this.rightOar = rightOar;
	        this.leftOar = leftOar;
	    }

	    public PairOfOars(PairOfOars other) {
	        this.rightOar = new Oar(other.rightOar);
	        this.leftOar = new Oar(other.leftOar);
	    }

	    {
	        this.rightOar = new Oar();
	        this.leftOar = new Oar();
	    }
	    
	    public Boolean RowingToForward
	    {
	    	return leftOar.Rowing() && rightOar.Rowing();
	    }
	    
	    public Boolean RowingToLeft
	    {
	    	return rightOar.Rowing();
	    }
	    
	    public Boolean RowingToRight
	    {
	    	return leftOar.Rowing();
	    }

	    public Oar getRightOar() {
	        return rightOar;
	    }

	    public void setRightOar(Oar rightOar) {
	        this.rightOar = rightOar;
	    }

	    public Oar getLeftOar() {
	        return leftOar;
	    }

	    public void setLeftOar(Oar leftOar) {
	        this.leftOar = leftOar;
	    }
		
	}
	
	class Oar 
	{
		private String material;
		private Integer durability;
		private Integer maxDurability;
		private Integer quality;
		
		public Oar() {
			System.out.print("\nПусте весло було створене");
	    }

	    public Oar(String material, Integer durability, Integer quality) {
	        this.material = material;
	        this.durability = durability;
	        this.quality = quality;
	    }

	    public Oar(Oar other) {
	        this.material = other.material;
	        this.durability = other.durability;
	        this.quality = other.quality;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 1000;
	        this.quality = 30;
	    }
	    
	    public Boolean Rowing()
	    {
	    	if (durability > 0)
	    	{
	    		this.durability -= ((int)(Math.random() * 11)*100)/this.quality;
	    		return true;
	    	}
	    	return false;
	    }
	    
	    public Boolean Repair()
	    {
	    	if (this.maxDurability*this.quality)/100 > this.durability)
	    	{
	    		this.durability = ((this.maxDurability*100)/this.quality)(int)(Math.random() * 1.1);
	    		return true;
	    	}
	    	return false;
	    }
	    

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }

	    public Integer getQuality() {
	        return quality;
	    }

	    public void setQuality(Integer quality) {
	        this.quality = quality;
	    }
	    
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                ", якість=" + quality +
	                '}';
	    }
	}
	
	class Sailer extends Person
	{
		private Integer Stamina;
		private Integer Power;
		private Integer Experience;
		
	    public Sailer() {
	        super();
	        System.out.print("\nПустий, той хто працює веслом, був створений");
	    }

	    public Sailer(String firstname, String lastname, Integer years, Integer Stamina, Integer Power, Integer Experience) {
	        super(firstname, lastname, years);
	        this.Stamina = Stamina;
	        this.Power = Power;
	        this.Experience = Experience;
	    }

	    public Sailer(Sailer other) {
	        super(other);
	        this.Stamina = other.Stamina;
	        this.Power = other.Power;
	        this.Experience = other.Experience;
	    }

	    {
	        this.Stamina = 0;
	        this.Power = 0;
	        this.Experience = 0;
	    }

	    public Integer getStamina() {
	        return Stamina;
	    }

	    public void setStamina(Integer Stamina) {
	        this.Stamina = Stamina;
	    }

	    public Integer getPower() {
	        return Power;
	    }

	    public void setPower(Integer Power) {
	        this.Power = Power;
	    }

	    public Integer getExperience() {
	        return Experience;
	    }

	    public void setExperience(Integer Experience) {
	        this.Experience = Experience;
	    }

	    @Override
	    public String toString() {
	        return "Sailer{" +
	                "ім'я='" + getFirstname() + '\'' +
	                ", прізвище='" + getLastname() + '\'' +
	                ", вік=" + getYears() +
	                ", енергія=" + Stamina +
	                ", потужність=" + Power +
	                ", досвід=" + Experience +
	                '}';
	    }

	}
	
	class Person
	{
		private String firstname;
		private String lastname;
		private Integer years;
		
	    public Person() {
	    	System.out.print("\nПуста людина була створена");
	    }

	    public Person(String firstname, String lastname, Integer years) {
	        this.firstname = firstname;
	        this.lastname = lastname;
	        this.years = years;
	    }

	    public Person(Person other) {
	        this.firstname = other.firstname;
	        this.lastname = other.lastname;
	        this.years = other.years;
	    }

	    {
	        this.firstname = "Невідомо";
	        this.lastname = "Невідомо";
	        this.years = 0;
	    }

	    public String getFirstname() {
	        return firstname;
	    }

	    public void setFirstname(String firstname) {
	        this.firstname = firstname;
	    }

	    public String getLastname() {
	        return lastname;
	    }

	    public void setLastname(String lastname) {
	        this.lastname = lastname;
	    }

	    public Integer getYears() {
	        return years;
	    }

	    public void setYears(Integer years) {
	        this.years = years;
	    }

	    @Override
	    public String toString() {
	        return "Людина{" +
	                "ім'я='" + firstname + '\'' +
	                ", прізвище='" + lastname + '\'' +
	                ", вік=" + years +
	                '}';
	    }
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-09-08 11:57:09.807
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-09-08 11:57:09.808
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-09-08 11:57:31.443
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
/**
 * 
 */
package CI_306.Shyryi.Lab3;

import java.util.List;
import java.util.ArrayList;

/**
 * 
 */
public class BoatOnOars {
	
	private String name;
	private Boat boat;
	private PairOfOars[] pairOfOars;
	private Sailer[] sailer;
	private List<Person> passengers = new ArrayList<>();

    public BoatOnOars() {
    	System.out.print("\nПуста шлюпка на веслах була створенна");
    }

    public BoatOnOars(String name, Boat boat, PairOfOars[] pairOfOars, Sailer[] sailer, List<Person> passengers) {
        this.name = name;
        this.boat = boat;
        this.pairOfOars = pairOfOars;
        this.sailer = sailer;
        this.passengers = passengers;
    }

    public BoatOnOars(BoatOnOars other) {
        this.name = other.name;
        this.boat = new Boat(other.boat);
        this.pairOfOars = other.pairOfOars.clone();
        this.sailer = other.sailer.clone();
        this.passengers = new ArrayList<>(other.passengers);
    }

    {
        this.name = "Невідомо";
        this.boat = new Boat();
        this.pairOfOars = new PairOfOars[2];
        this.sailer = new Sailer[2];
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Boat getBoat() {
        return boat;
    }

    public void setBoat(Boat boat) {
        this.boat = boat;
    }

    public PairOfOars[] getPairOfOars() {
        return pairOfOars;
    }

    public void setPairOfOars(PairOfOars[] pairOfOars) {
        this.pairOfOars = pairOfOars;
    }

    public Sailer[] getSailer() {
        return sailer;
    }

    public void setSailer(Sailer[] sailer) {
        this.sailer = sailer;
    }

    public List<Person> getPassengers() {
        return passengers;
    }

    public void setPassengers(List<Person> passengers) {
        this.passengers = passengers;
    }
	
	class Boat 
	{
		private Deck deck;
		private Body body;

	    public Boat() {
	    	System.out.print("\nПуста шлюпка була створенна");
	    }

	    public Boat(Deck deck, Body body) {
	        this.deck = deck;
	        this.body = body;
	    }

	    public Boat(Boat other) {
	        this.deck = new Deck(other.deck);
	        this.body = new Body(other.body);
	    }

	    {
	        this.deck = new Deck();
	        this.body = new Body();
	    }

	    public Deck getDeck() {
	        return deck;
	    }

	    public void setDeck(Deck deck) {
	        this.deck = deck;
	    }

	    public Body getBody() {
	        return body;
	    }

	    public void setBody(Body body) {
	        this.body = body;
	    }
		
	}
	
	class Deck
	{
		private Integer sailorsCapacity;
		private Integer passengerCapacity;
		
		 public Deck() {
			 System.out.print("\nПуста палуба була створенна");
	    }

	    public Deck(Integer sailorsCapacity, Integer passengerCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	        this.passengerCapacity = passengerCapacity;
	    }

	    public Deck(Deck other) {
	        this.sailorsCapacity = other.sailorsCapacity;
	        this.passengerCapacity = other.passengerCapacity;
	    }

	    {
	        this.sailorsCapacity = 0;
	        this.passengerCapacity = 0;
	    }

	    public Integer getSailorsCapacity() {
	        return sailorsCapacity;
	    }

	    public void setSailorsCapacity(Integer sailorsCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	    }

	    public Integer getPassengerCapacity() {
	        return passengerCapacity;
	    }

	    public void setPassengerCapacity(Integer passengerCapacity) {
	        this.passengerCapacity = passengerCapacity;
	    }
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "кількість of sailors='" + sailorsCapacity + '\'' +
	                ", кількість пасажирів='" + passengerCapacity + '\'' +
	                '}';
	    }
	}
	
	class Body
	{
		private String material;
		private Integer durability;
		
		public Body() {
			System.out.print("\nПустий корпус був створений");
	    }

	    public Body(String material, Integer durability) {
	        this.material = material;
	        this.durability = durability;
	    }

	    public Body(Body other) {
	        this.material = other.material;
	        this.durability = other.durability;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 0;
	    }

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }
	    @Override
	    public String toString() {
	        return "Корпус{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                '}';
	    }
	}
	
	class PairOfOars
	{
		private Oar rightOar;
		private Oar leftOar;
		
	    public PairOfOars() {
	    	System.out.print("\nПуста пара весел була створенна");
	    }

	    public PairOfOars(Oar rightOar, Oar leftOar) {
	        this.rightOar = rightOar;
	        this.leftOar = leftOar;
	    }

	    public PairOfOars(PairOfOars other) {
	        this.rightOar = new Oar(other.rightOar);
	        this.leftOar = new Oar(other.leftOar);
	    }

	    {
	        this.rightOar = new Oar();
	        this.leftOar = new Oar();
	    }
	    
	    public Boolean RowingToForward
	    {
	    	return leftOar.Rowing() && rightOar.Rowing();
	    }
	    
	    public Boolean RowingToLeft
	    {
	    	return rightOar.Rowing();
	    }
	    
	    public Boolean RowingToRight
	    {
	    	return leftOar.Rowing();
	    }

	    public Oar getRightOar() {
	        return rightOar;
	    }

	    public void setRightOar(Oar rightOar) {
	        this.rightOar = rightOar;
	    }

	    public Oar getLeftOar() {
	        return leftOar;
	    }

	    public void setLeftOar(Oar leftOar) {
	        this.leftOar = leftOar;
	    }
		
	}
	
	class Oar 
	{
		private String material;
		private Integer durability;
		private Integer maxDurability;
		private Integer quality;
		
		public Oar() {
			System.out.print("\nПусте весло було створене");
	    }

	    public Oar(String material, Integer durability, Integer quality) {
	        this.material = material;
	        this.durability = durability;
	        this.quality = quality;
	    }

	    public Oar(Oar other) {
	        this.material = other.material;
	        this.durability = other.durability;
	        this.quality = other.quality;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 1000;
	        this.quality = 30;
	    }
	    
	    public Boolean Rowing()
	    {
	    	if (durability > 0)
	    	{
	    		this.durability -= ((int)(Math.random() * 11)*100)/this.quality;
	    		return true;
	    	}
	    	return false;
	    }
	    
	    public Boolean Repair()
	    {
	    	if (this.maxDurability*this.quality)/100 > this.durability)
	    	{
	    		this.durability = ((this.maxDurability*100)/this.quality)(int)(Math.random() * 1.1);
	    		return true;
	    	}
	    	return false;
	    }
	    

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }

	    public Integer getQuality() {
	        return quality;
	    }

	    public void setQuality(Integer quality) {
	        this.quality = quality;
	    }
	    
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                ", якість=" + quality +
	                '}';
	    }
	}
	
	class Sailer extends Person
	{
		private Integer Stamina;
		private Integer Power;
		private Integer Experience;
		
	    public Sailer() {
	        super();
	        System.out.print("\nПустий, той хто працює веслом, був створений");
	    }

	    public Sailer(String firstname, String lastname, Integer years, Integer Stamina, Integer Power, Integer Experience) {
	        super(firstname, lastname, years);
	        this.Stamina = Stamina;
	        this.Power = Power;
	        this.Experience = Experience;
	    }

	    public Sailer(Sailer other) {
	        super(other);
	        this.Stamina = other.Stamina;
	        this.Power = other.Power;
	        this.Experience = other.Experience;
	    }

	    {
	        this.Stamina = 0;
	        this.Power = 0;
	        this.Experience = 0;
	    }

	    public Integer getStamina() {
	        return Stamina;
	    }

	    public void setStamina(Integer Stamina) {
	        this.Stamina = Stamina;
	    }

	    public Integer getPower() {
	        return Power;
	    }

	    public void setPower(Integer Power) {
	        this.Power = Power;
	    }

	    public Integer getExperience() {
	        return Experience;
	    }

	    public void setExperience(Integer Experience) {
	        this.Experience = Experience;
	    }

	    @Override
	    public String toString() {
	        return "Sailer{" +
	                "ім'я='" + getFirstname() + '\'' +
	                ", прізвище='" + getLastname() + '\'' +
	                ", вік=" + getYears() +
	                ", енергія=" + Stamina +
	                ", потужність=" + Power +
	                ", досвід=" + Experience +
	                '}';
	    }

	}
	
	class Person
	{
		private String firstname;
		private String lastname;
		private Integer years;
		
	    public Person() {
	    	System.out.print("\nПуста людина була створена");
	    }

	    public Person(String firstname, String lastname, Integer years) {
	        this.firstname = firstname;
	        this.lastname = lastname;
	        this.years = years;
	    }

	    public Person(Person other) {
	        this.firstname = other.firstname;
	        this.lastname = other.lastname;
	        this.years = other.years;
	    }

	    {
	        this.firstname = "Невідомо";
	        this.lastname = "Невідомо";
	        this.years = 0;
	    }

	    public String getFirstname() {
	        return firstname;
	    }

	    public void setFirstname(String firstname) {
	        this.firstname = firstname;
	    }

	    public String getLastname() {
	        return lastname;
	    }

	    public void setLastname(String lastname) {
	        this.lastname = lastname;
	    }

	    public Integer getYears() {
	        return years;
	    }

	    public void setYears(Integer years) {
	        this.years = years;
	    }

	    @Override
	    public String toString() {
	        return "Людина{" +
	                "ім'я='" + firstname + '\'' +
	                ", прізвище='" + lastname + '\'' +
	                ", вік=" + years +
	                '}';
	    }
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-09-08 11:57:31.443
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-09-08 11:57:31.444
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-09-08 11:57:32.536
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
/**
 * 
 */
package CI_306.Shyryi.Lab3;

import java.util.List;
import java.util.ArrayList;

/**
 * 
 */
public class BoatOnOars {
	
	private String name;
	private Boat boat;
	private PairOfOars[] pairOfOars;
	private Sailer[] sailer;
	private List<Person> passengers = new ArrayList<>();

    public BoatOnOars() {
    	System.out.print("\nПуста шлюпка на веслах була створенна");
    }

    public BoatOnOars(String name, Boat boat, PairOfOars[] pairOfOars, Sailer[] sailer, List<Person> passengers) {
        this.name = name;
        this.boat = boat;
        this.pairOfOars = pairOfOars;
        this.sailer = sailer;
        this.passengers = passengers;
    }

    public BoatOnOars(BoatOnOars other) {
        this.name = other.name;
        this.boat = new Boat(other.boat);
        this.pairOfOars = other.pairOfOars.clone();
        this.sailer = other.sailer.clone();
        this.passengers = new ArrayList<>(other.passengers);
    }

    {
        this.name = "Невідомо";
        this.boat = new Boat();
        this.pairOfOars = new PairOfOars[2];
        this.sailer = new Sailer[2];
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Boat getBoat() {
        return boat;
    }

    public void setBoat(Boat boat) {
        this.boat = boat;
    }

    public PairOfOars[] getPairOfOars() {
        return pairOfOars;
    }

    public void setPairOfOars(PairOfOars[] pairOfOars) {
        this.pairOfOars = pairOfOars;
    }

    public Sailer[] getSailer() {
        return sailer;
    }

    public void setSailer(Sailer[] sailer) {
        this.sailer = sailer;
    }

    public List<Person> getPassengers() {
        return passengers;
    }

    public void setPassengers(List<Person> passengers) {
        this.passengers = passengers;
    }
	
	class Boat 
	{
		private Deck deck;
		private Body body;

	    public Boat() {
	    	System.out.print("\nПуста шлюпка була створенна");
	    }

	    public Boat(Deck deck, Body body) {
	        this.deck = deck;
	        this.body = body;
	    }

	    public Boat(Boat other) {
	        this.deck = new Deck(other.deck);
	        this.body = new Body(other.body);
	    }

	    {
	        this.deck = new Deck();
	        this.body = new Body();
	    }

	    public Deck getDeck() {
	        return deck;
	    }

	    public void setDeck(Deck deck) {
	        this.deck = deck;
	    }

	    public Body getBody() {
	        return body;
	    }

	    public void setBody(Body body) {
	        this.body = body;
	    }
		
	}
	
	class Deck
	{
		private Integer sailorsCapacity;
		private Integer passengerCapacity;
		
		 public Deck() {
			 System.out.print("\nПуста палуба була створенна");
	    }

	    public Deck(Integer sailorsCapacity, Integer passengerCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	        this.passengerCapacity = passengerCapacity;
	    }

	    public Deck(Deck other) {
	        this.sailorsCapacity = other.sailorsCapacity;
	        this.passengerCapacity = other.passengerCapacity;
	    }

	    {
	        this.sailorsCapacity = 0;
	        this.passengerCapacity = 0;
	    }

	    public Integer getSailorsCapacity() {
	        return sailorsCapacity;
	    }

	    public void setSailorsCapacity(Integer sailorsCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	    }

	    public Integer getPassengerCapacity() {
	        return passengerCapacity;
	    }

	    public void setPassengerCapacity(Integer passengerCapacity) {
	        this.passengerCapacity = passengerCapacity;
	    }
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "кількість of sailors='" + sailorsCapacity + '\'' +
	                ", кількість пасажирів='" + passengerCapacity + '\'' +
	                '}';
	    }
	}
	
	class Body
	{
		private String material;
		private Integer durability;
		
		public Body() {
			System.out.print("\nПустий корпус був створений");
	    }

	    public Body(String material, Integer durability) {
	        this.material = material;
	        this.durability = durability;
	    }

	    public Body(Body other) {
	        this.material = other.material;
	        this.durability = other.durability;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 0;
	    }

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }
	    @Override
	    public String toString() {
	        return "Корпус{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                '}';
	    }
	}
	
	class PairOfOars
	{
		private Oar rightOar;
		private Oar leftOar;
		
	    public PairOfOars() {
	    	System.out.print("\nПуста пара весел була створенна");
	    }

	    public PairOfOars(Oar rightOar, Oar leftOar) {
	        this.rightOar = rightOar;
	        this.leftOar = leftOar;
	    }

	    public PairOfOars(PairOfOars other) {
	        this.rightOar = new Oar(other.rightOar);
	        this.leftOar = new Oar(other.leftOar);
	    }

	    {
	        this.rightOar = new Oar();
	        this.leftOar = new Oar();
	    }
	    
	    public Boolean RowingToForward
	    {
	    	return leftOar.Rowing() && rightOar.Rowing();
	    }
	    
	    public Boolean RowingToLeft
	    {
	    	return rightOar.Rowing();
	    }
	    
	    public Boolean RowingToRight
	    {
	    	return leftOar.Rowing();
	    }

	    public Oar getRightOar() {
	        return rightOar;
	    }

	    public void setRightOar(Oar rightOar) {
	        this.rightOar = rightOar;
	    }

	    public Oar getLeftOar() {
	        return leftOar;
	    }

	    public void setLeftOar(Oar leftOar) {
	        this.leftOar = leftOar;
	    }
		
	}
	
	class Oar 
	{
		private String material;
		private Integer durability;
		private Integer maxDurability;
		private Integer quality;
		
		public Oar() {
			System.out.print("\nПусте весло було створене");
	    }

	    public Oar(String material, Integer durability, Integer quality) {
	        this.material = material;
	        this.durability = durability;
	        this.quality = quality;
	    }

	    public Oar(Oar other) {
	        this.material = other.material;
	        this.durability = other.durability;
	        this.quality = other.quality;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 1000;
	        this.quality = 30;
	    }
	    
	    public Boolean Rowing()
	    {
	    	if (durability > 0)
	    	{
	    		this.durability -= ((int)(Math.random() * 11)*100)/this.quality;
	    		return true;
	    	}
	    	return false;
	    }
	    
	    public Boolean Repair()
	    {
	    	if (this.maxDurability*this.quality)/100 > this.durability)
	    	{
	    		this.durability = ((this.maxDurability*100)/this.quality)(int)(Math.random() * 1.1);
	    		return true;
	    	}
	    	return false;
	    }
	    

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }

	    public Integer getQuality() {
	        return quality;
	    }

	    public void setQuality(Integer quality) {
	        this.quality = quality;
	    }
	    
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                ", якість=" + quality +
	                '}';
	    }
	}
	
	class Sailer extends Person
	{
		private Integer Stamina;
		private Integer Power;
		private Integer Experience;
		
	    public Sailer() {
	        super();
	        System.out.print("\nПустий, той хто працює веслом, був створений");
	    }

	    public Sailer(String firstname, String lastname, Integer years, Integer Stamina, Integer Power, Integer Experience) {
	        super(firstname, lastname, years);
	        this.Stamina = Stamina;
	        this.Power = Power;
	        this.Experience = Experience;
	    }

	    public Sailer(Sailer other) {
	        super(other);
	        this.Stamina = other.Stamina;
	        this.Power = other.Power;
	        this.Experience = other.Experience;
	    }

	    {
	        this.Stamina = 0;
	        this.Power = 0;
	        this.Experience = 0;
	    }

	    public Integer getStamina() {
	        return Stamina;
	    }

	    public void setStamina(Integer Stamina) {
	        this.Stamina = Stamina;
	    }

	    public Integer getPower() {
	        return Power;
	    }

	    public void setPower(Integer Power) {
	        this.Power = Power;
	    }

	    public Integer getExperience() {
	        return Experience;
	    }

	    public void setExperience(Integer Experience) {
	        this.Experience = Experience;
	    }

	    @Override
	    public String toString() {
	        return "Sailer{" +
	                "ім'я='" + getFirstname() + '\'' +
	                ", прізвище='" + getLastname() + '\'' +
	                ", вік=" + getYears() +
	                ", енергія=" + Stamina +
	                ", потужність=" + Power +
	                ", досвід=" + Experience +
	                '}';
	    }

	}
	
	class Person
	{
		private String firstname;
		private String lastname;
		private Integer years;
		
	    public Person() {
	    	System.out.print("\nПуста людина була створена");
	    }

	    public Person(String firstname, String lastname, Integer years) {
	        this.firstname = firstname;
	        this.lastname = lastname;
	        this.years = years;
	    }

	    public Person(Person other) {
	        this.firstname = other.firstname;
	        this.lastname = other.lastname;
	        this.years = other.years;
	    }

	    {
	        this.firstname = "Невідомо";
	        this.lastname = "Невідомо";
	        this.years = 0;
	    }

	    public String getFirstname() {
	        return firstname;
	    }

	    public void setFirstname(String firstname) {
	        this.firstname = firstname;
	    }

	    public String getLastname() {
	        return lastname;
	    }

	    public void setLastname(String lastname) {
	        this.lastname = lastname;
	    }

	    public Integer getYears() {
	        return years;
	    }

	    public void setYears(Integer years) {
	        this.years = years;
	    }

	    @Override
	    public String toString() {
	        return "Людина{" +
	                "ім'я='" + firstname + '\'' +
	                ", прізвище='" + lastname + '\'' +
	                ", вік=" + years +
	                '}';
	    }
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.getClipboardData(ClipboardOperationAction.java:486)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.doCutCopyWithImportsOperation(ClipboardOperationAction.java:407)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.internalDoOperation(ClipboardOperationAction.java:366)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:67)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.run(ClipboardOperationAction.java:287)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:474)
	at org.eclipse.jface.commands.ActionHandler.execute(ActionHandler.java:121)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at jdk.internal.reflect.GeneratedMethodAccessor44.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:309)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:243)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:485)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:655)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1286)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1065)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1090)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1075)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1117)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1113)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1594)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4865)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4743)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5040)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3658)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:643)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:550)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:171)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1440)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-09-08 11:57:32.537
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.getClipboardData(ClipboardOperationAction.java:486)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.doCutCopyWithImportsOperation(ClipboardOperationAction.java:407)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.internalDoOperation(ClipboardOperationAction.java:366)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:67)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.run(ClipboardOperationAction.java:287)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:474)
	at org.eclipse.jface.commands.ActionHandler.execute(ActionHandler.java:121)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at jdk.internal.reflect.GeneratedMethodAccessor44.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:309)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:243)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:485)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:655)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1286)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1065)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1090)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1075)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1117)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1113)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1594)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4865)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4743)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5040)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3658)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:643)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:550)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:171)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1440)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-09-08 11:57:32.537
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.getClipboardData(ClipboardOperationAction.java:486)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.doCutCopyWithImportsOperation(ClipboardOperationAction.java:407)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.internalDoOperation(ClipboardOperationAction.java:366)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:67)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.run(ClipboardOperationAction.java:287)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:474)
	at org.eclipse.jface.commands.ActionHandler.execute(ActionHandler.java:121)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at jdk.internal.reflect.GeneratedMethodAccessor44.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:309)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:243)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:485)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:655)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1286)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1065)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1090)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1075)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1117)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1113)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1594)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4865)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4743)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5040)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3658)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:643)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:550)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:171)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1440)

!ENTRY org.eclipse.jdt.core 4 4 2023-09-08 11:57:34.503
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
/**
 * 
 */
package CI_306.Shyryi.Lab3;

import java.util.List;
import java.util.ArrayList;

/**
 * 
 */
public class BoatOnOars {
	
	private String name;
	private Boat boat;
	private PairOfOars[] pairOfOars;
	private Sailer[] sailer;
	private List<Person> passengers = new ArrayList<>();

    public BoatOnOars() {
    	System.out.print("\nПуста шлюпка на веслах була створенна");
    }

    public BoatOnOars(String name, Boat boat, PairOfOars[] pairOfOars, Sailer[] sailer, List<Person> passengers) {
        this.name = name;
        this.boat = boat;
        this.pairOfOars = pairOfOars;
        this.sailer = sailer;
        this.passengers = passengers;
    }

    public BoatOnOars(BoatOnOars other) {
        this.name = other.name;
        this.boat = new Boat(other.boat);
        this.pairOfOars = other.pairOfOars.clone();
        this.sailer = other.sailer.clone();
        this.passengers = new ArrayList<>(other.passengers);
    }

    {
        this.name = "Невідомо";
        this.boat = new Boat();
        this.pairOfOars = new PairOfOars[2];
        this.sailer = new Sailer[2];
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Boat getBoat() {
        return boat;
    }

    public void setBoat(Boat boat) {
        this.boat = boat;
    }

    public PairOfOars[] getPairOfOars() {
        return pairOfOars;
    }

    public void setPairOfOars(PairOfOars[] pairOfOars) {
        this.pairOfOars = pairOfOars;
    }

    public Sailer[] getSailer() {
        return sailer;
    }

    public void setSailer(Sailer[] sailer) {
        this.sailer = sailer;
    }

    public List<Person> getPassengers() {
        return passengers;
    }

    public void setPassengers(List<Person> passengers) {
        this.passengers = passengers;
    }
	
	class Boat 
	{
		private Deck deck;
		private Body body;

	    public Boat() {
	    	System.out.print("\nПуста шлюпка була створенна");
	    }

	    public Boat(Deck deck, Body body) {
	        this.deck = deck;
	        this.body = body;
	    }

	    public Boat(Boat other) {
	        this.deck = new Deck(other.deck);
	        this.body = new Body(other.body);
	    }

	    {
	        this.deck = new Deck();
	        this.body = new Body();
	    }

	    public Deck getDeck() {
	        return deck;
	    }

	    public void setDeck(Deck deck) {
	        this.deck = deck;
	    }

	    public Body getBody() {
	        return body;
	    }

	    public void setBody(Body body) {
	        this.body = body;
	    }
		
	}
	
	class Deck
	{
		private Integer sailorsCapacity;
		private Integer passengerCapacity;
		
		 public Deck() {
			 System.out.print("\nПуста палуба була створенна");
	    }

	    public Deck(Integer sailorsCapacity, Integer passengerCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	        this.passengerCapacity = passengerCapacity;
	    }

	    public Deck(Deck other) {
	        this.sailorsCapacity = other.sailorsCapacity;
	        this.passengerCapacity = other.passengerCapacity;
	    }

	    {
	        this.sailorsCapacity = 0;
	        this.passengerCapacity = 0;
	    }

	    public Integer getSailorsCapacity() {
	        return sailorsCapacity;
	    }

	    public void setSailorsCapacity(Integer sailorsCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	    }

	    public Integer getPassengerCapacity() {
	        return passengerCapacity;
	    }

	    public void setPassengerCapacity(Integer passengerCapacity) {
	        this.passengerCapacity = passengerCapacity;
	    }
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "кількість of sailors='" + sailorsCapacity + '\'' +
	                ", кількість пасажирів='" + passengerCapacity + '\'' +
	                '}';
	    }
	}
	
	class Body
	{
		private String material;
		private Integer durability;
		
		public Body() {
			System.out.print("\nПустий корпус був створений");
	    }

	    public Body(String material, Integer durability) {
	        this.material = material;
	        this.durability = durability;
	    }

	    public Body(Body other) {
	        this.material = other.material;
	        this.durability = other.durability;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 0;
	    }

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }
	    @Override
	    public String toString() {
	        return "Корпус{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                '}';
	    }
	}
	
	class PairOfOars
	{
		private Oar rightOar;
		private Oar leftOar;
		
	    public PairOfOars() {
	    	System.out.print("\nПуста пара весел була створенна");
	    }

	    public PairOfOars(Oar rightOar, Oar leftOar) {
	        this.rightOar = rightOar;
	        this.leftOar = leftOar;
	    }

	    public PairOfOars(PairOfOars other) {
	        this.rightOar = new Oar(other.rightOar);
	        this.leftOar = new Oar(other.leftOar);
	    }

	    {
	        this.rightOar = new Oar();
	        this.leftOar = new Oar();
	    }
	    
	    public Boolean RowingToForward
	    {
	    	return leftOar.Rowing() && rightOar.Rowing();
	    }
	    
	    public Boolean RowingToLeft
	    {
	    	return rightOar.Rowing();
	    }
	    
	    public Boolean RowingToRight
	    {
	    	return leftOar.Rowing();
	    }

	    public Oar getRightOar() {
	        return rightOar;
	    }

	    public void setRightOar(Oar rightOar) {
	        this.rightOar = rightOar;
	    }

	    public Oar getLeftOar() {
	        return leftOar;
	    }

	    public void setLeftOar(Oar leftOar) {
	        this.leftOar = leftOar;
	    }
		
	}
	
	class Oar 
	{
		private String material;
		private Integer durability;
		private Integer maxDurability;
		private Integer quality;
		
		public Oar() {
			System.out.print("\nПусте весло було створене");
	    }

	    public Oar(String material, Integer durability, Integer quality) {
	        this.material = material;
	        this.durability = durability;
	        this.quality = quality;
	    }

	    public Oar(Oar other) {
	        this.material = other.material;
	        this.durability = other.durability;
	        this.quality = other.quality;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 1000;
	        this.quality = 30;
	    }
	    
	    public Boolean Rowing()
	    {
	    	if (durability > 0)
	    	{
	    		this.durability -= ((int)(Math.random() * 11)*100)/this.quality;
	    		return true;
	    	}
	    	return false;
	    }
	    
	    public Boolean Repair()
	    {
	    	if (this.maxDurability*this.quality)/100 > this.durability)
	    	{
	    		this.durability = ((this.maxDurability*100)/this.quality)(int)(Math.random() * 1.1);
	    		return true;
	    	}
	    	return false;
	    }
	    

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }

	    public Integer getQuality() {
	        return quality;
	    }

	    public void setQuality(Integer quality) {
	        this.quality = quality;
	    }
	    
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                ", якість=" + quality +
	                '}';
	    }
	}
	
	class Sailer extends Person
	{
		private Integer Stamina;
		private Integer Power;
		private Integer Experience;
		
	    public Sailer() {
	        super();
	        System.out.print("\nПустий, той хто працює веслом, був створений");
	    }

	    public Sailer(String firstname, String lastname, Integer years, Integer Stamina, Integer Power, Integer Experience) {
	        super(firstname, lastname, years);
	        this.Stamina = Stamina;
	        this.Power = Power;
	        this.Experience = Experience;
	    }

	    public Sailer(Sailer other) {
	        super(other);
	        this.Stamina = other.Stamina;
	        this.Power = other.Power;
	        this.Experience = other.Experience;
	    }

	    {
	        this.Stamina = 0;
	        this.Power = 0;
	        this.Experience = 0;
	    }

	    public Integer getStamina() {
	        return Stamina;
	    }

	    public void setStamina(Integer Stamina) {
	        this.Stamina = Stamina;
	    }

	    public Integer getPower() {
	        return Power;
	    }

	    public void setPower(Integer Power) {
	        this.Power = Power;
	    }

	    public Integer getExperience() {
	        return Experience;
	    }

	    public void setExperience(Integer Experience) {
	        this.Experience = Experience;
	    }

	    @Override
	    public String toString() {
	        return "Sailer{" +
	                "ім'я='" + getFirstname() + '\'' +
	                ", прізвище='" + getLastname() + '\'' +
	                ", вік=" + getYears() +
	                ", енергія=" + Stamina +
	                ", потужність=" + Power +
	                ", досвід=" + Experience +
	                '}';
	    }

	}
	
	class Person
	{
		private String firstname;
		private String lastname;
		private Integer years;
		
	    public Person() {
	    	System.out.print("\nПуста людина була створена");
	    }

	    public Person(String firstname, String lastname, Integer years) {
	        this.firstname = firstname;
	        this.lastname = lastname;
	        this.years = years;
	    }

	    public Person(Person other) {
	        this.firstname = other.firstname;
	        this.lastname = other.lastname;
	        this.years = other.years;
	    }

	    {
	        this.firstname = "Невідомо";
	        this.lastname = "Невідомо";
	        this.years = 0;
	    }

	    public String getFirstname() {
	        return firstname;
	    }

	    public void setFirstname(String firstname) {
	        this.firstname = firstname;
	    }

	    public String getLastname() {
	        return lastname;
	    }

	    public void setLastname(String lastname) {
	        this.lastname = lastname;
	    }

	    public Integer getYears() {
	        return years;
	    }

	    public void setYears(Integer years) {
	        this.years = years;
	    }

	    @Override
	    public String toString() {
	        return "Людина{" +
	                "ім'я='" + firstname + '\'' +
	                ", прізвище='" + lastname + '\'' +
	                ", вік=" + years +
	                '}';
	    }
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-09-08 11:57:34.504
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-09-08 11:57:34.504
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-09-08 11:57:36.143
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
/**
 * 
 */
package CI_306.Shyryi.Lab3;

import java.util.List;
import java.util.ArrayList;

/**
 * 
 */
public class BoatOnOars {
	
	private String name;
	private Boat boat;
	private PairOfOars[] pairOfOars;
	private Sailer[] sailer;
	private List<Person> passengers = new ArrayList<>();

    public BoatOnOars() {
    	System.out.print("\nПуста шлюпка на веслах була створенна");
    }

    public BoatOnOars(String name, Boat boat, PairOfOars[] pairOfOars, Sailer[] sailer, List<Person> passengers) {
        this.name = name;
        this.boat = boat;
        this.pairOfOars = pairOfOars;
        this.sailer = sailer;
        this.passengers = passengers;
    }

    public BoatOnOars(BoatOnOars other) {
        this.name = other.name;
        this.boat = new Boat(other.boat);
        this.pairOfOars = other.pairOfOars.clone();
        this.sailer = other.sailer.clone();
        this.passengers = new ArrayList<>(other.passengers);
    }

    {
        this.name = "Невідомо";
        this.boat = new Boat();
        this.pairOfOars = new PairOfOars[2];
        this.sailer = new Sailer[2];
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Boat getBoat() {
        return boat;
    }

    public void setBoat(Boat boat) {
        this.boat = boat;
    }

    public PairOfOars[] getPairOfOars() {
        return pairOfOars;
    }

    public void setPairOfOars(PairOfOars[] pairOfOars) {
        this.pairOfOars = pairOfOars;
    }

    public Sailer[] getSailer() {
        return sailer;
    }

    public void setSailer(Sailer[] sailer) {
        this.sailer = sailer;
    }

    public List<Person> getPassengers() {
        return passengers;
    }

    public void setPassengers(List<Person> passengers) {
        this.passengers = passengers;
    }
	
	class Boat 
	{
		private Deck deck;
		private Body body;

	    public Boat() {
	    	System.out.print("\nПуста шлюпка була створенна");
	    }

	    public Boat(Deck deck, Body body) {
	        this.deck = deck;
	        this.body = body;
	    }

	    public Boat(Boat other) {
	        this.deck = new Deck(other.deck);
	        this.body = new Body(other.body);
	    }

	    {
	        this.deck = new Deck();
	        this.body = new Body();
	    }

	    public Deck getDeck() {
	        return deck;
	    }

	    public void setDeck(Deck deck) {
	        this.deck = deck;
	    }

	    public Body getBody() {
	        return body;
	    }

	    public void setBody(Body body) {
	        this.body = body;
	    }
		
	}
	
	class Deck
	{
		private Integer sailorsCapacity;
		private Integer passengerCapacity;
		
		 public Deck() {
			 System.out.print("\nПуста палуба була створенна");
	    }

	    public Deck(Integer sailorsCapacity, Integer passengerCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	        this.passengerCapacity = passengerCapacity;
	    }

	    public Deck(Deck other) {
	        this.sailorsCapacity = other.sailorsCapacity;
	        this.passengerCapacity = other.passengerCapacity;
	    }

	    {
	        this.sailorsCapacity = 0;
	        this.passengerCapacity = 0;
	    }

	    public Integer getSailorsCapacity() {
	        return sailorsCapacity;
	    }

	    public void setSailorsCapacity(Integer sailorsCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	    }

	    public Integer getPassengerCapacity() {
	        return passengerCapacity;
	    }

	    public void setPassengerCapacity(Integer passengerCapacity) {
	        this.passengerCapacity = passengerCapacity;
	    }
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "кількість of sailors='" + sailorsCapacity + '\'' +
	                ", кількість пасажирів='" + passengerCapacity + '\'' +
	                '}';
	    }
	}
	
	class Body
	{
		private String material;
		private Integer durability;
		
		public Body() {
			System.out.print("\nПустий корпус був створений");
	    }

	    public Body(String material, Integer durability) {
	        this.material = material;
	        this.durability = durability;
	    }

	    public Body(Body other) {
	        this.material = other.material;
	        this.durability = other.durability;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 0;
	    }

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }
	    @Override
	    public String toString() {
	        return "Корпус{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                '}';
	    }
	}
	
	class PairOfOars
	{
		private Oar rightOar;
		private Oar leftOar;
		
	    public PairOfOars() {
	    	System.out.print("\nПуста пара весел була створенна");
	    }

	    public PairOfOars(Oar rightOar, Oar leftOar) {
	        this.rightOar = rightOar;
	        this.leftOar = leftOar;
	    }

	    public PairOfOars(PairOfOars other) {
	        this.rightOar = new Oar(other.rightOar);
	        this.leftOar = new Oar(other.leftOar);
	    }

	    {
	        this.rightOar = new Oar();
	        this.leftOar = new Oar();
	    }
	    
	    public Boolean RowingToForward
	    {
	    	return leftOar.Rowing() && rightOar.Rowing();
	    }
	    public Boolean RowingToForward
	    {
	    	return leftOar.Rowing() && rightOar.Rowing();
	    }
	    
	    public Boolean RowingToLeft
	    {
	    	return rightOar.Rowing();
	    }
	    
	    public Boolean RowingToRight
	    {
	    	return leftOar.Rowing();
	    }

	    public Oar getRightOar() {
	        return rightOar;
	    }

	    public void setRightOar(Oar rightOar) {
	        this.rightOar = rightOar;
	    }

	    public Oar getLeftOar() {
	        return leftOar;
	    }

	    public void setLeftOar(Oar leftOar) {
	        this.leftOar = leftOar;
	    }
		
	}
	
	class Oar 
	{
		private String material;
		private Integer durability;
		private Integer maxDurability;
		private Integer quality;
		
		public Oar() {
			System.out.print("\nПусте весло було створене");
	    }

	    public Oar(String material, Integer durability, Integer quality) {
	        this.material = material;
	        this.durability = durability;
	        this.quality = quality;
	    }

	    public Oar(Oar other) {
	        this.material = other.material;
	        this.durability = other.durability;
	        this.quality = other.quality;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 1000;
	        this.quality = 30;
	    }
	    
	    public Boolean Rowing()
	    {
	    	if (durability > 0)
	    	{
	    		this.durability -= ((int)(Math.random() * 11)*100)/this.quality;
	    		return true;
	    	}
	    	return false;
	    }
	    
	    public Boolean Repair()
	    {
	    	if (this.maxDurability*this.quality)/100 > this.durability)
	    	{
	    		this.durability = ((this.maxDurability*100)/this.quality)(int)(Math.random() * 1.1);
	    		return true;
	    	}
	    	return false;
	    }
	    

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }

	    public Integer getQuality() {
	        return quality;
	    }

	    public void setQuality(Integer quality) {
	        this.quality = quality;
	    }
	    
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                ", якість=" + quality +
	                '}';
	    }
	}
	
	class Sailer extends Person
	{
		private Integer Stamina;
		private Integer Power;
		private Integer Experience;
		
	    public Sailer() {
	        super();
	        System.out.print("\nПустий, той хто працює веслом, був створений");
	    }

	    public Sailer(String firstname, String lastname, Integer years, Integer Stamina, Integer Power, Integer Experience) {
	        super(firstname, lastname, years);
	        this.Stamina = Stamina;
	        this.Power = Power;
	        this.Experience = Experience;
	    }

	    public Sailer(Sailer other) {
	        super(other);
	        this.Stamina = other.Stamina;
	        this.Power = other.Power;
	        this.Experience = other.Experience;
	    }

	    {
	        this.Stamina = 0;
	        this.Power = 0;
	        this.Experience = 0;
	    }

	    public Integer getStamina() {
	        return Stamina;
	    }

	    public void setStamina(Integer Stamina) {
	        this.Stamina = Stamina;
	    }

	    public Integer getPower() {
	        return Power;
	    }

	    public void setPower(Integer Power) {
	        this.Power = Power;
	    }

	    public Integer getExperience() {
	        return Experience;
	    }

	    public void setExperience(Integer Experience) {
	        this.Experience = Experience;
	    }

	    @Override
	    public String toString() {
	        return "Sailer{" +
	                "ім'я='" + getFirstname() + '\'' +
	                ", прізвище='" + getLastname() + '\'' +
	                ", вік=" + getYears() +
	                ", енергія=" + Stamina +
	                ", потужність=" + Power +
	                ", досвід=" + Experience +
	                '}';
	    }

	}
	
	class Person
	{
		private String firstname;
		private String lastname;
		private Integer years;
		
	    public Person() {
	    	System.out.print("\nПуста людина була створена");
	    }

	    public Person(String firstname, String lastname, Integer years) {
	        this.firstname = firstname;
	        this.lastname = lastname;
	        this.years = years;
	    }

	    public Person(Person other) {
	        this.firstname = other.firstname;
	        this.lastname = other.lastname;
	        this.years = other.years;
	    }

	    {
	        this.firstname = "Невідомо";
	        this.lastname = "Невідомо";
	        this.years = 0;
	    }

	    public String getFirstname() {
	        return firstname;
	    }

	    public void setFirstname(String firstname) {
	        this.firstname = firstname;
	    }

	    public String getLastname() {
	        return lastname;
	    }

	    public void setLastname(String lastname) {
	        this.lastname = lastname;
	    }

	    public Integer getYears() {
	        return years;
	    }

	    public void setYears(Integer years) {
	        this.years = years;
	    }

	    @Override
	    public String toString() {
	        return "Людина{" +
	                "ім'я='" + firstname + '\'' +
	                ", прізвище='" + lastname + '\'' +
	                ", вік=" + years +
	                '}';
	    }
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-09-08 11:57:36.144
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-09-08 11:57:36.144
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-09-08 11:57:38.288
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
/**
 * 
 */
package CI_306.Shyryi.Lab3;

import java.util.List;
import java.util.ArrayList;

/**
 * 
 */
public class BoatOnOars {
	
	private String name;
	private Boat boat;
	private PairOfOars[] pairOfOars;
	private Sailer[] sailer;
	private List<Person> passengers = new ArrayList<>();

    public BoatOnOars() {
    	System.out.print("\nПуста шлюпка на веслах була створенна");
    }

    public BoatOnOars(String name, Boat boat, PairOfOars[] pairOfOars, Sailer[] sailer, List<Person> passengers) {
        this.name = name;
        this.boat = boat;
        this.pairOfOars = pairOfOars;
        this.sailer = sailer;
        this.passengers = passengers;
    }

    public BoatOnOars(BoatOnOars other) {
        this.name = other.name;
        this.boat = new Boat(other.boat);
        this.pairOfOars = other.pairOfOars.clone();
        this.sailer = other.sailer.clone();
        this.passengers = new ArrayList<>(other.passengers);
    }

    {
        this.name = "Невідомо";
        this.boat = new Boat();
        this.pairOfOars = new PairOfOars[2];
        this.sailer = new Sailer[2];
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Boat getBoat() {
        return boat;
    }

    public void setBoat(Boat boat) {
        this.boat = boat;
    }

    public PairOfOars[] getPairOfOars() {
        return pairOfOars;
    }

    public void setPairOfOars(PairOfOars[] pairOfOars) {
        this.pairOfOars = pairOfOars;
    }

    public Sailer[] getSailer() {
        return sailer;
    }

    public void setSailer(Sailer[] sailer) {
        this.sailer = sailer;
    }

    public List<Person> getPassengers() {
        return passengers;
    }

    public void setPassengers(List<Person> passengers) {
        this.passengers = passengers;
    }
	
	class Boat 
	{
		private Deck deck;
		private Body body;

	    public Boat() {
	    	System.out.print("\nПуста шлюпка була створенна");
	    }

	    public Boat(Deck deck, Body body) {
	        this.deck = deck;
	        this.body = body;
	    }

	    public Boat(Boat other) {
	        this.deck = new Deck(other.deck);
	        this.body = new Body(other.body);
	    }

	    {
	        this.deck = new Deck();
	        this.body = new Body();
	    }

	    public Deck getDeck() {
	        return deck;
	    }

	    public void setDeck(Deck deck) {
	        this.deck = deck;
	    }

	    public Body getBody() {
	        return body;
	    }

	    public void setBody(Body body) {
	        this.body = body;
	    }
		
	}
	
	class Deck
	{
		private Integer sailorsCapacity;
		private Integer passengerCapacity;
		
		 public Deck() {
			 System.out.print("\nПуста палуба була створенна");
	    }

	    public Deck(Integer sailorsCapacity, Integer passengerCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	        this.passengerCapacity = passengerCapacity;
	    }

	    public Deck(Deck other) {
	        this.sailorsCapacity = other.sailorsCapacity;
	        this.passengerCapacity = other.passengerCapacity;
	    }

	    {
	        this.sailorsCapacity = 0;
	        this.passengerCapacity = 0;
	    }

	    public Integer getSailorsCapacity() {
	        return sailorsCapacity;
	    }

	    public void setSailorsCapacity(Integer sailorsCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	    }

	    public Integer getPassengerCapacity() {
	        return passengerCapacity;
	    }

	    public void setPassengerCapacity(Integer passengerCapacity) {
	        this.passengerCapacity = passengerCapacity;
	    }
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "кількість of sailors='" + sailorsCapacity + '\'' +
	                ", кількість пасажирів='" + passengerCapacity + '\'' +
	                '}';
	    }
	}
	
	class Body
	{
		private String material;
		private Integer durability;
		
		public Body() {
			System.out.print("\nПустий корпус був створений");
	    }

	    public Body(String material, Integer durability) {
	        this.material = material;
	        this.durability = durability;
	    }

	    public Body(Body other) {
	        this.material = other.material;
	        this.durability = other.durability;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 0;
	    }

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }
	    @Override
	    public String toString() {
	        return "Корпус{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                '}';
	    }
	}
	
	class PairOfOars
	{
		private Oar rightOar;
		private Oar leftOar;
		
	    public PairOfOars() {
	    	System.out.print("\nПуста пара весел була створенна");
	    }

	    public PairOfOars(Oar rightOar, Oar leftOar) {
	        this.rightOar = rightOar;
	        this.leftOar = leftOar;
	    }

	    public PairOfOars(PairOfOars other) {
	        this.rightOar = new Oar(other.rightOar);
	        this.leftOar = new Oar(other.leftOar);
	    }

	    {
	        this.rightOar = new Oar();
	        this.leftOar = new Oar();
	    }
	    
	    public Boolean RowingToForward
	    {
	    	return leftOar.Rowing() && rightOar.Rowing();
	    }
	    
	    public Boolean RowingToForward
	    {
	    	return leftOar.Rowing() && rightOar.Rowing();
	    }
	    
	    public Boolean RowingToLeft
	    {
	    	return rightOar.Rowing();
	    }
	    
	    public Boolean RowingToRight
	    {
	    	return leftOar.Rowing();
	    }

	    public Oar getRightOar() {
	        return rightOar;
	    }

	    public void setRightOar(Oar rightOar) {
	        this.rightOar = rightOar;
	    }

	    public Oar getLeftOar() {
	        return leftOar;
	    }

	    public void setLeftOar(Oar leftOar) {
	        this.leftOar = leftOar;
	    }
		
	}
	
	class Oar 
	{
		private String material;
		private Integer durability;
		private Integer maxDurability;
		private Integer quality;
		
		public Oar() {
			System.out.print("\nПусте весло було створене");
	    }

	    public Oar(String material, Integer durability, Integer quality) {
	        this.material = material;
	        this.durability = durability;
	        this.quality = quality;
	    }

	    public Oar(Oar other) {
	        this.material = other.material;
	        this.durability = other.durability;
	        this.quality = other.quality;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 1000;
	        this.quality = 30;
	    }
	    
	    public Boolean Rowing()
	    {
	    	if (durability > 0)
	    	{
	    		this.durability -= ((int)(Math.random() * 11)*100)/this.quality;
	    		return true;
	    	}
	    	return false;
	    }
	    
	    public Boolean Repair()
	    {
	    	if (this.maxDurability*this.quality)/100 > this.durability)
	    	{
	    		this.durability = ((this.maxDurability*100)/this.quality)(int)(Math.random() * 1.1);
	    		return true;
	    	}
	    	return false;
	    }
	    

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }

	    public Integer getQuality() {
	        return quality;
	    }

	    public void setQuality(Integer quality) {
	        this.quality = quality;
	    }
	    
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                ", якість=" + quality +
	                '}';
	    }
	}
	
	class Sailer extends Person
	{
		private Integer Stamina;
		private Integer Power;
		private Integer Experience;
		
	    public Sailer() {
	        super();
	        System.out.print("\nПустий, той хто працює веслом, був створений");
	    }

	    public Sailer(String firstname, String lastname, Integer years, Integer Stamina, Integer Power, Integer Experience) {
	        super(firstname, lastname, years);
	        this.Stamina = Stamina;
	        this.Power = Power;
	        this.Experience = Experience;
	    }

	    public Sailer(Sailer other) {
	        super(other);
	        this.Stamina = other.Stamina;
	        this.Power = other.Power;
	        this.Experience = other.Experience;
	    }

	    {
	        this.Stamina = 0;
	        this.Power = 0;
	        this.Experience = 0;
	    }

	    public Integer getStamina() {
	        return Stamina;
	    }

	    public void setStamina(Integer Stamina) {
	        this.Stamina = Stamina;
	    }

	    public Integer getPower() {
	        return Power;
	    }

	    public void setPower(Integer Power) {
	        this.Power = Power;
	    }

	    public Integer getExperience() {
	        return Experience;
	    }

	    public void setExperience(Integer Experience) {
	        this.Experience = Experience;
	    }

	    @Override
	    public String toString() {
	        return "Sailer{" +
	                "ім'я='" + getFirstname() + '\'' +
	                ", прізвище='" + getLastname() + '\'' +
	                ", вік=" + getYears() +
	                ", енергія=" + Stamina +
	                ", потужність=" + Power +
	                ", досвід=" + Experience +
	                '}';
	    }

	}
	
	class Person
	{
		private String firstname;
		private String lastname;
		private Integer years;
		
	    public Person() {
	    	System.out.print("\nПуста людина була створена");
	    }

	    public Person(String firstname, String lastname, Integer years) {
	        this.firstname = firstname;
	        this.lastname = lastname;
	        this.years = years;
	    }

	    public Person(Person other) {
	        this.firstname = other.firstname;
	        this.lastname = other.lastname;
	        this.years = other.years;
	    }

	    {
	        this.firstname = "Невідомо";
	        this.lastname = "Невідомо";
	        this.years = 0;
	    }

	    public String getFirstname() {
	        return firstname;
	    }

	    public void setFirstname(String firstname) {
	        this.firstname = firstname;
	    }

	    public String getLastname() {
	        return lastname;
	    }

	    public void setLastname(String lastname) {
	        this.lastname = lastname;
	    }

	    public Integer getYears() {
	        return years;
	    }

	    public void setYears(Integer years) {
	        this.years = years;
	    }

	    @Override
	    public String toString() {
	        return "Людина{" +
	                "ім'я='" + firstname + '\'' +
	                ", прізвище='" + lastname + '\'' +
	                ", вік=" + years +
	                '}';
	    }
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-09-08 11:57:38.289
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-09-08 11:57:38.289
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-09-08 11:57:38.391
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
/**
 * 
 */
package CI_306.Shyryi.Lab3;

import java.util.List;
import java.util.ArrayList;

/**
 * 
 */
public class BoatOnOars {
	
	private String name;
	private Boat boat;
	private PairOfOars[] pairOfOars;
	private Sailer[] sailer;
	private List<Person> passengers = new ArrayList<>();

    public BoatOnOars() {
    	System.out.print("\nПуста шлюпка на веслах була створенна");
    }

    public BoatOnOars(String name, Boat boat, PairOfOars[] pairOfOars, Sailer[] sailer, List<Person> passengers) {
        this.name = name;
        this.boat = boat;
        this.pairOfOars = pairOfOars;
        this.sailer = sailer;
        this.passengers = passengers;
    }

    public BoatOnOars(BoatOnOars other) {
        this.name = other.name;
        this.boat = new Boat(other.boat);
        this.pairOfOars = other.pairOfOars.clone();
        this.sailer = other.sailer.clone();
        this.passengers = new ArrayList<>(other.passengers);
    }

    {
        this.name = "Невідомо";
        this.boat = new Boat();
        this.pairOfOars = new PairOfOars[2];
        this.sailer = new Sailer[2];
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Boat getBoat() {
        return boat;
    }

    public void setBoat(Boat boat) {
        this.boat = boat;
    }

    public PairOfOars[] getPairOfOars() {
        return pairOfOars;
    }

    public void setPairOfOars(PairOfOars[] pairOfOars) {
        this.pairOfOars = pairOfOars;
    }

    public Sailer[] getSailer() {
        return sailer;
    }

    public void setSailer(Sailer[] sailer) {
        this.sailer = sailer;
    }

    public List<Person> getPassengers() {
        return passengers;
    }

    public void setPassengers(List<Person> passengers) {
        this.passengers = passengers;
    }
	
	class Boat 
	{
		private Deck deck;
		private Body body;

	    public Boat() {
	    	System.out.print("\nПуста шлюпка була створенна");
	    }

	    public Boat(Deck deck, Body body) {
	        this.deck = deck;
	        this.body = body;
	    }

	    public Boat(Boat other) {
	        this.deck = new Deck(other.deck);
	        this.body = new Body(other.body);
	    }

	    {
	        this.deck = new Deck();
	        this.body = new Body();
	    }

	    public Deck getDeck() {
	        return deck;
	    }

	    public void setDeck(Deck deck) {
	        this.deck = deck;
	    }

	    public Body getBody() {
	        return body;
	    }

	    public void setBody(Body body) {
	        this.body = body;
	    }
		
	}
	
	class Deck
	{
		private Integer sailorsCapacity;
		private Integer passengerCapacity;
		
		 public Deck() {
			 System.out.print("\nПуста палуба була створенна");
	    }

	    public Deck(Integer sailorsCapacity, Integer passengerCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	        this.passengerCapacity = passengerCapacity;
	    }

	    public Deck(Deck other) {
	        this.sailorsCapacity = other.sailorsCapacity;
	        this.passengerCapacity = other.passengerCapacity;
	    }

	    {
	        this.sailorsCapacity = 0;
	        this.passengerCapacity = 0;
	    }

	    public Integer getSailorsCapacity() {
	        return sailorsCapacity;
	    }

	    public void setSailorsCapacity(Integer sailorsCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	    }

	    public Integer getPassengerCapacity() {
	        return passengerCapacity;
	    }

	    public void setPassengerCapacity(Integer passengerCapacity) {
	        this.passengerCapacity = passengerCapacity;
	    }
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "кількість of sailors='" + sailorsCapacity + '\'' +
	                ", кількість пасажирів='" + passengerCapacity + '\'' +
	                '}';
	    }
	}
	
	class Body
	{
		private String material;
		private Integer durability;
		
		public Body() {
			System.out.print("\nПустий корпус був створений");
	    }

	    public Body(String material, Integer durability) {
	        this.material = material;
	        this.durability = durability;
	    }

	    public Body(Body other) {
	        this.material = other.material;
	        this.durability = other.durability;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 0;
	    }

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }
	    @Override
	    public String toString() {
	        return "Корпус{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                '}';
	    }
	}
	
	class PairOfOars
	{
		private Oar rightOar;
		private Oar leftOar;
		
	    public PairOfOars() {
	    	System.out.print("\nПуста пара весел була створенна");
	    }

	    public PairOfOars(Oar rightOar, Oar leftOar) {
	        this.rightOar = rightOar;
	        this.leftOar = leftOar;
	    }

	    public PairOfOars(PairOfOars other) {
	        this.rightOar = new Oar(other.rightOar);
	        this.leftOar = new Oar(other.leftOar);
	    }

	    {
	        this.rightOar = new Oar();
	        this.leftOar = new Oar();
	    }
	    
	    public Boolean RowingToForward
	    {
	    	return leftOar.Rowing() && rightOar.Rowing();
	    }
	    
	    public Boolean RowingToForward
	    {
	    	return leftOar.Rowing() && rightOar.Rowing();
	    }
	    
	    public Boolean RowingToLeft
	    {
	    	return rightOar.Rowing();
	    }
	    
	    public Boolean RowingToRight
	    {
	    	return leftOar.Rowing();
	    }

	    public Oar getRightOar() {
	        return rightOar;
	    }

	    public void setRightOar(Oar rightOar) {
	        this.rightOar = rightOar;
	    }

	    public Oar getLeftOar() {
	        return leftOar;
	    }

	    public void setLeftOar(Oar leftOar) {
	        this.leftOar = leftOar;
	    }
		
	}
	
	class Oar 
	{
		private String material;
		private Integer durability;
		private Integer maxDurability;
		private Integer quality;
		
		public Oar() {
			System.out.print("\nПусте весло було створене");
	    }

	    public Oar(String material, Integer durability, Integer quality) {
	        this.material = material;
	        this.durability = durability;
	        this.quality = quality;
	    }

	    public Oar(Oar other) {
	        this.material = other.material;
	        this.durability = other.durability;
	        this.quality = other.quality;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 1000;
	        this.quality = 30;
	    }
	    
	    public Boolean Rowing()
	    {
	    	if (durability > 0)
	    	{
	    		this.durability -= ((int)(Math.random() * 11)*100)/this.quality;
	    		return true;
	    	}
	    	return false;
	    }
	    
	    public Boolean Repair()
	    {
	    	if (this.maxDurability*this.quality)/100 > this.durability)
	    	{
	    		this.durability = ((this.maxDurability*100)/this.quality)(int)(Math.random() * 1.1);
	    		return true;
	    	}
	    	return false;
	    }
	    

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }

	    public Integer getQuality() {
	        return quality;
	    }

	    public void setQuality(Integer quality) {
	        this.quality = quality;
	    }
	    
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                ", якість=" + quality +
	                '}';
	    }
	}
	
	class Sailer extends Person
	{
		private Integer Stamina;
		private Integer Power;
		private Integer Experience;
		
	    public Sailer() {
	        super();
	        System.out.print("\nПустий, той хто працює веслом, був створений");
	    }

	    public Sailer(String firstname, String lastname, Integer years, Integer Stamina, Integer Power, Integer Experience) {
	        super(firstname, lastname, years);
	        this.Stamina = Stamina;
	        this.Power = Power;
	        this.Experience = Experience;
	    }

	    public Sailer(Sailer other) {
	        super(other);
	        this.Stamina = other.Stamina;
	        this.Power = other.Power;
	        this.Experience = other.Experience;
	    }

	    {
	        this.Stamina = 0;
	        this.Power = 0;
	        this.Experience = 0;
	    }

	    public Integer getStamina() {
	        return Stamina;
	    }

	    public void setStamina(Integer Stamina) {
	        this.Stamina = Stamina;
	    }

	    public Integer getPower() {
	        return Power;
	    }

	    public void setPower(Integer Power) {
	        this.Power = Power;
	    }

	    public Integer getExperience() {
	        return Experience;
	    }

	    public void setExperience(Integer Experience) {
	        this.Experience = Experience;
	    }

	    @Override
	    public String toString() {
	        return "Sailer{" +
	                "ім'я='" + getFirstname() + '\'' +
	                ", прізвище='" + getLastname() + '\'' +
	                ", вік=" + getYears() +
	                ", енергія=" + Stamina +
	                ", потужність=" + Power +
	                ", досвід=" + Experience +
	                '}';
	    }

	}
	
	class Person
	{
		private String firstname;
		private String lastname;
		private Integer years;
		
	    public Person() {
	    	System.out.print("\nПуста людина була створена");
	    }

	    public Person(String firstname, String lastname, Integer years) {
	        this.firstname = firstname;
	        this.lastname = lastname;
	        this.years = years;
	    }

	    public Person(Person other) {
	        this.firstname = other.firstname;
	        this.lastname = other.lastname;
	        this.years = other.years;
	    }

	    {
	        this.firstname = "Невідомо";
	        this.lastname = "Невідомо";
	        this.years = 0;
	    }

	    public String getFirstname() {
	        return firstname;
	    }

	    public void setFirstname(String firstname) {
	        this.firstname = firstname;
	    }

	    public String getLastname() {
	        return lastname;
	    }

	    public void setLastname(String lastname) {
	        this.lastname = lastname;
	    }

	    public Integer getYears() {
	        return years;
	    }

	    public void setYears(Integer years) {
	        this.years = years;
	    }

	    @Override
	    public String toString() {
	        return "Людина{" +
	                "ім'я='" + firstname + '\'' +
	                ", прізвище='" + lastname + '\'' +
	                ", вік=" + years +
	                '}';
	    }
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-09-08 11:57:38.392
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-09-08 11:57:38.392
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-09-08 11:57:39.060
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
/**
 * 
 */
package CI_306.Shyryi.Lab3;

import java.util.List;
import java.util.ArrayList;

/**
 * 
 */
public class BoatOnOars {
	
	private String name;
	private Boat boat;
	private PairOfOars[] pairOfOars;
	private Sailer[] sailer;
	private List<Person> passengers = new ArrayList<>();

    public BoatOnOars() {
    	System.out.print("\nПуста шлюпка на веслах була створенна");
    }

    public BoatOnOars(String name, Boat boat, PairOfOars[] pairOfOars, Sailer[] sailer, List<Person> passengers) {
        this.name = name;
        this.boat = boat;
        this.pairOfOars = pairOfOars;
        this.sailer = sailer;
        this.passengers = passengers;
    }

    public BoatOnOars(BoatOnOars other) {
        this.name = other.name;
        this.boat = new Boat(other.boat);
        this.pairOfOars = other.pairOfOars.clone();
        this.sailer = other.sailer.clone();
        this.passengers = new ArrayList<>(other.passengers);
    }

    {
        this.name = "Невідомо";
        this.boat = new Boat();
        this.pairOfOars = new PairOfOars[2];
        this.sailer = new Sailer[2];
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Boat getBoat() {
        return boat;
    }

    public void setBoat(Boat boat) {
        this.boat = boat;
    }

    public PairOfOars[] getPairOfOars() {
        return pairOfOars;
    }

    public void setPairOfOars(PairOfOars[] pairOfOars) {
        this.pairOfOars = pairOfOars;
    }

    public Sailer[] getSailer() {
        return sailer;
    }

    public void setSailer(Sailer[] sailer) {
        this.sailer = sailer;
    }

    public List<Person> getPassengers() {
        return passengers;
    }

    public void setPassengers(List<Person> passengers) {
        this.passengers = passengers;
    }
	
	class Boat 
	{
		private Deck deck;
		private Body body;

	    public Boat() {
	    	System.out.print("\nПуста шлюпка була створенна");
	    }

	    public Boat(Deck deck, Body body) {
	        this.deck = deck;
	        this.body = body;
	    }

	    public Boat(Boat other) {
	        this.deck = new Deck(other.deck);
	        this.body = new Body(other.body);
	    }

	    {
	        this.deck = new Deck();
	        this.body = new Body();
	    }

	    public Deck getDeck() {
	        return deck;
	    }

	    public void setDeck(Deck deck) {
	        this.deck = deck;
	    }

	    public Body getBody() {
	        return body;
	    }

	    public void setBody(Body body) {
	        this.body = body;
	    }
		
	}
	
	class Deck
	{
		private Integer sailorsCapacity;
		private Integer passengerCapacity;
		
		 public Deck() {
			 System.out.print("\nПуста палуба була створенна");
	    }

	    public Deck(Integer sailorsCapacity, Integer passengerCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	        this.passengerCapacity = passengerCapacity;
	    }

	    public Deck(Deck other) {
	        this.sailorsCapacity = other.sailorsCapacity;
	        this.passengerCapacity = other.passengerCapacity;
	    }

	    {
	        this.sailorsCapacity = 0;
	        this.passengerCapacity = 0;
	    }

	    public Integer getSailorsCapacity() {
	        return sailorsCapacity;
	    }

	    public void setSailorsCapacity(Integer sailorsCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	    }

	    public Integer getPassengerCapacity() {
	        return passengerCapacity;
	    }

	    public void setPassengerCapacity(Integer passengerCapacity) {
	        this.passengerCapacity = passengerCapacity;
	    }
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "кількість of sailors='" + sailorsCapacity + '\'' +
	                ", кількість пасажирів='" + passengerCapacity + '\'' +
	                '}';
	    }
	}
	
	class Body
	{
		private String material;
		private Integer durability;
		
		public Body() {
			System.out.print("\nПустий корпус був створений");
	    }

	    public Body(String material, Integer durability) {
	        this.material = material;
	        this.durability = durability;
	    }

	    public Body(Body other) {
	        this.material = other.material;
	        this.durability = other.durability;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 0;
	    }

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }
	    @Override
	    public String toString() {
	        return "Корпус{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                '}';
	    }
	}
	
	class PairOfOars
	{
		private Oar rightOar;
		private Oar leftOar;
		
	    public PairOfOars() {
	    	System.out.print("\nПуста пара весел була створенна");
	    }

	    public PairOfOars(Oar rightOar, Oar leftOar) {
	        this.rightOar = rightOar;
	        this.leftOar = leftOar;
	    }

	    public PairOfOars(PairOfOars other) {
	        this.rightOar = new Oar(other.rightOar);
	        this.leftOar = new Oar(other.leftOar);
	    }

	    {
	        this.rightOar = new Oar();
	        this.leftOar = new Oar();
	    }
	    
	    public Boolean RowingToForward
	    {
	    	return leftOar.Rowing() && rightOar.Rowing();
	    }
	    
	    public Boolean RowingToForward
	    {
	    	return leftOar.Rowing() && rightOar.Rowing();
	    }
	    
	    public Boolean RowingToLeft
	    {
	    	return rightOar.Rowing();
	    }
	    
	    public Boolean RowingToRight
	    {
	    	return leftOar.Rowing();
	    }

	    public Oar getRightOar() {
	        return rightOar;
	    }

	    public void setRightOar(Oar rightOar) {
	        this.rightOar = rightOar;
	    }

	    public Oar getLeftOar() {
	        return leftOar;
	    }

	    public void setLeftOar(Oar leftOar) {
	        this.leftOar = leftOar;
	    }
		
	}
	
	class Oar 
	{
		private String material;
		private Integer durability;
		private Integer maxDurability;
		private Integer quality;
		
		public Oar() {
			System.out.print("\nПусте весло було створене");
	    }

	    public Oar(String material, Integer durability, Integer quality) {
	        this.material = material;
	        this.durability = durability;
	        this.quality = quality;
	    }

	    public Oar(Oar other) {
	        this.material = other.material;
	        this.durability = other.durability;
	        this.quality = other.quality;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 1000;
	        this.quality = 30;
	    }
	    
	    public Boolean Rowing()
	    {
	    	if (durability > 0)
	    	{
	    		this.durability -= ((int)(Math.random() * 11)*100)/this.quality;
	    		return true;
	    	}
	    	return false;
	    }
	    
	    public Boolean Repair()
	    {
	    	if (this.maxDurability*this.quality)/100 > this.durability)
	    	{
	    		this.durability = ((this.maxDurability*100)/this.quality)(int)(Math.random() * 1.1);
	    		return true;
	    	}
	    	return false;
	    }
	    

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }

	    public Integer getQuality() {
	        return quality;
	    }

	    public void setQuality(Integer quality) {
	        this.quality = quality;
	    }
	    
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                ", якість=" + quality +
	                '}';
	    }
	}
	
	class Sailer extends Person
	{
		private Integer Stamina;
		private Integer Power;
		private Integer Experience;
		
	    public Sailer() {
	        super();
	        System.out.print("\nПустий, той хто працює веслом, був створений");
	    }

	    public Sailer(String firstname, String lastname, Integer years, Integer Stamina, Integer Power, Integer Experience) {
	        super(firstname, lastname, years);
	        this.Stamina = Stamina;
	        this.Power = Power;
	        this.Experience = Experience;
	    }

	    public Sailer(Sailer other) {
	        super(other);
	        this.Stamina = other.Stamina;
	        this.Power = other.Power;
	        this.Experience = other.Experience;
	    }

	    {
	        this.Stamina = 0;
	        this.Power = 0;
	        this.Experience = 0;
	    }

	    public Integer getStamina() {
	        return Stamina;
	    }

	    public void setStamina(Integer Stamina) {
	        this.Stamina = Stamina;
	    }

	    public Integer getPower() {
	        return Power;
	    }

	    public void setPower(Integer Power) {
	        this.Power = Power;
	    }

	    public Integer getExperience() {
	        return Experience;
	    }

	    public void setExperience(Integer Experience) {
	        this.Experience = Experience;
	    }

	    @Override
	    public String toString() {
	        return "Sailer{" +
	                "ім'я='" + getFirstname() + '\'' +
	                ", прізвище='" + getLastname() + '\'' +
	                ", вік=" + getYears() +
	                ", енергія=" + Stamina +
	                ", потужність=" + Power +
	                ", досвід=" + Experience +
	                '}';
	    }

	}
	
	class Person
	{
		private String firstname;
		private String lastname;
		private Integer years;
		
	    public Person() {
	    	System.out.print("\nПуста людина була створена");
	    }

	    public Person(String firstname, String lastname, Integer years) {
	        this.firstname = firstname;
	        this.lastname = lastname;
	        this.years = years;
	    }

	    public Person(Person other) {
	        this.firstname = other.firstname;
	        this.lastname = other.lastname;
	        this.years = other.years;
	    }

	    {
	        this.firstname = "Невідомо";
	        this.lastname = "Невідомо";
	        this.years = 0;
	    }

	    public String getFirstname() {
	        return firstname;
	    }

	    public void setFirstname(String firstname) {
	        this.firstname = firstname;
	    }

	    public String getLastname() {
	        return lastname;
	    }

	    public void setLastname(String lastname) {
	        this.lastname = lastname;
	    }

	    public Integer getYears() {
	        return years;
	    }

	    public void setYears(Integer years) {
	        this.years = years;
	    }

	    @Override
	    public String toString() {
	        return "Людина{" +
	                "ім'я='" + firstname + '\'' +
	                ", прізвище='" + lastname + '\'' +
	                ", вік=" + years +
	                '}';
	    }
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-09-08 11:57:39.061
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-09-08 11:57:39.061
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-09-08 11:57:41.541
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
/**
 * 
 */
package CI_306.Shyryi.Lab3;

import java.util.List;
import java.util.ArrayList;

/**
 * 
 */
public class BoatOnOars {
	
	private String name;
	private Boat boat;
	private PairOfOars[] pairOfOars;
	private Sailer[] sailer;
	private List<Person> passengers = new ArrayList<>();

    public BoatOnOars() {
    	System.out.print("\nПуста шлюпка на веслах була створенна");
    }

    public BoatOnOars(String name, Boat boat, PairOfOars[] pairOfOars, Sailer[] sailer, List<Person> passengers) {
        this.name = name;
        this.boat = boat;
        this.pairOfOars = pairOfOars;
        this.sailer = sailer;
        this.passengers = passengers;
    }

    public BoatOnOars(BoatOnOars other) {
        this.name = other.name;
        this.boat = new Boat(other.boat);
        this.pairOfOars = other.pairOfOars.clone();
        this.sailer = other.sailer.clone();
        this.passengers = new ArrayList<>(other.passengers);
    }

    {
        this.name = "Невідомо";
        this.boat = new Boat();
        this.pairOfOars = new PairOfOars[2];
        this.sailer = new Sailer[2];
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Boat getBoat() {
        return boat;
    }

    public void setBoat(Boat boat) {
        this.boat = boat;
    }

    public PairOfOars[] getPairOfOars() {
        return pairOfOars;
    }

    public void setPairOfOars(PairOfOars[] pairOfOars) {
        this.pairOfOars = pairOfOars;
    }

    public Sailer[] getSailer() {
        return sailer;
    }

    public void setSailer(Sailer[] sailer) {
        this.sailer = sailer;
    }

    public List<Person> getPassengers() {
        return passengers;
    }

    public void setPassengers(List<Person> passengers) {
        this.passengers = passengers;
    }
	
	class Boat 
	{
		private Deck deck;
		private Body body;

	    public Boat() {
	    	System.out.print("\nПуста шлюпка була створенна");
	    }

	    public Boat(Deck deck, Body body) {
	        this.deck = deck;
	        this.body = body;
	    }

	    public Boat(Boat other) {
	        this.deck = new Deck(other.deck);
	        this.body = new Body(other.body);
	    }

	    {
	        this.deck = new Deck();
	        this.body = new Body();
	    }

	    public Deck getDeck() {
	        return deck;
	    }

	    public void setDeck(Deck deck) {
	        this.deck = deck;
	    }

	    public Body getBody() {
	        return body;
	    }

	    public void setBody(Body body) {
	        this.body = body;
	    }
		
	}
	
	class Deck
	{
		private Integer sailorsCapacity;
		private Integer passengerCapacity;
		
		 public Deck() {
			 System.out.print("\nПуста палуба була створенна");
	    }

	    public Deck(Integer sailorsCapacity, Integer passengerCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	        this.passengerCapacity = passengerCapacity;
	    }

	    public Deck(Deck other) {
	        this.sailorsCapacity = other.sailorsCapacity;
	        this.passengerCapacity = other.passengerCapacity;
	    }

	    {
	        this.sailorsCapacity = 0;
	        this.passengerCapacity = 0;
	    }

	    public Integer getSailorsCapacity() {
	        return sailorsCapacity;
	    }

	    public void setSailorsCapacity(Integer sailorsCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	    }

	    public Integer getPassengerCapacity() {
	        return passengerCapacity;
	    }

	    public void setPassengerCapacity(Integer passengerCapacity) {
	        this.passengerCapacity = passengerCapacity;
	    }
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "кількість of sailors='" + sailorsCapacity + '\'' +
	                ", кількість пасажирів='" + passengerCapacity + '\'' +
	                '}';
	    }
	}
	
	class Body
	{
		private String material;
		private Integer durability;
		
		public Body() {
			System.out.print("\nПустий корпус був створений");
	    }

	    public Body(String material, Integer durability) {
	        this.material = material;
	        this.durability = durability;
	    }

	    public Body(Body other) {
	        this.material = other.material;
	        this.durability = other.durability;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 0;
	    }

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }
	    @Override
	    public String toString() {
	        return "Корпус{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                '}';
	    }
	}
	
	class PairOfOars
	{
		private Oar rightOar;
		private Oar leftOar;
		
	    public PairOfOars() {
	    	System.out.print("\nПуста пара весел була створенна");
	    }

	    public PairOfOars(Oar rightOar, Oar leftOar) {
	        this.rightOar = rightOar;
	        this.leftOar = leftOar;
	    }

	    public PairOfOars(PairOfOars other) {
	        this.rightOar = new Oar(other.rightOar);
	        this.leftOar = new Oar(other.leftOar);
	    }

	    {
	        this.rightOar = new Oar();
	        this.leftOar = new Oar();
	    }
	    
	    public Boolean RowingToForward
	    {
	    	return leftOar.Rowing() && rightOar.Rowing();
	    }
	    
	    public Boolean RowingToForward
	    {
	    	return leftOar.Rowing() && rightOar.Rowing();
	    }
	    
	    public Boolean RowingToLeft
	    {
	    	return rightOar.Rowing();
	    }
	    
	    public Boolean RowingToRight
	    {
	    	return leftOar.Rowing();
	    }

	    public Oar getRightOar() {
	        return rightOar;
	    }

	    public void setRightOar(Oar rightOar) {
	        this.rightOar = rightOar;
	    }

	    public Oar getLeftOar() {
	        return leftOar;
	    }

	    public void setLeftOar(Oar leftOar) {
	        this.leftOar = leftOar;
	    }
		
	}
	
	class Oar 
	{
		private String material;
		private Integer durability;
		private Integer maxDurability;
		private Integer quality;
		
		public Oar() {
			System.out.print("\nПусте весло було створене");
	    }

	    public Oar(String material, Integer durability, Integer quality) {
	        this.material = material;
	        this.durability = durability;
	        this.quality = quality;
	    }

	    public Oar(Oar other) {
	        this.material = other.material;
	        this.durability = other.durability;
	        this.quality = other.quality;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 1000;
	        this.quality = 30;
	    }
	    
	    public Boolean Rowing()
	    {
	    	if (durability > 0)
	    	{
	    		this.durability -= ((int)(Math.random() * 11)*100)/this.quality;
	    		return true;
	    	}
	    	return false;
	    }
	    
	    public Boolean Repair()
	    {
	    	if (this.maxDurability*this.quality)/100 > this.durability)
	    	{
	    		this.durability = ((this.maxDurability*100)/this.quality)(int)(Math.random() * 1.1);
	    		return true;
	    	}
	    	return false;
	    }
	    

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }

	    public Integer getQuality() {
	        return quality;
	    }

	    public void setQuality(Integer quality) {
	        this.quality = quality;
	    }
	    
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                ", якість=" + quality +
	                '}';
	    }
	}
	
	class Sailer extends Person
	{
		private Integer Stamina;
		private Integer Power;
		private Integer Experience;
		
	    public Sailer() {
	        super();
	        System.out.print("\nПустий, той хто працює веслом, був створений");
	    }

	    public Sailer(String firstname, String lastname, Integer years, Integer Stamina, Integer Power, Integer Experience) {
	        super(firstname, lastname, years);
	        this.Stamina = Stamina;
	        this.Power = Power;
	        this.Experience = Experience;
	    }

	    public Sailer(Sailer other) {
	        super(other);
	        this.Stamina = other.Stamina;
	        this.Power = other.Power;
	        this.Experience = other.Experience;
	    }

	    {
	        this.Stamina = 0;
	        this.Power = 0;
	        this.Experience = 0;
	    }

	    public Integer getStamina() {
	        return Stamina;
	    }

	    public void setStamina(Integer Stamina) {
	        this.Stamina = Stamina;
	    }

	    public Integer getPower() {
	        return Power;
	    }

	    public void setPower(Integer Power) {
	        this.Power = Power;
	    }

	    public Integer getExperience() {
	        return Experience;
	    }

	    public void setExperience(Integer Experience) {
	        this.Experience = Experience;
	    }

	    @Override
	    public String toString() {
	        return "Sailer{" +
	                "ім'я='" + getFirstname() + '\'' +
	                ", прізвище='" + getLastname() + '\'' +
	                ", вік=" + getYears() +
	                ", енергія=" + Stamina +
	                ", потужність=" + Power +
	                ", досвід=" + Experience +
	                '}';
	    }

	}
	
	class Person
	{
		private String firstname;
		private String lastname;
		private Integer years;
		
	    public Person() {
	    	System.out.print("\nПуста людина була створена");
	    }

	    public Person(String firstname, String lastname, Integer years) {
	        this.firstname = firstname;
	        this.lastname = lastname;
	        this.years = years;
	    }

	    public Person(Person other) {
	        this.firstname = other.firstname;
	        this.lastname = other.lastname;
	        this.years = other.years;
	    }

	    {
	        this.firstname = "Невідомо";
	        this.lastname = "Невідомо";
	        this.years = 0;
	    }

	    public String getFirstname() {
	        return firstname;
	    }

	    public void setFirstname(String firstname) {
	        this.firstname = firstname;
	    }

	    public String getLastname() {
	        return lastname;
	    }

	    public void setLastname(String lastname) {
	        this.lastname = lastname;
	    }

	    public Integer getYears() {
	        return years;
	    }

	    public void setYears(Integer years) {
	        this.years = years;
	    }

	    @Override
	    public String toString() {
	        return "Людина{" +
	                "ім'я='" + firstname + '\'' +
	                ", прізвище='" + lastname + '\'' +
	                ", вік=" + years +
	                '}';
	    }
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-09-08 11:57:41.543
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-09-08 11:57:41.545
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-09-08 11:57:43.067
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
/**
 * 
 */
package CI_306.Shyryi.Lab3;

import java.util.List;
import java.util.ArrayList;

/**
 * 
 */
public class BoatOnOars {
	
	private String name;
	private Boat boat;
	private PairOfOars[] pairOfOars;
	private Sailer[] sailer;
	private List<Person> passengers = new ArrayList<>();

    public BoatOnOars() {
    	System.out.print("\nПуста шлюпка на веслах була створенна");
    }

    public BoatOnOars(String name, Boat boat, PairOfOars[] pairOfOars, Sailer[] sailer, List<Person> passengers) {
        this.name = name;
        this.boat = boat;
        this.pairOfOars = pairOfOars;
        this.sailer = sailer;
        this.passengers = passengers;
    }

    public BoatOnOars(BoatOnOars other) {
        this.name = other.name;
        this.boat = new Boat(other.boat);
        this.pairOfOars = other.pairOfOars.clone();
        this.sailer = other.sailer.clone();
        this.passengers = new ArrayList<>(other.passengers);
    }

    {
        this.name = "Невідомо";
        this.boat = new Boat();
        this.pairOfOars = new PairOfOars[2];
        this.sailer = new Sailer[2];
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Boat getBoat() {
        return boat;
    }

    public void setBoat(Boat boat) {
        this.boat = boat;
    }

    public PairOfOars[] getPairOfOars() {
        return pairOfOars;
    }

    public void setPairOfOars(PairOfOars[] pairOfOars) {
        this.pairOfOars = pairOfOars;
    }

    public Sailer[] getSailer() {
        return sailer;
    }

    public void setSailer(Sailer[] sailer) {
        this.sailer = sailer;
    }

    public List<Person> getPassengers() {
        return passengers;
    }

    public void setPassengers(List<Person> passengers) {
        this.passengers = passengers;
    }
	
	class Boat 
	{
		private Deck deck;
		private Body body;

	    public Boat() {
	    	System.out.print("\nПуста шлюпка була створенна");
	    }

	    public Boat(Deck deck, Body body) {
	        this.deck = deck;
	        this.body = body;
	    }

	    public Boat(Boat other) {
	        this.deck = new Deck(other.deck);
	        this.body = new Body(other.body);
	    }

	    {
	        this.deck = new Deck();
	        this.body = new Body();
	    }

	    public Deck getDeck() {
	        return deck;
	    }

	    public void setDeck(Deck deck) {
	        this.deck = deck;
	    }

	    public Body getBody() {
	        return body;
	    }

	    public void setBody(Body body) {
	        this.body = body;
	    }
		
	}
	
	class Deck
	{
		private Integer sailorsCapacity;
		private Integer passengerCapacity;
		
		 public Deck() {
			 System.out.print("\nПуста палуба була створенна");
	    }

	    public Deck(Integer sailorsCapacity, Integer passengerCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	        this.passengerCapacity = passengerCapacity;
	    }

	    public Deck(Deck other) {
	        this.sailorsCapacity = other.sailorsCapacity;
	        this.passengerCapacity = other.passengerCapacity;
	    }

	    {
	        this.sailorsCapacity = 0;
	        this.passengerCapacity = 0;
	    }

	    public Integer getSailorsCapacity() {
	        return sailorsCapacity;
	    }

	    public void setSailorsCapacity(Integer sailorsCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	    }

	    public Integer getPassengerCapacity() {
	        return passengerCapacity;
	    }

	    public void setPassengerCapacity(Integer passengerCapacity) {
	        this.passengerCapacity = passengerCapacity;
	    }
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "кількість of sailors='" + sailorsCapacity + '\'' +
	                ", кількість пасажирів='" + passengerCapacity + '\'' +
	                '}';
	    }
	}
	
	class Body
	{
		private String material;
		private Integer durability;
		
		public Body() {
			System.out.print("\nПустий корпус був створений");
	    }

	    public Body(String material, Integer durability) {
	        this.material = material;
	        this.durability = durability;
	    }

	    public Body(Body other) {
	        this.material = other.material;
	        this.durability = other.durability;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 0;
	    }

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }
	    @Override
	    public String toString() {
	        return "Корпус{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                '}';
	    }
	}
	
	class PairOfOars
	{
		private Oar rightOar;
		private Oar leftOar;
		
	    public PairOfOars() {
	    	System.out.print("\nПуста пара весел була створенна");
	    }

	    public PairOfOars(Oar rightOar, Oar leftOar) {
	        this.rightOar = rightOar;
	        this.leftOar = leftOar;
	    }

	    public PairOfOars(PairOfOars other) {
	        this.rightOar = new Oar(other.rightOar);
	        this.leftOar = new Oar(other.leftOar);
	    }

	    {
	        this.rightOar = new Oar();
	        this.leftOar = new Oar();
	    }
	    
	    public Boolean RowingToForward
	    {
	    	return leftOar.Rowing() && rightOar.Rowing();
	    }
	    
	    public Boolean RowingTo
	    {
	    	return leftOar.Rowing() && rightOar.Rowing();
	    }
	    
	    public Boolean RowingToLeft
	    {
	    	return rightOar.Rowing();
	    }
	    
	    public Boolean RowingToRight
	    {
	    	return leftOar.Rowing();
	    }

	    public Oar getRightOar() {
	        return rightOar;
	    }

	    public void setRightOar(Oar rightOar) {
	        this.rightOar = rightOar;
	    }

	    public Oar getLeftOar() {
	        return leftOar;
	    }

	    public void setLeftOar(Oar leftOar) {
	        this.leftOar = leftOar;
	    }
		
	}
	
	class Oar 
	{
		private String material;
		private Integer durability;
		private Integer maxDurability;
		private Integer quality;
		
		public Oar() {
			System.out.print("\nПусте весло було створене");
	    }

	    public Oar(String material, Integer durability, Integer quality) {
	        this.material = material;
	        this.durability = durability;
	        this.quality = quality;
	    }

	    public Oar(Oar other) {
	        this.material = other.material;
	        this.durability = other.durability;
	        this.quality = other.quality;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 1000;
	        this.quality = 30;
	    }
	    
	    public Boolean Rowing()
	    {
	    	if (durability > 0)
	    	{
	    		this.durability -= ((int)(Math.random() * 11)*100)/this.quality;
	    		return true;
	    	}
	    	return false;
	    }
	    
	    public Boolean Repair()
	    {
	    	if (this.maxDurability*this.quality)/100 > this.durability)
	    	{
	    		this.durability = ((this.maxDurability*100)/this.quality)(int)(Math.random() * 1.1);
	    		return true;
	    	}
	    	return false;
	    }
	    

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }

	    public Integer getQuality() {
	        return quality;
	    }

	    public void setQuality(Integer quality) {
	        this.quality = quality;
	    }
	    
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                ", якість=" + quality +
	                '}';
	    }
	}
	
	class Sailer extends Person
	{
		private Integer Stamina;
		private Integer Power;
		private Integer Experience;
		
	    public Sailer() {
	        super();
	        System.out.print("\nПустий, той хто працює веслом, був створений");
	    }

	    public Sailer(String firstname, String lastname, Integer years, Integer Stamina, Integer Power, Integer Experience) {
	        super(firstname, lastname, years);
	        this.Stamina = Stamina;
	        this.Power = Power;
	        this.Experience = Experience;
	    }

	    public Sailer(Sailer other) {
	        super(other);
	        this.Stamina = other.Stamina;
	        this.Power = other.Power;
	        this.Experience = other.Experience;
	    }

	    {
	        this.Stamina = 0;
	        this.Power = 0;
	        this.Experience = 0;
	    }

	    public Integer getStamina() {
	        return Stamina;
	    }

	    public void setStamina(Integer Stamina) {
	        this.Stamina = Stamina;
	    }

	    public Integer getPower() {
	        return Power;
	    }

	    public void setPower(Integer Power) {
	        this.Power = Power;
	    }

	    public Integer getExperience() {
	        return Experience;
	    }

	    public void setExperience(Integer Experience) {
	        this.Experience = Experience;
	    }

	    @Override
	    public String toString() {
	        return "Sailer{" +
	                "ім'я='" + getFirstname() + '\'' +
	                ", прізвище='" + getLastname() + '\'' +
	                ", вік=" + getYears() +
	                ", енергія=" + Stamina +
	                ", потужність=" + Power +
	                ", досвід=" + Experience +
	                '}';
	    }

	}
	
	class Person
	{
		private String firstname;
		private String lastname;
		private Integer years;
		
	    public Person() {
	    	System.out.print("\nПуста людина була створена");
	    }

	    public Person(String firstname, String lastname, Integer years) {
	        this.firstname = firstname;
	        this.lastname = lastname;
	        this.years = years;
	    }

	    public Person(Person other) {
	        this.firstname = other.firstname;
	        this.lastname = other.lastname;
	        this.years = other.years;
	    }

	    {
	        this.firstname = "Невідомо";
	        this.lastname = "Невідомо";
	        this.years = 0;
	    }

	    public String getFirstname() {
	        return firstname;
	    }

	    public void setFirstname(String firstname) {
	        this.firstname = firstname;
	    }

	    public String getLastname() {
	        return lastname;
	    }

	    public void setLastname(String lastname) {
	        this.lastname = lastname;
	    }

	    public Integer getYears() {
	        return years;
	    }

	    public void setYears(Integer years) {
	        this.years = years;
	    }

	    @Override
	    public String toString() {
	        return "Людина{" +
	                "ім'я='" + firstname + '\'' +
	                ", прізвище='" + lastname + '\'' +
	                ", вік=" + years +
	                '}';
	    }
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-09-08 11:57:43.068
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-09-08 11:57:43.068
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-09-08 11:57:43.138
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
/**
 * 
 */
package CI_306.Shyryi.Lab3;

import java.util.List;
import java.util.ArrayList;

/**
 * 
 */
public class BoatOnOars {
	
	private String name;
	private Boat boat;
	private PairOfOars[] pairOfOars;
	private Sailer[] sailer;
	private List<Person> passengers = new ArrayList<>();

    public BoatOnOars() {
    	System.out.print("\nПуста шлюпка на веслах була створенна");
    }

    public BoatOnOars(String name, Boat boat, PairOfOars[] pairOfOars, Sailer[] sailer, List<Person> passengers) {
        this.name = name;
        this.boat = boat;
        this.pairOfOars = pairOfOars;
        this.sailer = sailer;
        this.passengers = passengers;
    }

    public BoatOnOars(BoatOnOars other) {
        this.name = other.name;
        this.boat = new Boat(other.boat);
        this.pairOfOars = other.pairOfOars.clone();
        this.sailer = other.sailer.clone();
        this.passengers = new ArrayList<>(other.passengers);
    }

    {
        this.name = "Невідомо";
        this.boat = new Boat();
        this.pairOfOars = new PairOfOars[2];
        this.sailer = new Sailer[2];
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Boat getBoat() {
        return boat;
    }

    public void setBoat(Boat boat) {
        this.boat = boat;
    }

    public PairOfOars[] getPairOfOars() {
        return pairOfOars;
    }

    public void setPairOfOars(PairOfOars[] pairOfOars) {
        this.pairOfOars = pairOfOars;
    }

    public Sailer[] getSailer() {
        return sailer;
    }

    public void setSailer(Sailer[] sailer) {
        this.sailer = sailer;
    }

    public List<Person> getPassengers() {
        return passengers;
    }

    public void setPassengers(List<Person> passengers) {
        this.passengers = passengers;
    }
	
	class Boat 
	{
		private Deck deck;
		private Body body;

	    public Boat() {
	    	System.out.print("\nПуста шлюпка була створенна");
	    }

	    public Boat(Deck deck, Body body) {
	        this.deck = deck;
	        this.body = body;
	    }

	    public Boat(Boat other) {
	        this.deck = new Deck(other.deck);
	        this.body = new Body(other.body);
	    }

	    {
	        this.deck = new Deck();
	        this.body = new Body();
	    }

	    public Deck getDeck() {
	        return deck;
	    }

	    public void setDeck(Deck deck) {
	        this.deck = deck;
	    }

	    public Body getBody() {
	        return body;
	    }

	    public void setBody(Body body) {
	        this.body = body;
	    }
		
	}
	
	class Deck
	{
		private Integer sailorsCapacity;
		private Integer passengerCapacity;
		
		 public Deck() {
			 System.out.print("\nПуста палуба була створенна");
	    }

	    public Deck(Integer sailorsCapacity, Integer passengerCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	        this.passengerCapacity = passengerCapacity;
	    }

	    public Deck(Deck other) {
	        this.sailorsCapacity = other.sailorsCapacity;
	        this.passengerCapacity = other.passengerCapacity;
	    }

	    {
	        this.sailorsCapacity = 0;
	        this.passengerCapacity = 0;
	    }

	    public Integer getSailorsCapacity() {
	        return sailorsCapacity;
	    }

	    public void setSailorsCapacity(Integer sailorsCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	    }

	    public Integer getPassengerCapacity() {
	        return passengerCapacity;
	    }

	    public void setPassengerCapacity(Integer passengerCapacity) {
	        this.passengerCapacity = passengerCapacity;
	    }
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "кількість of sailors='" + sailorsCapacity + '\'' +
	                ", кількість пасажирів='" + passengerCapacity + '\'' +
	                '}';
	    }
	}
	
	class Body
	{
		private String material;
		private Integer durability;
		
		public Body() {
			System.out.print("\nПустий корпус був створений");
	    }

	    public Body(String material, Integer durability) {
	        this.material = material;
	        this.durability = durability;
	    }

	    public Body(Body other) {
	        this.material = other.material;
	        this.durability = other.durability;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 0;
	    }

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }
	    @Override
	    public String toString() {
	        return "Корпус{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                '}';
	    }
	}
	
	class PairOfOars
	{
		private Oar rightOar;
		private Oar leftOar;
		
	    public PairOfOars() {
	    	System.out.print("\nПуста пара весел була створенна");
	    }

	    public PairOfOars(Oar rightOar, Oar leftOar) {
	        this.rightOar = rightOar;
	        this.leftOar = leftOar;
	    }

	    public PairOfOars(PairOfOars other) {
	        this.rightOar = new Oar(other.rightOar);
	        this.leftOar = new Oar(other.leftOar);
	    }

	    {
	        this.rightOar = new Oar();
	        this.leftOar = new Oar();
	    }
	    
	    public Boolean RowingToForward
	    {
	    	return leftOar.Rowing() && rightOar.Rowing();
	    }
	    
	    public Boolean RowingTo
	    {
	    	return leftOar.Rowing() && rightOar.Rowing();
	    }
	    
	    public Boolean RowingToLeft
	    {
	    	return rightOar.Rowing();
	    }
	    
	    public Boolean RowingToRight
	    {
	    	return leftOar.Rowing();
	    }

	    public Oar getRightOar() {
	        return rightOar;
	    }

	    public void setRightOar(Oar rightOar) {
	        this.rightOar = rightOar;
	    }

	    public Oar getLeftOar() {
	        return leftOar;
	    }

	    public void setLeftOar(Oar leftOar) {
	        this.leftOar = leftOar;
	    }
		
	}
	
	class Oar 
	{
		private String material;
		private Integer durability;
		private Integer maxDurability;
		private Integer quality;
		
		public Oar() {
			System.out.print("\nПусте весло було створене");
	    }

	    public Oar(String material, Integer durability, Integer quality) {
	        this.material = material;
	        this.durability = durability;
	        this.quality = quality;
	    }

	    public Oar(Oar other) {
	        this.material = other.material;
	        this.durability = other.durability;
	        this.quality = other.quality;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 1000;
	        this.quality = 30;
	    }
	    
	    public Boolean Rowing()
	    {
	    	if (durability > 0)
	    	{
	    		this.durability -= ((int)(Math.random() * 11)*100)/this.quality;
	    		return true;
	    	}
	    	return false;
	    }
	    
	    public Boolean Repair()
	    {
	    	if (this.maxDurability*this.quality)/100 > this.durability)
	    	{
	    		this.durability = ((this.maxDurability*100)/this.quality)(int)(Math.random() * 1.1);
	    		return true;
	    	}
	    	return false;
	    }
	    

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }

	    public Integer getQuality() {
	        return quality;
	    }

	    public void setQuality(Integer quality) {
	        this.quality = quality;
	    }
	    
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                ", якість=" + quality +
	                '}';
	    }
	}
	
	class Sailer extends Person
	{
		private Integer Stamina;
		private Integer Power;
		private Integer Experience;
		
	    public Sailer() {
	        super();
	        System.out.print("\nПустий, той хто працює веслом, був створений");
	    }

	    public Sailer(String firstname, String lastname, Integer years, Integer Stamina, Integer Power, Integer Experience) {
	        super(firstname, lastname, years);
	        this.Stamina = Stamina;
	        this.Power = Power;
	        this.Experience = Experience;
	    }

	    public Sailer(Sailer other) {
	        super(other);
	        this.Stamina = other.Stamina;
	        this.Power = other.Power;
	        this.Experience = other.Experience;
	    }

	    {
	        this.Stamina = 0;
	        this.Power = 0;
	        this.Experience = 0;
	    }

	    public Integer getStamina() {
	        return Stamina;
	    }

	    public void setStamina(Integer Stamina) {
	        this.Stamina = Stamina;
	    }

	    public Integer getPower() {
	        return Power;
	    }

	    public void setPower(Integer Power) {
	        this.Power = Power;
	    }

	    public Integer getExperience() {
	        return Experience;
	    }

	    public void setExperience(Integer Experience) {
	        this.Experience = Experience;
	    }

	    @Override
	    public String toString() {
	        return "Sailer{" +
	                "ім'я='" + getFirstname() + '\'' +
	                ", прізвище='" + getLastname() + '\'' +
	                ", вік=" + getYears() +
	                ", енергія=" + Stamina +
	                ", потужність=" + Power +
	                ", досвід=" + Experience +
	                '}';
	    }

	}
	
	class Person
	{
		private String firstname;
		private String lastname;
		private Integer years;
		
	    public Person() {
	    	System.out.print("\nПуста людина була створена");
	    }

	    public Person(String firstname, String lastname, Integer years) {
	        this.firstname = firstname;
	        this.lastname = lastname;
	        this.years = years;
	    }

	    public Person(Person other) {
	        this.firstname = other.firstname;
	        this.lastname = other.lastname;
	        this.years = other.years;
	    }

	    {
	        this.firstname = "Невідомо";
	        this.lastname = "Невідомо";
	        this.years = 0;
	    }

	    public String getFirstname() {
	        return firstname;
	    }

	    public void setFirstname(String firstname) {
	        this.firstname = firstname;
	    }

	    public String getLastname() {
	        return lastname;
	    }

	    public void setLastname(String lastname) {
	        this.lastname = lastname;
	    }

	    public Integer getYears() {
	        return years;
	    }

	    public void setYears(Integer years) {
	        this.years = years;
	    }

	    @Override
	    public String toString() {
	        return "Людина{" +
	                "ім'я='" + firstname + '\'' +
	                ", прізвище='" + lastname + '\'' +
	                ", вік=" + years +
	                '}';
	    }
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-09-08 11:57:43.139
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-09-08 11:57:43.139
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-09-08 11:57:44.507
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
/**
 * 
 */
package CI_306.Shyryi.Lab3;

import java.util.List;
import java.util.ArrayList;

/**
 * 
 */
public class BoatOnOars {
	
	private String name;
	private Boat boat;
	private PairOfOars[] pairOfOars;
	private Sailer[] sailer;
	private List<Person> passengers = new ArrayList<>();

    public BoatOnOars() {
    	System.out.print("\nПуста шлюпка на веслах була створенна");
    }

    public BoatOnOars(String name, Boat boat, PairOfOars[] pairOfOars, Sailer[] sailer, List<Person> passengers) {
        this.name = name;
        this.boat = boat;
        this.pairOfOars = pairOfOars;
        this.sailer = sailer;
        this.passengers = passengers;
    }

    public BoatOnOars(BoatOnOars other) {
        this.name = other.name;
        this.boat = new Boat(other.boat);
        this.pairOfOars = other.pairOfOars.clone();
        this.sailer = other.sailer.clone();
        this.passengers = new ArrayList<>(other.passengers);
    }

    {
        this.name = "Невідомо";
        this.boat = new Boat();
        this.pairOfOars = new PairOfOars[2];
        this.sailer = new Sailer[2];
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Boat getBoat() {
        return boat;
    }

    public void setBoat(Boat boat) {
        this.boat = boat;
    }

    public PairOfOars[] getPairOfOars() {
        return pairOfOars;
    }

    public void setPairOfOars(PairOfOars[] pairOfOars) {
        this.pairOfOars = pairOfOars;
    }

    public Sailer[] getSailer() {
        return sailer;
    }

    public void setSailer(Sailer[] sailer) {
        this.sailer = sailer;
    }

    public List<Person> getPassengers() {
        return passengers;
    }

    public void setPassengers(List<Person> passengers) {
        this.passengers = passengers;
    }
	
	class Boat 
	{
		private Deck deck;
		private Body body;

	    public Boat() {
	    	System.out.print("\nПуста шлюпка була створенна");
	    }

	    public Boat(Deck deck, Body body) {
	        this.deck = deck;
	        this.body = body;
	    }

	    public Boat(Boat other) {
	        this.deck = new Deck(other.deck);
	        this.body = new Body(other.body);
	    }

	    {
	        this.deck = new Deck();
	        this.body = new Body();
	    }

	    public Deck getDeck() {
	        return deck;
	    }

	    public void setDeck(Deck deck) {
	        this.deck = deck;
	    }

	    public Body getBody() {
	        return body;
	    }

	    public void setBody(Body body) {
	        this.body = body;
	    }
		
	}
	
	class Deck
	{
		private Integer sailorsCapacity;
		private Integer passengerCapacity;
		
		 public Deck() {
			 System.out.print("\nПуста палуба була створенна");
	    }

	    public Deck(Integer sailorsCapacity, Integer passengerCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	        this.passengerCapacity = passengerCapacity;
	    }

	    public Deck(Deck other) {
	        this.sailorsCapacity = other.sailorsCapacity;
	        this.passengerCapacity = other.passengerCapacity;
	    }

	    {
	        this.sailorsCapacity = 0;
	        this.passengerCapacity = 0;
	    }

	    public Integer getSailorsCapacity() {
	        return sailorsCapacity;
	    }

	    public void setSailorsCapacity(Integer sailorsCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	    }

	    public Integer getPassengerCapacity() {
	        return passengerCapacity;
	    }

	    public void setPassengerCapacity(Integer passengerCapacity) {
	        this.passengerCapacity = passengerCapacity;
	    }
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "кількість of sailors='" + sailorsCapacity + '\'' +
	                ", кількість пасажирів='" + passengerCapacity + '\'' +
	                '}';
	    }
	}
	
	class Body
	{
		private String material;
		private Integer durability;
		
		public Body() {
			System.out.print("\nПустий корпус був створений");
	    }

	    public Body(String material, Integer durability) {
	        this.material = material;
	        this.durability = durability;
	    }

	    public Body(Body other) {
	        this.material = other.material;
	        this.durability = other.durability;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 0;
	    }

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }
	    @Override
	    public String toString() {
	        return "Корпус{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                '}';
	    }
	}
	
	class PairOfOars
	{
		private Oar rightOar;
		private Oar leftOar;
		
	    public PairOfOars() {
	    	System.out.print("\nПуста пара весел була створенна");
	    }

	    public PairOfOars(Oar rightOar, Oar leftOar) {
	        this.rightOar = rightOar;
	        this.leftOar = leftOar;
	    }

	    public PairOfOars(PairOfOars other) {
	        this.rightOar = new Oar(other.rightOar);
	        this.leftOar = new Oar(other.leftOar);
	    }

	    {
	        this.rightOar = new Oar();
	        this.leftOar = new Oar();
	    }
	    
	    public Boolean RowingToForward
	    {
	    	return leftOar.Rowing() && rightOar.Rowing();
	    }
	    
	    public Boolean RowingToBac
	    {
	    	return leftOar.Rowing() && rightOar.Rowing();
	    }
	    
	    public Boolean RowingToLeft
	    {
	    	return rightOar.Rowing();
	    }
	    
	    public Boolean RowingToRight
	    {
	    	return leftOar.Rowing();
	    }

	    public Oar getRightOar() {
	        return rightOar;
	    }

	    public void setRightOar(Oar rightOar) {
	        this.rightOar = rightOar;
	    }

	    public Oar getLeftOar() {
	        return leftOar;
	    }

	    public void setLeftOar(Oar leftOar) {
	        this.leftOar = leftOar;
	    }
		
	}
	
	class Oar 
	{
		private String material;
		private Integer durability;
		private Integer maxDurability;
		private Integer quality;
		
		public Oar() {
			System.out.print("\nПусте весло було створене");
	    }

	    public Oar(String material, Integer durability, Integer quality) {
	        this.material = material;
	        this.durability = durability;
	        this.quality = quality;
	    }

	    public Oar(Oar other) {
	        this.material = other.material;
	        this.durability = other.durability;
	        this.quality = other.quality;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 1000;
	        this.quality = 30;
	    }
	    
	    public Boolean Rowing()
	    {
	    	if (durability > 0)
	    	{
	    		this.durability -= ((int)(Math.random() * 11)*100)/this.quality;
	    		return true;
	    	}
	    	return false;
	    }
	    
	    public Boolean Repair()
	    {
	    	if (this.maxDurability*this.quality)/100 > this.durability)
	    	{
	    		this.durability = ((this.maxDurability*100)/this.quality)(int)(Math.random() * 1.1);
	    		return true;
	    	}
	    	return false;
	    }
	    

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }

	    public Integer getQuality() {
	        return quality;
	    }

	    public void setQuality(Integer quality) {
	        this.quality = quality;
	    }
	    
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                ", якість=" + quality +
	                '}';
	    }
	}
	
	class Sailer extends Person
	{
		private Integer Stamina;
		private Integer Power;
		private Integer Experience;
		
	    public Sailer() {
	        super();
	        System.out.print("\nПустий, той хто працює веслом, був створений");
	    }

	    public Sailer(String firstname, String lastname, Integer years, Integer Stamina, Integer Power, Integer Experience) {
	        super(firstname, lastname, years);
	        this.Stamina = Stamina;
	        this.Power = Power;
	        this.Experience = Experience;
	    }

	    public Sailer(Sailer other) {
	        super(other);
	        this.Stamina = other.Stamina;
	        this.Power = other.Power;
	        this.Experience = other.Experience;
	    }

	    {
	        this.Stamina = 0;
	        this.Power = 0;
	        this.Experience = 0;
	    }

	    public Integer getStamina() {
	        return Stamina;
	    }

	    public void setStamina(Integer Stamina) {
	        this.Stamina = Stamina;
	    }

	    public Integer getPower() {
	        return Power;
	    }

	    public void setPower(Integer Power) {
	        this.Power = Power;
	    }

	    public Integer getExperience() {
	        return Experience;
	    }

	    public void setExperience(Integer Experience) {
	        this.Experience = Experience;
	    }

	    @Override
	    public String toString() {
	        return "Sailer{" +
	                "ім'я='" + getFirstname() + '\'' +
	                ", прізвище='" + getLastname() + '\'' +
	                ", вік=" + getYears() +
	                ", енергія=" + Stamina +
	                ", потужність=" + Power +
	                ", досвід=" + Experience +
	                '}';
	    }

	}
	
	class Person
	{
		private String firstname;
		private String lastname;
		private Integer years;
		
	    public Person() {
	    	System.out.print("\nПуста людина була створена");
	    }

	    public Person(String firstname, String lastname, Integer years) {
	        this.firstname = firstname;
	        this.lastname = lastname;
	        this.years = years;
	    }

	    public Person(Person other) {
	        this.firstname = other.firstname;
	        this.lastname = other.lastname;
	        this.years = other.years;
	    }

	    {
	        this.firstname = "Невідомо";
	        this.lastname = "Невідомо";
	        this.years = 0;
	    }

	    public String getFirstname() {
	        return firstname;
	    }

	    public void setFirstname(String firstname) {
	        this.firstname = firstname;
	    }

	    public String getLastname() {
	        return lastname;
	    }

	    public void setLastname(String lastname) {
	        this.lastname = lastname;
	    }

	    public Integer getYears() {
	        return years;
	    }

	    public void setYears(Integer years) {
	        this.years = years;
	    }

	    @Override
	    public String toString() {
	        return "Людина{" +
	                "ім'я='" + firstname + '\'' +
	                ", прізвище='" + lastname + '\'' +
	                ", вік=" + years +
	                '}';
	    }
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-09-08 11:57:44.508
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-09-08 11:57:44.508
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-09-08 11:57:44.582
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
/**
 * 
 */
package CI_306.Shyryi.Lab3;

import java.util.List;
import java.util.ArrayList;

/**
 * 
 */
public class BoatOnOars {
	
	private String name;
	private Boat boat;
	private PairOfOars[] pairOfOars;
	private Sailer[] sailer;
	private List<Person> passengers = new ArrayList<>();

    public BoatOnOars() {
    	System.out.print("\nПуста шлюпка на веслах була створенна");
    }

    public BoatOnOars(String name, Boat boat, PairOfOars[] pairOfOars, Sailer[] sailer, List<Person> passengers) {
        this.name = name;
        this.boat = boat;
        this.pairOfOars = pairOfOars;
        this.sailer = sailer;
        this.passengers = passengers;
    }

    public BoatOnOars(BoatOnOars other) {
        this.name = other.name;
        this.boat = new Boat(other.boat);
        this.pairOfOars = other.pairOfOars.clone();
        this.sailer = other.sailer.clone();
        this.passengers = new ArrayList<>(other.passengers);
    }

    {
        this.name = "Невідомо";
        this.boat = new Boat();
        this.pairOfOars = new PairOfOars[2];
        this.sailer = new Sailer[2];
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Boat getBoat() {
        return boat;
    }

    public void setBoat(Boat boat) {
        this.boat = boat;
    }

    public PairOfOars[] getPairOfOars() {
        return pairOfOars;
    }

    public void setPairOfOars(PairOfOars[] pairOfOars) {
        this.pairOfOars = pairOfOars;
    }

    public Sailer[] getSailer() {
        return sailer;
    }

    public void setSailer(Sailer[] sailer) {
        this.sailer = sailer;
    }

    public List<Person> getPassengers() {
        return passengers;
    }

    public void setPassengers(List<Person> passengers) {
        this.passengers = passengers;
    }
	
	class Boat 
	{
		private Deck deck;
		private Body body;

	    public Boat() {
	    	System.out.print("\nПуста шлюпка була створенна");
	    }

	    public Boat(Deck deck, Body body) {
	        this.deck = deck;
	        this.body = body;
	    }

	    public Boat(Boat other) {
	        this.deck = new Deck(other.deck);
	        this.body = new Body(other.body);
	    }

	    {
	        this.deck = new Deck();
	        this.body = new Body();
	    }

	    public Deck getDeck() {
	        return deck;
	    }

	    public void setDeck(Deck deck) {
	        this.deck = deck;
	    }

	    public Body getBody() {
	        return body;
	    }

	    public void setBody(Body body) {
	        this.body = body;
	    }
		
	}
	
	class Deck
	{
		private Integer sailorsCapacity;
		private Integer passengerCapacity;
		
		 public Deck() {
			 System.out.print("\nПуста палуба була створенна");
	    }

	    public Deck(Integer sailorsCapacity, Integer passengerCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	        this.passengerCapacity = passengerCapacity;
	    }

	    public Deck(Deck other) {
	        this.sailorsCapacity = other.sailorsCapacity;
	        this.passengerCapacity = other.passengerCapacity;
	    }

	    {
	        this.sailorsCapacity = 0;
	        this.passengerCapacity = 0;
	    }

	    public Integer getSailorsCapacity() {
	        return sailorsCapacity;
	    }

	    public void setSailorsCapacity(Integer sailorsCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	    }

	    public Integer getPassengerCapacity() {
	        return passengerCapacity;
	    }

	    public void setPassengerCapacity(Integer passengerCapacity) {
	        this.passengerCapacity = passengerCapacity;
	    }
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "кількість of sailors='" + sailorsCapacity + '\'' +
	                ", кількість пасажирів='" + passengerCapacity + '\'' +
	                '}';
	    }
	}
	
	class Body
	{
		private String material;
		private Integer durability;
		
		public Body() {
			System.out.print("\nПустий корпус був створений");
	    }

	    public Body(String material, Integer durability) {
	        this.material = material;
	        this.durability = durability;
	    }

	    public Body(Body other) {
	        this.material = other.material;
	        this.durability = other.durability;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 0;
	    }

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }
	    @Override
	    public String toString() {
	        return "Корпус{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                '}';
	    }
	}
	
	class PairOfOars
	{
		private Oar rightOar;
		private Oar leftOar;
		
	    public PairOfOars() {
	    	System.out.print("\nПуста пара весел була створенна");
	    }

	    public PairOfOars(Oar rightOar, Oar leftOar) {
	        this.rightOar = rightOar;
	        this.leftOar = leftOar;
	    }

	    public PairOfOars(PairOfOars other) {
	        this.rightOar = new Oar(other.rightOar);
	        this.leftOar = new Oar(other.leftOar);
	    }

	    {
	        this.rightOar = new Oar();
	        this.leftOar = new Oar();
	    }
	    
	    public Boolean RowingToForward
	    {
	    	return leftOar.Rowing() && rightOar.Rowing();
	    }
	    
	    public Boolean RowingToBac
	    {
	    	return leftOar.Rowing() && rightOar.Rowing();
	    }
	    
	    public Boolean RowingToLeft
	    {
	    	return rightOar.Rowing();
	    }
	    
	    public Boolean RowingToRight
	    {
	    	return leftOar.Rowing();
	    }

	    public Oar getRightOar() {
	        return rightOar;
	    }

	    public void setRightOar(Oar rightOar) {
	        this.rightOar = rightOar;
	    }

	    public Oar getLeftOar() {
	        return leftOar;
	    }

	    public void setLeftOar(Oar leftOar) {
	        this.leftOar = leftOar;
	    }
		
	}
	
	class Oar 
	{
		private String material;
		private Integer durability;
		private Integer maxDurability;
		private Integer quality;
		
		public Oar() {
			System.out.print("\nПусте весло було створене");
	    }

	    public Oar(String material, Integer durability, Integer quality) {
	        this.material = material;
	        this.durability = durability;
	        this.quality = quality;
	    }

	    public Oar(Oar other) {
	        this.material = other.material;
	        this.durability = other.durability;
	        this.quality = other.quality;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 1000;
	        this.quality = 30;
	    }
	    
	    public Boolean Rowing()
	    {
	    	if (durability > 0)
	    	{
	    		this.durability -= ((int)(Math.random() * 11)*100)/this.quality;
	    		return true;
	    	}
	    	return false;
	    }
	    
	    public Boolean Repair()
	    {
	    	if (this.maxDurability*this.quality)/100 > this.durability)
	    	{
	    		this.durability = ((this.maxDurability*100)/this.quality)(int)(Math.random() * 1.1);
	    		return true;
	    	}
	    	return false;
	    }
	    

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }

	    public Integer getQuality() {
	        return quality;
	    }

	    public void setQuality(Integer quality) {
	        this.quality = quality;
	    }
	    
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                ", якість=" + quality +
	                '}';
	    }
	}
	
	class Sailer extends Person
	{
		private Integer Stamina;
		private Integer Power;
		private Integer Experience;
		
	    public Sailer() {
	        super();
	        System.out.print("\nПустий, той хто працює веслом, був створений");
	    }

	    public Sailer(String firstname, String lastname, Integer years, Integer Stamina, Integer Power, Integer Experience) {
	        super(firstname, lastname, years);
	        this.Stamina = Stamina;
	        this.Power = Power;
	        this.Experience = Experience;
	    }

	    public Sailer(Sailer other) {
	        super(other);
	        this.Stamina = other.Stamina;
	        this.Power = other.Power;
	        this.Experience = other.Experience;
	    }

	    {
	        this.Stamina = 0;
	        this.Power = 0;
	        this.Experience = 0;
	    }

	    public Integer getStamina() {
	        return Stamina;
	    }

	    public void setStamina(Integer Stamina) {
	        this.Stamina = Stamina;
	    }

	    public Integer getPower() {
	        return Power;
	    }

	    public void setPower(Integer Power) {
	        this.Power = Power;
	    }

	    public Integer getExperience() {
	        return Experience;
	    }

	    public void setExperience(Integer Experience) {
	        this.Experience = Experience;
	    }

	    @Override
	    public String toString() {
	        return "Sailer{" +
	                "ім'я='" + getFirstname() + '\'' +
	                ", прізвище='" + getLastname() + '\'' +
	                ", вік=" + getYears() +
	                ", енергія=" + Stamina +
	                ", потужність=" + Power +
	                ", досвід=" + Experience +
	                '}';
	    }

	}
	
	class Person
	{
		private String firstname;
		private String lastname;
		private Integer years;
		
	    public Person() {
	    	System.out.print("\nПуста людина була створена");
	    }

	    public Person(String firstname, String lastname, Integer years) {
	        this.firstname = firstname;
	        this.lastname = lastname;
	        this.years = years;
	    }

	    public Person(Person other) {
	        this.firstname = other.firstname;
	        this.lastname = other.lastname;
	        this.years = other.years;
	    }

	    {
	        this.firstname = "Невідомо";
	        this.lastname = "Невідомо";
	        this.years = 0;
	    }

	    public String getFirstname() {
	        return firstname;
	    }

	    public void setFirstname(String firstname) {
	        this.firstname = firstname;
	    }

	    public String getLastname() {
	        return lastname;
	    }

	    public void setLastname(String lastname) {
	        this.lastname = lastname;
	    }

	    public Integer getYears() {
	        return years;
	    }

	    public void setYears(Integer years) {
	        this.years = years;
	    }

	    @Override
	    public String toString() {
	        return "Людина{" +
	                "ім'я='" + firstname + '\'' +
	                ", прізвище='" + lastname + '\'' +
	                ", вік=" + years +
	                '}';
	    }
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-09-08 11:57:44.582
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-09-08 11:57:44.583
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-09-08 11:57:45.202
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
/**
 * 
 */
package CI_306.Shyryi.Lab3;

import java.util.List;
import java.util.ArrayList;

/**
 * 
 */
public class BoatOnOars {
	
	private String name;
	private Boat boat;
	private PairOfOars[] pairOfOars;
	private Sailer[] sailer;
	private List<Person> passengers = new ArrayList<>();

    public BoatOnOars() {
    	System.out.print("\nПуста шлюпка на веслах була створенна");
    }

    public BoatOnOars(String name, Boat boat, PairOfOars[] pairOfOars, Sailer[] sailer, List<Person> passengers) {
        this.name = name;
        this.boat = boat;
        this.pairOfOars = pairOfOars;
        this.sailer = sailer;
        this.passengers = passengers;
    }

    public BoatOnOars(BoatOnOars other) {
        this.name = other.name;
        this.boat = new Boat(other.boat);
        this.pairOfOars = other.pairOfOars.clone();
        this.sailer = other.sailer.clone();
        this.passengers = new ArrayList<>(other.passengers);
    }

    {
        this.name = "Невідомо";
        this.boat = new Boat();
        this.pairOfOars = new PairOfOars[2];
        this.sailer = new Sailer[2];
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Boat getBoat() {
        return boat;
    }

    public void setBoat(Boat boat) {
        this.boat = boat;
    }

    public PairOfOars[] getPairOfOars() {
        return pairOfOars;
    }

    public void setPairOfOars(PairOfOars[] pairOfOars) {
        this.pairOfOars = pairOfOars;
    }

    public Sailer[] getSailer() {
        return sailer;
    }

    public void setSailer(Sailer[] sailer) {
        this.sailer = sailer;
    }

    public List<Person> getPassengers() {
        return passengers;
    }

    public void setPassengers(List<Person> passengers) {
        this.passengers = passengers;
    }
	
	class Boat 
	{
		private Deck deck;
		private Body body;

	    public Boat() {
	    	System.out.print("\nПуста шлюпка була створенна");
	    }

	    public Boat(Deck deck, Body body) {
	        this.deck = deck;
	        this.body = body;
	    }

	    public Boat(Boat other) {
	        this.deck = new Deck(other.deck);
	        this.body = new Body(other.body);
	    }

	    {
	        this.deck = new Deck();
	        this.body = new Body();
	    }

	    public Deck getDeck() {
	        return deck;
	    }

	    public void setDeck(Deck deck) {
	        this.deck = deck;
	    }

	    public Body getBody() {
	        return body;
	    }

	    public void setBody(Body body) {
	        this.body = body;
	    }
		
	}
	
	class Deck
	{
		private Integer sailorsCapacity;
		private Integer passengerCapacity;
		
		 public Deck() {
			 System.out.print("\nПуста палуба була створенна");
	    }

	    public Deck(Integer sailorsCapacity, Integer passengerCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	        this.passengerCapacity = passengerCapacity;
	    }

	    public Deck(Deck other) {
	        this.sailorsCapacity = other.sailorsCapacity;
	        this.passengerCapacity = other.passengerCapacity;
	    }

	    {
	        this.sailorsCapacity = 0;
	        this.passengerCapacity = 0;
	    }

	    public Integer getSailorsCapacity() {
	        return sailorsCapacity;
	    }

	    public void setSailorsCapacity(Integer sailorsCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	    }

	    public Integer getPassengerCapacity() {
	        return passengerCapacity;
	    }

	    public void setPassengerCapacity(Integer passengerCapacity) {
	        this.passengerCapacity = passengerCapacity;
	    }
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "кількість of sailors='" + sailorsCapacity + '\'' +
	                ", кількість пасажирів='" + passengerCapacity + '\'' +
	                '}';
	    }
	}
	
	class Body
	{
		private String material;
		private Integer durability;
		
		public Body() {
			System.out.print("\nПустий корпус був створений");
	    }

	    public Body(String material, Integer durability) {
	        this.material = material;
	        this.durability = durability;
	    }

	    public Body(Body other) {
	        this.material = other.material;
	        this.durability = other.durability;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 0;
	    }

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }
	    @Override
	    public String toString() {
	        return "Корпус{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                '}';
	    }
	}
	
	class PairOfOars
	{
		private Oar rightOar;
		private Oar leftOar;
		
	    public PairOfOars() {
	    	System.out.print("\nПуста пара весел була створенна");
	    }

	    public PairOfOars(Oar rightOar, Oar leftOar) {
	        this.rightOar = rightOar;
	        this.leftOar = leftOar;
	    }

	    public PairOfOars(PairOfOars other) {
	        this.rightOar = new Oar(other.rightOar);
	        this.leftOar = new Oar(other.leftOar);
	    }

	    {
	        this.rightOar = new Oar();
	        this.leftOar = new Oar();
	    }
	    
	    public Boolean RowingToForward
	    {
	    	return leftOar.Rowing() && rightOar.Rowing();
	    }
	    
	    public Boolean RowingToBack
	    {
	    	return leftOar.Rowing() && rightOar.Rowing();
	    }
	    
	    public Boolean RowingToLeft
	    {
	    	return rightOar.Rowing();
	    }
	    
	    public Boolean RowingToRight
	    {
	    	return leftOar.Rowing();
	    }

	    public Oar getRightOar() {
	        return rightOar;
	    }

	    public void setRightOar(Oar rightOar) {
	        this.rightOar = rightOar;
	    }

	    public Oar getLeftOar() {
	        return leftOar;
	    }

	    public void setLeftOar(Oar leftOar) {
	        this.leftOar = leftOar;
	    }
		
	}
	
	class Oar 
	{
		private String material;
		private Integer durability;
		private Integer maxDurability;
		private Integer quality;
		
		public Oar() {
			System.out.print("\nПусте весло було створене");
	    }

	    public Oar(String material, Integer durability, Integer quality) {
	        this.material = material;
	        this.durability = durability;
	        this.quality = quality;
	    }

	    public Oar(Oar other) {
	        this.material = other.material;
	        this.durability = other.durability;
	        this.quality = other.quality;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 1000;
	        this.quality = 30;
	    }
	    
	    public Boolean Rowing()
	    {
	    	if (durability > 0)
	    	{
	    		this.durability -= ((int)(Math.random() * 11)*100)/this.quality;
	    		return true;
	    	}
	    	return false;
	    }
	    
	    public Boolean Repair()
	    {
	    	if (this.maxDurability*this.quality)/100 > this.durability)
	    	{
	    		this.durability = ((this.maxDurability*100)/this.quality)(int)(Math.random() * 1.1);
	    		return true;
	    	}
	    	return false;
	    }
	    

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }

	    public Integer getQuality() {
	        return quality;
	    }

	    public void setQuality(Integer quality) {
	        this.quality = quality;
	    }
	    
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                ", якість=" + quality +
	                '}';
	    }
	}
	
	class Sailer extends Person
	{
		private Integer Stamina;
		private Integer Power;
		private Integer Experience;
		
	    public Sailer() {
	        super();
	        System.out.print("\nПустий, той хто працює веслом, був створений");
	    }

	    public Sailer(String firstname, String lastname, Integer years, Integer Stamina, Integer Power, Integer Experience) {
	        super(firstname, lastname, years);
	        this.Stamina = Stamina;
	        this.Power = Power;
	        this.Experience = Experience;
	    }

	    public Sailer(Sailer other) {
	        super(other);
	        this.Stamina = other.Stamina;
	        this.Power = other.Power;
	        this.Experience = other.Experience;
	    }

	    {
	        this.Stamina = 0;
	        this.Power = 0;
	        this.Experience = 0;
	    }

	    public Integer getStamina() {
	        return Stamina;
	    }

	    public void setStamina(Integer Stamina) {
	        this.Stamina = Stamina;
	    }

	    public Integer getPower() {
	        return Power;
	    }

	    public void setPower(Integer Power) {
	        this.Power = Power;
	    }

	    public Integer getExperience() {
	        return Experience;
	    }

	    public void setExperience(Integer Experience) {
	        this.Experience = Experience;
	    }

	    @Override
	    public String toString() {
	        return "Sailer{" +
	                "ім'я='" + getFirstname() + '\'' +
	                ", прізвище='" + getLastname() + '\'' +
	                ", вік=" + getYears() +
	                ", енергія=" + Stamina +
	                ", потужність=" + Power +
	                ", досвід=" + Experience +
	                '}';
	    }

	}
	
	class Person
	{
		private String firstname;
		private String lastname;
		private Integer years;
		
	    public Person() {
	    	System.out.print("\nПуста людина була створена");
	    }

	    public Person(String firstname, String lastname, Integer years) {
	        this.firstname = firstname;
	        this.lastname = lastname;
	        this.years = years;
	    }

	    public Person(Person other) {
	        this.firstname = other.firstname;
	        this.lastname = other.lastname;
	        this.years = other.years;
	    }

	    {
	        this.firstname = "Невідомо";
	        this.lastname = "Невідомо";
	        this.years = 0;
	    }

	    public String getFirstname() {
	        return firstname;
	    }

	    public void setFirstname(String firstname) {
	        this.firstname = firstname;
	    }

	    public String getLastname() {
	        return lastname;
	    }

	    public void setLastname(String lastname) {
	        this.lastname = lastname;
	    }

	    public Integer getYears() {
	        return years;
	    }

	    public void setYears(Integer years) {
	        this.years = years;
	    }

	    @Override
	    public String toString() {
	        return "Людина{" +
	                "ім'я='" + firstname + '\'' +
	                ", прізвище='" + lastname + '\'' +
	                ", вік=" + years +
	                '}';
	    }
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-09-08 11:57:45.203
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-09-08 11:57:45.203
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-09-08 11:57:45.280
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
/**
 * 
 */
package CI_306.Shyryi.Lab3;

import java.util.List;
import java.util.ArrayList;

/**
 * 
 */
public class BoatOnOars {
	
	private String name;
	private Boat boat;
	private PairOfOars[] pairOfOars;
	private Sailer[] sailer;
	private List<Person> passengers = new ArrayList<>();

    public BoatOnOars() {
    	System.out.print("\nПуста шлюпка на веслах була створенна");
    }

    public BoatOnOars(String name, Boat boat, PairOfOars[] pairOfOars, Sailer[] sailer, List<Person> passengers) {
        this.name = name;
        this.boat = boat;
        this.pairOfOars = pairOfOars;
        this.sailer = sailer;
        this.passengers = passengers;
    }

    public BoatOnOars(BoatOnOars other) {
        this.name = other.name;
        this.boat = new Boat(other.boat);
        this.pairOfOars = other.pairOfOars.clone();
        this.sailer = other.sailer.clone();
        this.passengers = new ArrayList<>(other.passengers);
    }

    {
        this.name = "Невідомо";
        this.boat = new Boat();
        this.pairOfOars = new PairOfOars[2];
        this.sailer = new Sailer[2];
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Boat getBoat() {
        return boat;
    }

    public void setBoat(Boat boat) {
        this.boat = boat;
    }

    public PairOfOars[] getPairOfOars() {
        return pairOfOars;
    }

    public void setPairOfOars(PairOfOars[] pairOfOars) {
        this.pairOfOars = pairOfOars;
    }

    public Sailer[] getSailer() {
        return sailer;
    }

    public void setSailer(Sailer[] sailer) {
        this.sailer = sailer;
    }

    public List<Person> getPassengers() {
        return passengers;
    }

    public void setPassengers(List<Person> passengers) {
        this.passengers = passengers;
    }
	
	class Boat 
	{
		private Deck deck;
		private Body body;

	    public Boat() {
	    	System.out.print("\nПуста шлюпка була створенна");
	    }

	    public Boat(Deck deck, Body body) {
	        this.deck = deck;
	        this.body = body;
	    }

	    public Boat(Boat other) {
	        this.deck = new Deck(other.deck);
	        this.body = new Body(other.body);
	    }

	    {
	        this.deck = new Deck();
	        this.body = new Body();
	    }

	    public Deck getDeck() {
	        return deck;
	    }

	    public void setDeck(Deck deck) {
	        this.deck = deck;
	    }

	    public Body getBody() {
	        return body;
	    }

	    public void setBody(Body body) {
	        this.body = body;
	    }
		
	}
	
	class Deck
	{
		private Integer sailorsCapacity;
		private Integer passengerCapacity;
		
		 public Deck() {
			 System.out.print("\nПуста палуба була створенна");
	    }

	    public Deck(Integer sailorsCapacity, Integer passengerCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	        this.passengerCapacity = passengerCapacity;
	    }

	    public Deck(Deck other) {
	        this.sailorsCapacity = other.sailorsCapacity;
	        this.passengerCapacity = other.passengerCapacity;
	    }

	    {
	        this.sailorsCapacity = 0;
	        this.passengerCapacity = 0;
	    }

	    public Integer getSailorsCapacity() {
	        return sailorsCapacity;
	    }

	    public void setSailorsCapacity(Integer sailorsCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	    }

	    public Integer getPassengerCapacity() {
	        return passengerCapacity;
	    }

	    public void setPassengerCapacity(Integer passengerCapacity) {
	        this.passengerCapacity = passengerCapacity;
	    }
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "кількість of sailors='" + sailorsCapacity + '\'' +
	                ", кількість пасажирів='" + passengerCapacity + '\'' +
	                '}';
	    }
	}
	
	class Body
	{
		private String material;
		private Integer durability;
		
		public Body() {
			System.out.print("\nПустий корпус був створений");
	    }

	    public Body(String material, Integer durability) {
	        this.material = material;
	        this.durability = durability;
	    }

	    public Body(Body other) {
	        this.material = other.material;
	        this.durability = other.durability;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 0;
	    }

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }
	    @Override
	    public String toString() {
	        return "Корпус{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                '}';
	    }
	}
	
	class PairOfOars
	{
		private Oar rightOar;
		private Oar leftOar;
		
	    public PairOfOars() {
	    	System.out.print("\nПуста пара весел була створенна");
	    }

	    public PairOfOars(Oar rightOar, Oar leftOar) {
	        this.rightOar = rightOar;
	        this.leftOar = leftOar;
	    }

	    public PairOfOars(PairOfOars other) {
	        this.rightOar = new Oar(other.rightOar);
	        this.leftOar = new Oar(other.leftOar);
	    }

	    {
	        this.rightOar = new Oar();
	        this.leftOar = new Oar();
	    }
	    
	    public Boolean RowingToForward
	    {
	    	return leftOar.Rowing() && rightOar.Rowing();
	    }
	    
	    public Boolean RowingToBackw
	    {
	    	return leftOar.Rowing() && rightOar.Rowing();
	    }
	    
	    public Boolean RowingToLeft
	    {
	    	return rightOar.Rowing();
	    }
	    
	    public Boolean RowingToRight
	    {
	    	return leftOar.Rowing();
	    }

	    public Oar getRightOar() {
	        return rightOar;
	    }

	    public void setRightOar(Oar rightOar) {
	        this.rightOar = rightOar;
	    }

	    public Oar getLeftOar() {
	        return leftOar;
	    }

	    public void setLeftOar(Oar leftOar) {
	        this.leftOar = leftOar;
	    }
		
	}
	
	class Oar 
	{
		private String material;
		private Integer durability;
		private Integer maxDurability;
		private Integer quality;
		
		public Oar() {
			System.out.print("\nПусте весло було створене");
	    }

	    public Oar(String material, Integer durability, Integer quality) {
	        this.material = material;
	        this.durability = durability;
	        this.quality = quality;
	    }

	    public Oar(Oar other) {
	        this.material = other.material;
	        this.durability = other.durability;
	        this.quality = other.quality;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 1000;
	        this.quality = 30;
	    }
	    
	    public Boolean Rowing()
	    {
	    	if (durability > 0)
	    	{
	    		this.durability -= ((int)(Math.random() * 11)*100)/this.quality;
	    		return true;
	    	}
	    	return false;
	    }
	    
	    public Boolean Repair()
	    {
	    	if (this.maxDurability*this.quality)/100 > this.durability)
	    	{
	    		this.durability = ((this.maxDurability*100)/this.quality)(int)(Math.random() * 1.1);
	    		return true;
	    	}
	    	return false;
	    }
	    

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }

	    public Integer getQuality() {
	        return quality;
	    }

	    public void setQuality(Integer quality) {
	        this.quality = quality;
	    }
	    
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                ", якість=" + quality +
	                '}';
	    }
	}
	
	class Sailer extends Person
	{
		private Integer Stamina;
		private Integer Power;
		private Integer Experience;
		
	    public Sailer() {
	        super();
	        System.out.print("\nПустий, той хто працює веслом, був створений");
	    }

	    public Sailer(String firstname, String lastname, Integer years, Integer Stamina, Integer Power, Integer Experience) {
	        super(firstname, lastname, years);
	        this.Stamina = Stamina;
	        this.Power = Power;
	        this.Experience = Experience;
	    }

	    public Sailer(Sailer other) {
	        super(other);
	        this.Stamina = other.Stamina;
	        this.Power = other.Power;
	        this.Experience = other.Experience;
	    }

	    {
	        this.Stamina = 0;
	        this.Power = 0;
	        this.Experience = 0;
	    }

	    public Integer getStamina() {
	        return Stamina;
	    }

	    public void setStamina(Integer Stamina) {
	        this.Stamina = Stamina;
	    }

	    public Integer getPower() {
	        return Power;
	    }

	    public void setPower(Integer Power) {
	        this.Power = Power;
	    }

	    public Integer getExperience() {
	        return Experience;
	    }

	    public void setExperience(Integer Experience) {
	        this.Experience = Experience;
	    }

	    @Override
	    public String toString() {
	        return "Sailer{" +
	                "ім'я='" + getFirstname() + '\'' +
	                ", прізвище='" + getLastname() + '\'' +
	                ", вік=" + getYears() +
	                ", енергія=" + Stamina +
	                ", потужність=" + Power +
	                ", досвід=" + Experience +
	                '}';
	    }

	}
	
	class Person
	{
		private String firstname;
		private String lastname;
		private Integer years;
		
	    public Person() {
	    	System.out.print("\nПуста людина була створена");
	    }

	    public Person(String firstname, String lastname, Integer years) {
	        this.firstname = firstname;
	        this.lastname = lastname;
	        this.years = years;
	    }

	    public Person(Person other) {
	        this.firstname = other.firstname;
	        this.lastname = other.lastname;
	        this.years = other.years;
	    }

	    {
	        this.firstname = "Невідомо";
	        this.lastname = "Невідомо";
	        this.years = 0;
	    }

	    public String getFirstname() {
	        return firstname;
	    }

	    public void setFirstname(String firstname) {
	        this.firstname = firstname;
	    }

	    public String getLastname() {
	        return lastname;
	    }

	    public void setLastname(String lastname) {
	        this.lastname = lastname;
	    }

	    public Integer getYears() {
	        return years;
	    }

	    public void setYears(Integer years) {
	        this.years = years;
	    }

	    @Override
	    public String toString() {
	        return "Людина{" +
	                "ім'я='" + firstname + '\'' +
	                ", прізвище='" + lastname + '\'' +
	                ", вік=" + years +
	                '}';
	    }
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-09-08 11:57:45.281
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-09-08 11:57:45.281
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-09-08 11:57:45.287
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
/**
 * 
 */
package CI_306.Shyryi.Lab3;

import java.util.List;
import java.util.ArrayList;

/**
 * 
 */
public class BoatOnOars {
	
	private String name;
	private Boat boat;
	private PairOfOars[] pairOfOars;
	private Sailer[] sailer;
	private List<Person> passengers = new ArrayList<>();

    public BoatOnOars() {
    	System.out.print("\nПуста шлюпка на веслах була створенна");
    }

    public BoatOnOars(String name, Boat boat, PairOfOars[] pairOfOars, Sailer[] sailer, List<Person> passengers) {
        this.name = name;
        this.boat = boat;
        this.pairOfOars = pairOfOars;
        this.sailer = sailer;
        this.passengers = passengers;
    }

    public BoatOnOars(BoatOnOars other) {
        this.name = other.name;
        this.boat = new Boat(other.boat);
        this.pairOfOars = other.pairOfOars.clone();
        this.sailer = other.sailer.clone();
        this.passengers = new ArrayList<>(other.passengers);
    }

    {
        this.name = "Невідомо";
        this.boat = new Boat();
        this.pairOfOars = new PairOfOars[2];
        this.sailer = new Sailer[2];
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Boat getBoat() {
        return boat;
    }

    public void setBoat(Boat boat) {
        this.boat = boat;
    }

    public PairOfOars[] getPairOfOars() {
        return pairOfOars;
    }

    public void setPairOfOars(PairOfOars[] pairOfOars) {
        this.pairOfOars = pairOfOars;
    }

    public Sailer[] getSailer() {
        return sailer;
    }

    public void setSailer(Sailer[] sailer) {
        this.sailer = sailer;
    }

    public List<Person> getPassengers() {
        return passengers;
    }

    public void setPassengers(List<Person> passengers) {
        this.passengers = passengers;
    }
	
	class Boat 
	{
		private Deck deck;
		private Body body;

	    public Boat() {
	    	System.out.print("\nПуста шлюпка була створенна");
	    }

	    public Boat(Deck deck, Body body) {
	        this.deck = deck;
	        this.body = body;
	    }

	    public Boat(Boat other) {
	        this.deck = new Deck(other.deck);
	        this.body = new Body(other.body);
	    }

	    {
	        this.deck = new Deck();
	        this.body = new Body();
	    }

	    public Deck getDeck() {
	        return deck;
	    }

	    public void setDeck(Deck deck) {
	        this.deck = deck;
	    }

	    public Body getBody() {
	        return body;
	    }

	    public void setBody(Body body) {
	        this.body = body;
	    }
		
	}
	
	class Deck
	{
		private Integer sailorsCapacity;
		private Integer passengerCapacity;
		
		 public Deck() {
			 System.out.print("\nПуста палуба була створенна");
	    }

	    public Deck(Integer sailorsCapacity, Integer passengerCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	        this.passengerCapacity = passengerCapacity;
	    }

	    public Deck(Deck other) {
	        this.sailorsCapacity = other.sailorsCapacity;
	        this.passengerCapacity = other.passengerCapacity;
	    }

	    {
	        this.sailorsCapacity = 0;
	        this.passengerCapacity = 0;
	    }

	    public Integer getSailorsCapacity() {
	        return sailorsCapacity;
	    }

	    public void setSailorsCapacity(Integer sailorsCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	    }

	    public Integer getPassengerCapacity() {
	        return passengerCapacity;
	    }

	    public void setPassengerCapacity(Integer passengerCapacity) {
	        this.passengerCapacity = passengerCapacity;
	    }
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "кількість of sailors='" + sailorsCapacity + '\'' +
	                ", кількість пасажирів='" + passengerCapacity + '\'' +
	                '}';
	    }
	}
	
	class Body
	{
		private String material;
		private Integer durability;
		
		public Body() {
			System.out.print("\nПустий корпус був створений");
	    }

	    public Body(String material, Integer durability) {
	        this.material = material;
	        this.durability = durability;
	    }

	    public Body(Body other) {
	        this.material = other.material;
	        this.durability = other.durability;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 0;
	    }

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }
	    @Override
	    public String toString() {
	        return "Корпус{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                '}';
	    }
	}
	
	class PairOfOars
	{
		private Oar rightOar;
		private Oar leftOar;
		
	    public PairOfOars() {
	    	System.out.print("\nПуста пара весел була створенна");
	    }

	    public PairOfOars(Oar rightOar, Oar leftOar) {
	        this.rightOar = rightOar;
	        this.leftOar = leftOar;
	    }

	    public PairOfOars(PairOfOars other) {
	        this.rightOar = new Oar(other.rightOar);
	        this.leftOar = new Oar(other.leftOar);
	    }

	    {
	        this.rightOar = new Oar();
	        this.leftOar = new Oar();
	    }
	    
	    public Boolean RowingToForward
	    {
	    	return leftOar.Rowing() && rightOar.Rowing();
	    }
	    
	    public Boolean RowingToBackw
	    {
	    	return leftOar.Rowing() && rightOar.Rowing();
	    }
	    
	    public Boolean RowingToLeft
	    {
	    	return rightOar.Rowing();
	    }
	    
	    public Boolean RowingToRight
	    {
	    	return leftOar.Rowing();
	    }

	    public Oar getRightOar() {
	        return rightOar;
	    }

	    public void setRightOar(Oar rightOar) {
	        this.rightOar = rightOar;
	    }

	    public Oar getLeftOar() {
	        return leftOar;
	    }

	    public void setLeftOar(Oar leftOar) {
	        this.leftOar = leftOar;
	    }
		
	}
	
	class Oar 
	{
		private String material;
		private Integer durability;
		private Integer maxDurability;
		private Integer quality;
		
		public Oar() {
			System.out.print("\nПусте весло було створене");
	    }

	    public Oar(String material, Integer durability, Integer quality) {
	        this.material = material;
	        this.durability = durability;
	        this.quality = quality;
	    }

	    public Oar(Oar other) {
	        this.material = other.material;
	        this.durability = other.durability;
	        this.quality = other.quality;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 1000;
	        this.quality = 30;
	    }
	    
	    public Boolean Rowing()
	    {
	    	if (durability > 0)
	    	{
	    		this.durability -= ((int)(Math.random() * 11)*100)/this.quality;
	    		return true;
	    	}
	    	return false;
	    }
	    
	    public Boolean Repair()
	    {
	    	if (this.maxDurability*this.quality)/100 > this.durability)
	    	{
	    		this.durability = ((this.maxDurability*100)/this.quality)(int)(Math.random() * 1.1);
	    		return true;
	    	}
	    	return false;
	    }
	    

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }

	    public Integer getQuality() {
	        return quality;
	    }

	    public void setQuality(Integer quality) {
	        this.quality = quality;
	    }
	    
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                ", якість=" + quality +
	                '}';
	    }
	}
	
	class Sailer extends Person
	{
		private Integer Stamina;
		private Integer Power;
		private Integer Experience;
		
	    public Sailer() {
	        super();
	        System.out.print("\nПустий, той хто працює веслом, був створений");
	    }

	    public Sailer(String firstname, String lastname, Integer years, Integer Stamina, Integer Power, Integer Experience) {
	        super(firstname, lastname, years);
	        this.Stamina = Stamina;
	        this.Power = Power;
	        this.Experience = Experience;
	    }

	    public Sailer(Sailer other) {
	        super(other);
	        this.Stamina = other.Stamina;
	        this.Power = other.Power;
	        this.Experience = other.Experience;
	    }

	    {
	        this.Stamina = 0;
	        this.Power = 0;
	        this.Experience = 0;
	    }

	    public Integer getStamina() {
	        return Stamina;
	    }

	    public void setStamina(Integer Stamina) {
	        this.Stamina = Stamina;
	    }

	    public Integer getPower() {
	        return Power;
	    }

	    public void setPower(Integer Power) {
	        this.Power = Power;
	    }

	    public Integer getExperience() {
	        return Experience;
	    }

	    public void setExperience(Integer Experience) {
	        this.Experience = Experience;
	    }

	    @Override
	    public String toString() {
	        return "Sailer{" +
	                "ім'я='" + getFirstname() + '\'' +
	                ", прізвище='" + getLastname() + '\'' +
	                ", вік=" + getYears() +
	                ", енергія=" + Stamina +
	                ", потужність=" + Power +
	                ", досвід=" + Experience +
	                '}';
	    }

	}
	
	class Person
	{
		private String firstname;
		private String lastname;
		private Integer years;
		
	    public Person() {
	    	System.out.print("\nПуста людина була створена");
	    }

	    public Person(String firstname, String lastname, Integer years) {
	        this.firstname = firstname;
	        this.lastname = lastname;
	        this.years = years;
	    }

	    public Person(Person other) {
	        this.firstname = other.firstname;
	        this.lastname = other.lastname;
	        this.years = other.years;
	    }

	    {
	        this.firstname = "Невідомо";
	        this.lastname = "Невідомо";
	        this.years = 0;
	    }

	    public String getFirstname() {
	        return firstname;
	    }

	    public void setFirstname(String firstname) {
	        this.firstname = firstname;
	    }

	    public String getLastname() {
	        return lastname;
	    }

	    public void setLastname(String lastname) {
	        this.lastname = lastname;
	    }

	    public Integer getYears() {
	        return years;
	    }

	    public void setYears(Integer years) {
	        this.years = years;
	    }

	    @Override
	    public String toString() {
	        return "Людина{" +
	                "ім'я='" + firstname + '\'' +
	                ", прізвище='" + lastname + '\'' +
	                ", вік=" + years +
	                '}';
	    }
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-09-08 11:57:45.288
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-09-08 11:57:45.288
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-09-08 11:57:46.609
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
/**
 * 
 */
package CI_306.Shyryi.Lab3;

import java.util.List;
import java.util.ArrayList;

/**
 * 
 */
public class BoatOnOars {
	
	private String name;
	private Boat boat;
	private PairOfOars[] pairOfOars;
	private Sailer[] sailer;
	private List<Person> passengers = new ArrayList<>();

    public BoatOnOars() {
    	System.out.print("\nПуста шлюпка на веслах була створенна");
    }

    public BoatOnOars(String name, Boat boat, PairOfOars[] pairOfOars, Sailer[] sailer, List<Person> passengers) {
        this.name = name;
        this.boat = boat;
        this.pairOfOars = pairOfOars;
        this.sailer = sailer;
        this.passengers = passengers;
    }

    public BoatOnOars(BoatOnOars other) {
        this.name = other.name;
        this.boat = new Boat(other.boat);
        this.pairOfOars = other.pairOfOars.clone();
        this.sailer = other.sailer.clone();
        this.passengers = new ArrayList<>(other.passengers);
    }

    {
        this.name = "Невідомо";
        this.boat = new Boat();
        this.pairOfOars = new PairOfOars[2];
        this.sailer = new Sailer[2];
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Boat getBoat() {
        return boat;
    }

    public void setBoat(Boat boat) {
        this.boat = boat;
    }

    public PairOfOars[] getPairOfOars() {
        return pairOfOars;
    }

    public void setPairOfOars(PairOfOars[] pairOfOars) {
        this.pairOfOars = pairOfOars;
    }

    public Sailer[] getSailer() {
        return sailer;
    }

    public void setSailer(Sailer[] sailer) {
        this.sailer = sailer;
    }

    public List<Person> getPassengers() {
        return passengers;
    }

    public void setPassengers(List<Person> passengers) {
        this.passengers = passengers;
    }
	
	class Boat 
	{
		private Deck deck;
		private Body body;

	    public Boat() {
	    	System.out.print("\nПуста шлюпка була створенна");
	    }

	    public Boat(Deck deck, Body body) {
	        this.deck = deck;
	        this.body = body;
	    }

	    public Boat(Boat other) {
	        this.deck = new Deck(other.deck);
	        this.body = new Body(other.body);
	    }

	    {
	        this.deck = new Deck();
	        this.body = new Body();
	    }

	    public Deck getDeck() {
	        return deck;
	    }

	    public void setDeck(Deck deck) {
	        this.deck = deck;
	    }

	    public Body getBody() {
	        return body;
	    }

	    public void setBody(Body body) {
	        this.body = body;
	    }
		
	}
	
	class Deck
	{
		private Integer sailorsCapacity;
		private Integer passengerCapacity;
		
		 public Deck() {
			 System.out.print("\nПуста палуба була створенна");
	    }

	    public Deck(Integer sailorsCapacity, Integer passengerCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	        this.passengerCapacity = passengerCapacity;
	    }

	    public Deck(Deck other) {
	        this.sailorsCapacity = other.sailorsCapacity;
	        this.passengerCapacity = other.passengerCapacity;
	    }

	    {
	        this.sailorsCapacity = 0;
	        this.passengerCapacity = 0;
	    }

	    public Integer getSailorsCapacity() {
	        return sailorsCapacity;
	    }

	    public void setSailorsCapacity(Integer sailorsCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	    }

	    public Integer getPassengerCapacity() {
	        return passengerCapacity;
	    }

	    public void setPassengerCapacity(Integer passengerCapacity) {
	        this.passengerCapacity = passengerCapacity;
	    }
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "кількість of sailors='" + sailorsCapacity + '\'' +
	                ", кількість пасажирів='" + passengerCapacity + '\'' +
	                '}';
	    }
	}
	
	class Body
	{
		private String material;
		private Integer durability;
		
		public Body() {
			System.out.print("\nПустий корпус був створений");
	    }

	    public Body(String material, Integer durability) {
	        this.material = material;
	        this.durability = durability;
	    }

	    public Body(Body other) {
	        this.material = other.material;
	        this.durability = other.durability;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 0;
	    }

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }
	    @Override
	    public String toString() {
	        return "Корпус{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                '}';
	    }
	}
	
	class PairOfOars
	{
		private Oar rightOar;
		private Oar leftOar;
		
	    public PairOfOars() {
	    	System.out.print("\nПуста пара весел була створенна");
	    }

	    public PairOfOars(Oar rightOar, Oar leftOar) {
	        this.rightOar = rightOar;
	        this.leftOar = leftOar;
	    }

	    public PairOfOars(PairOfOars other) {
	        this.rightOar = new Oar(other.rightOar);
	        this.leftOar = new Oar(other.leftOar);
	    }

	    {
	        this.rightOar = new Oar();
	        this.leftOar = new Oar();
	    }
	    
	    public Boolean RowingToForward
	    {
	    	return leftOar.Rowing() && rightOar.Rowing();
	    }
	    
	    public Boolean RowingToBackward
	    {
	    	return leftOar.Rowing() && rightOar.Rowing();
	    }
	    
	    public Boolean RowingToLeft
	    {
	    	return rightOar.Rowing();
	    }
	    
	    public Boolean RowingToRight
	    {
	    	return leftOar.Rowing();
	    }

	    public Oar getRightOar() {
	        return rightOar;
	    }

	    public void setRightOar(Oar rightOar) {
	        this.rightOar = rightOar;
	    }

	    public Oar getLeftOar() {
	        return leftOar;
	    }

	    public void setLeftOar(Oar leftOar) {
	        this.leftOar = leftOar;
	    }
		
	}
	
	class Oar 
	{
		private String material;
		private Integer durability;
		private Integer maxDurability;
		private Integer quality;
		
		public Oar() {
			System.out.print("\nПусте весло було створене");
	    }

	    public Oar(String material, Integer durability, Integer quality) {
	        this.material = material;
	        this.durability = durability;
	        this.quality = quality;
	    }

	    public Oar(Oar other) {
	        this.material = other.material;
	        this.durability = other.durability;
	        this.quality = other.quality;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 1000;
	        this.quality = 30;
	    }
	    
	    public Boolean Rowing()
	    {
	    	if (durability > 0)
	    	{
	    		this.durability -= ((int)(Math.random() * 11)*100)/this.quality;
	    		return true;
	    	}
	    	return false;
	    }
	    
	    public Boolean Repair()
	    {
	    	if (this.maxDurability*this.quality)/100 > this.durability)
	    	{
	    		this.durability = ((this.maxDurability*100)/this.quality)(int)(Math.random() * 1.1);
	    		return true;
	    	}
	    	return false;
	    }
	    

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }

	    public Integer getQuality() {
	        return quality;
	    }

	    public void setQuality(Integer quality) {
	        this.quality = quality;
	    }
	    
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                ", якість=" + quality +
	                '}';
	    }
	}
	
	class Sailer extends Person
	{
		private Integer Stamina;
		private Integer Power;
		private Integer Experience;
		
	    public Sailer() {
	        super();
	        System.out.print("\nПустий, той хто працює веслом, був створений");
	    }

	    public Sailer(String firstname, String lastname, Integer years, Integer Stamina, Integer Power, Integer Experience) {
	        super(firstname, lastname, years);
	        this.Stamina = Stamina;
	        this.Power = Power;
	        this.Experience = Experience;
	    }

	    public Sailer(Sailer other) {
	        super(other);
	        this.Stamina = other.Stamina;
	        this.Power = other.Power;
	        this.Experience = other.Experience;
	    }

	    {
	        this.Stamina = 0;
	        this.Power = 0;
	        this.Experience = 0;
	    }

	    public Integer getStamina() {
	        return Stamina;
	    }

	    public void setStamina(Integer Stamina) {
	        this.Stamina = Stamina;
	    }

	    public Integer getPower() {
	        return Power;
	    }

	    public void setPower(Integer Power) {
	        this.Power = Power;
	    }

	    public Integer getExperience() {
	        return Experience;
	    }

	    public void setExperience(Integer Experience) {
	        this.Experience = Experience;
	    }

	    @Override
	    public String toString() {
	        return "Sailer{" +
	                "ім'я='" + getFirstname() + '\'' +
	                ", прізвище='" + getLastname() + '\'' +
	                ", вік=" + getYears() +
	                ", енергія=" + Stamina +
	                ", потужність=" + Power +
	                ", досвід=" + Experience +
	                '}';
	    }

	}
	
	class Person
	{
		private String firstname;
		private String lastname;
		private Integer years;
		
	    public Person() {
	    	System.out.print("\nПуста людина була створена");
	    }

	    public Person(String firstname, String lastname, Integer years) {
	        this.firstname = firstname;
	        this.lastname = lastname;
	        this.years = years;
	    }

	    public Person(Person other) {
	        this.firstname = other.firstname;
	        this.lastname = other.lastname;
	        this.years = other.years;
	    }

	    {
	        this.firstname = "Невідомо";
	        this.lastname = "Невідомо";
	        this.years = 0;
	    }

	    public String getFirstname() {
	        return firstname;
	    }

	    public void setFirstname(String firstname) {
	        this.firstname = firstname;
	    }

	    public String getLastname() {
	        return lastname;
	    }

	    public void setLastname(String lastname) {
	        this.lastname = lastname;
	    }

	    public Integer getYears() {
	        return years;
	    }

	    public void setYears(Integer years) {
	        this.years = years;
	    }

	    @Override
	    public String toString() {
	        return "Людина{" +
	                "ім'я='" + firstname + '\'' +
	                ", прізвище='" + lastname + '\'' +
	                ", вік=" + years +
	                '}';
	    }
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-09-08 11:57:46.610
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-09-08 11:57:46.611
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-09-08 11:57:46.679
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
/**
 * 
 */
package CI_306.Shyryi.Lab3;

import java.util.List;
import java.util.ArrayList;

/**
 * 
 */
public class BoatOnOars {
	
	private String name;
	private Boat boat;
	private PairOfOars[] pairOfOars;
	private Sailer[] sailer;
	private List<Person> passengers = new ArrayList<>();

    public BoatOnOars() {
    	System.out.print("\nПуста шлюпка на веслах була створенна");
    }

    public BoatOnOars(String name, Boat boat, PairOfOars[] pairOfOars, Sailer[] sailer, List<Person> passengers) {
        this.name = name;
        this.boat = boat;
        this.pairOfOars = pairOfOars;
        this.sailer = sailer;
        this.passengers = passengers;
    }

    public BoatOnOars(BoatOnOars other) {
        this.name = other.name;
        this.boat = new Boat(other.boat);
        this.pairOfOars = other.pairOfOars.clone();
        this.sailer = other.sailer.clone();
        this.passengers = new ArrayList<>(other.passengers);
    }

    {
        this.name = "Невідомо";
        this.boat = new Boat();
        this.pairOfOars = new PairOfOars[2];
        this.sailer = new Sailer[2];
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Boat getBoat() {
        return boat;
    }

    public void setBoat(Boat boat) {
        this.boat = boat;
    }

    public PairOfOars[] getPairOfOars() {
        return pairOfOars;
    }

    public void setPairOfOars(PairOfOars[] pairOfOars) {
        this.pairOfOars = pairOfOars;
    }

    public Sailer[] getSailer() {
        return sailer;
    }

    public void setSailer(Sailer[] sailer) {
        this.sailer = sailer;
    }

    public List<Person> getPassengers() {
        return passengers;
    }

    public void setPassengers(List<Person> passengers) {
        this.passengers = passengers;
    }
	
	class Boat 
	{
		private Deck deck;
		private Body body;

	    public Boat() {
	    	System.out.print("\nПуста шлюпка була створенна");
	    }

	    public Boat(Deck deck, Body body) {
	        this.deck = deck;
	        this.body = body;
	    }

	    public Boat(Boat other) {
	        this.deck = new Deck(other.deck);
	        this.body = new Body(other.body);
	    }

	    {
	        this.deck = new Deck();
	        this.body = new Body();
	    }

	    public Deck getDeck() {
	        return deck;
	    }

	    public void setDeck(Deck deck) {
	        this.deck = deck;
	    }

	    public Body getBody() {
	        return body;
	    }

	    public void setBody(Body body) {
	        this.body = body;
	    }
		
	}
	
	class Deck
	{
		private Integer sailorsCapacity;
		private Integer passengerCapacity;
		
		 public Deck() {
			 System.out.print("\nПуста палуба була створенна");
	    }

	    public Deck(Integer sailorsCapacity, Integer passengerCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	        this.passengerCapacity = passengerCapacity;
	    }

	    public Deck(Deck other) {
	        this.sailorsCapacity = other.sailorsCapacity;
	        this.passengerCapacity = other.passengerCapacity;
	    }

	    {
	        this.sailorsCapacity = 0;
	        this.passengerCapacity = 0;
	    }

	    public Integer getSailorsCapacity() {
	        return sailorsCapacity;
	    }

	    public void setSailorsCapacity(Integer sailorsCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	    }

	    public Integer getPassengerCapacity() {
	        return passengerCapacity;
	    }

	    public void setPassengerCapacity(Integer passengerCapacity) {
	        this.passengerCapacity = passengerCapacity;
	    }
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "кількість of sailors='" + sailorsCapacity + '\'' +
	                ", кількість пасажирів='" + passengerCapacity + '\'' +
	                '}';
	    }
	}
	
	class Body
	{
		private String material;
		private Integer durability;
		
		public Body() {
			System.out.print("\nПустий корпус був створений");
	    }

	    public Body(String material, Integer durability) {
	        this.material = material;
	        this.durability = durability;
	    }

	    public Body(Body other) {
	        this.material = other.material;
	        this.durability = other.durability;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 0;
	    }

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }
	    @Override
	    public String toString() {
	        return "Корпус{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                '}';
	    }
	}
	
	class PairOfOars
	{
		private Oar rightOar;
		private Oar leftOar;
		
	    public PairOfOars() {
	    	System.out.print("\nПуста пара весел була створенна");
	    }

	    public PairOfOars(Oar rightOar, Oar leftOar) {
	        this.rightOar = rightOar;
	        this.leftOar = leftOar;
	    }

	    public PairOfOars(PairOfOars other) {
	        this.rightOar = new Oar(other.rightOar);
	        this.leftOar = new Oar(other.leftOar);
	    }

	    {
	        this.rightOar = new Oar();
	        this.leftOar = new Oar();
	    }
	    
	    public Boolean RowingToForward
	    {
	    	return leftOar.Rowing() && rightOar.Rowing();
	    }
	    
	    public Boolean RowingToBackward
	    {
	    	return leftOar.Rowing() && rightOar.Rowing();
	    }
	    
	    public Boolean RowingToLeft
	    {
	    	return rightOar.Rowing();
	    }
	    
	    public Boolean RowingToRight
	    {
	    	return leftOar.Rowing();
	    }

	    public Oar getRightOar() {
	        return rightOar;
	    }

	    public void setRightOar(Oar rightOar) {
	        this.rightOar = rightOar;
	    }

	    public Oar getLeftOar() {
	        return leftOar;
	    }

	    public void setLeftOar(Oar leftOar) {
	        this.leftOar = leftOar;
	    }
		
	}
	
	class Oar 
	{
		private String material;
		private Integer durability;
		private Integer maxDurability;
		private Integer quality;
		
		public Oar() {
			System.out.print("\nПусте весло було створене");
	    }

	    public Oar(String material, Integer durability, Integer quality) {
	        this.material = material;
	        this.durability = durability;
	        this.quality = quality;
	    }

	    public Oar(Oar other) {
	        this.material = other.material;
	        this.durability = other.durability;
	        this.quality = other.quality;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 1000;
	        this.quality = 30;
	    }
	    
	    public Boolean Rowing()
	    {
	    	if (durability > 0)
	    	{
	    		this.durability -= ((int)(Math.random() * 11)*100)/this.quality;
	    		return true;
	    	}
	    	return false;
	    }
	    
	    public Boolean Repair()
	    {
	    	if (this.maxDurability*this.quality)/100 > this.durability)
	    	{
	    		this.durability = ((this.maxDurability*100)/this.quality)(int)(Math.random() * 1.1);
	    		return true;
	    	}
	    	return false;
	    }
	    

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }

	    public Integer getQuality() {
	        return quality;
	    }

	    public void setQuality(Integer quality) {
	        this.quality = quality;
	    }
	    
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                ", якість=" + quality +
	                '}';
	    }
	}
	
	class Sailer extends Person
	{
		private Integer Stamina;
		private Integer Power;
		private Integer Experience;
		
	    public Sailer() {
	        super();
	        System.out.print("\nПустий, той хто працює веслом, був створений");
	    }

	    public Sailer(String firstname, String lastname, Integer years, Integer Stamina, Integer Power, Integer Experience) {
	        super(firstname, lastname, years);
	        this.Stamina = Stamina;
	        this.Power = Power;
	        this.Experience = Experience;
	    }

	    public Sailer(Sailer other) {
	        super(other);
	        this.Stamina = other.Stamina;
	        this.Power = other.Power;
	        this.Experience = other.Experience;
	    }

	    {
	        this.Stamina = 0;
	        this.Power = 0;
	        this.Experience = 0;
	    }

	    public Integer getStamina() {
	        return Stamina;
	    }

	    public void setStamina(Integer Stamina) {
	        this.Stamina = Stamina;
	    }

	    public Integer getPower() {
	        return Power;
	    }

	    public void setPower(Integer Power) {
	        this.Power = Power;
	    }

	    public Integer getExperience() {
	        return Experience;
	    }

	    public void setExperience(Integer Experience) {
	        this.Experience = Experience;
	    }

	    @Override
	    public String toString() {
	        return "Sailer{" +
	                "ім'я='" + getFirstname() + '\'' +
	                ", прізвище='" + getLastname() + '\'' +
	                ", вік=" + getYears() +
	                ", енергія=" + Stamina +
	                ", потужність=" + Power +
	                ", досвід=" + Experience +
	                '}';
	    }

	}
	
	class Person
	{
		private String firstname;
		private String lastname;
		private Integer years;
		
	    public Person() {
	    	System.out.print("\nПуста людина була створена");
	    }

	    public Person(String firstname, String lastname, Integer years) {
	        this.firstname = firstname;
	        this.lastname = lastname;
	        this.years = years;
	    }

	    public Person(Person other) {
	        this.firstname = other.firstname;
	        this.lastname = other.lastname;
	        this.years = other.years;
	    }

	    {
	        this.firstname = "Невідомо";
	        this.lastname = "Невідомо";
	        this.years = 0;
	    }

	    public String getFirstname() {
	        return firstname;
	    }

	    public void setFirstname(String firstname) {
	        this.firstname = firstname;
	    }

	    public String getLastname() {
	        return lastname;
	    }

	    public void setLastname(String lastname) {
	        this.lastname = lastname;
	    }

	    public Integer getYears() {
	        return years;
	    }

	    public void setYears(Integer years) {
	        this.years = years;
	    }

	    @Override
	    public String toString() {
	        return "Людина{" +
	                "ім'я='" + firstname + '\'' +
	                ", прізвище='" + lastname + '\'' +
	                ", вік=" + years +
	                '}';
	    }
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-09-08 11:57:46.680
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-09-08 11:57:46.680
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-09-08 12:03:28.801
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
/**
 * 
 */
package CI_306.Shyryi.Lab3;

import java.util.List;
import java.util.ArrayList;

/**
 * 
 */
public class BoatOnOars {
	
	private String name;
	private Boat boat;
	private PairOfOars[] pairOfOars;
	private Sailer[] sailer;
	private List<Person> passengers = new ArrayList<>();

    public BoatOnOars() {
    	System.out.print("\nПуста шлюпка на веслах була створенна");
    }

    public BoatOnOars(String name, Boat boat, PairOfOars[] pairOfOars, Sailer[] sailer, List<Person> passengers) {
        this.name = name;
        this.boat = boat;
        this.pairOfOars = pairOfOars;
        this.sailer = sailer;
        this.passengers = passengers;
    }

    public BoatOnOars(BoatOnOars other) {
        this.name = other.name;
        this.boat = new Boat(other.boat);
        this.pairOfOars = other.pairOfOars.clone();
        this.sailer = other.sailer.clone();
        this.passengers = new ArrayList<>(other.passengers);
    }

    {
        this.name = "Невідомо";
        this.boat = new Boat();
        this.pairOfOars = new PairOfOars[2];
        this.sailer = new Sailer[2];
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Boat getBoat() {
        return boat;
    }

    public void setBoat(Boat boat) {
        this.boat = boat;
    }

    public PairOfOars[] getPairOfOars() {
        return pairOfOars;
    }

    public void setPairOfOars(PairOfOars[] pairOfOars) {
        this.pairOfOars = pairOfOars;
    }

    public Sailer[] getSailer() {
        return sailer;
    }

    public void setSailer(Sailer[] sailer) {
        this.sailer = sailer;
    }

    public List<Person> getPassengers() {
        return passengers;
    }

    public void setPassengers(List<Person> passengers) {
        this.passengers = passengers;
    }
	
	class Boat 
	{
		private Deck deck;
		private Body body;

	    public Boat() {
	    	System.out.print("\nПуста шлюпка була створенна");
	    }

	    public Boat(Deck deck, Body body) {
	        this.deck = deck;
	        this.body = body;
	    }

	    public Boat(Boat other) {
	        this.deck = new Deck(other.deck);
	        this.body = new Body(other.body);
	    }

	    {
	        this.deck = new Deck();
	        this.body = new Body();
	    }

	    public Deck getDeck() {
	        return deck;
	    }

	    public void setDeck(Deck deck) {
	        this.deck = deck;
	    }

	    public Body getBody() {
	        return body;
	    }

	    public void setBody(Body body) {
	        this.body = body;
	    }
		
	}
	
	class Deck
	{
		private Integer sailorsCapacity;
		private Integer passengerCapacity;
		
		 public Deck() {
			 System.out.print("\nПуста палуба була створенна");
	    }

	    public Deck(Integer sailorsCapacity, Integer passengerCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	        this.passengerCapacity = passengerCapacity;
	    }

	    public Deck(Deck other) {
	        this.sailorsCapacity = other.sailorsCapacity;
	        this.passengerCapacity = other.passengerCapacity;
	    }

	    {
	        this.sailorsCapacity = 0;
	        this.passengerCapacity = 0;
	    }

	    public Integer getSailorsCapacity() {
	        return sailorsCapacity;
	    }

	    public void setSailorsCapacity(Integer sailorsCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	    }

	    public Integer getPassengerCapacity() {
	        return passengerCapacity;
	    }

	    public void setPassengerCapacity(Integer passengerCapacity) {
	        this.passengerCapacity = passengerCapacity;
	    }
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "кількість of sailors='" + sailorsCapacity + '\'' +
	                ", кількість пасажирів='" + passengerCapacity + '\'' +
	                '}';
	    }
	}
	
	class Body
	{
		private String material;
		private Integer durability;
		
		public Body() {
			System.out.print("\nПустий корпус був створений");
	    }

	    public Body(String material, Integer durability) {
	        this.material = material;
	        this.durability = durability;
	    }

	    public Body(Body other) {
	        this.material = other.material;
	        this.durability = other.durability;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 0;
	    }

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }
	    @Override
	    public String toString() {
	        return "Корпус{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                '}';
	    }
	}
	
	class PairOfOars
	{
		private Oar rightOar;
		private Oar leftOar;
		
	    public PairOfOars() {
	    	System.out.print("\nПуста пара весел була створенна");
	    }

	    public PairOfOars(Oar rightOar, Oar leftOar) {
	        this.rightOar = rightOar;
	        this.leftOar = leftOar;
	    }

	    public PairOfOars(PairOfOars other) {
	        this.rightOar = new Oar(other.rightOar);
	        this.leftOar = new Oar(other.leftOar);
	    }

	    {
	        this.rightOar = new Oar();
	        this.leftOar = new Oar();
	    }
	    
	    public Boolean RowingToForward
	    {
	    	return leftOar.Rowing() && rightOar.Rowing();
	    }
	    
	    public Boolean RowingToBackward
	    {
	    	return leftOar.Rowing() && rightOar.Rowing();
	    }
	    
	    public Boolean RowingToLeft
	    {
	    	return rightOar.Rowing();
	    }
	    
	    public Boolean RowingToRight
	    {
	    	return leftOar.Rowing();
	    }

	    public Oar getRightOar() {
	        return rightOar;
	    }

	    public void setRightOar(Oar rightOar) {
	        this.rightOar = rightOar;
	    }

	    public Oar getLeftOar() {
	        return leftOar;
	    }

	    public void setLeftOar(Oar leftOar) {
	        this.leftOar = leftOar;
	    }
		
	}
	
	class Oar 
	{
		private String material;
		private Integer durability;
		private Integer maxDurability;
		private Integer quality;
		
		public Oar() {
			System.out.print("\nПусте весло було створене");
	    }

	    public Oar(String material, Integer durability, Integer quality) {
	        this.material = material;
	        this.durability = durability;
	        this.quality = quality;
	    }

	    public Oar(Oar other) {
	        this.material = other.material;
	        this.durability = other.durability;
	        this.quality = other.quality;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 1000;
	        this.quality = 30;
	    }
	    
	    public Boolean Rowing()
	    {
	    	if (durability > 0)
	    	{
	    		this.durability -= ((int)(Math.random() * 11)*100)/this.quality;
	    		return true;
	    	}
	    	return false;
	    }
	    
	    public Boolean Repair()
	    {
	    	if (this.maxDurability*this.quality)/100 > this.durability)
	    	{
	    		this.durability = ((this.maxDurability*100)/this.quality)(int)(Math.random() * 1.1);
	    		return true;
	    	}
	    	return false;
	    }
	    

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }

	    public Integer getQuality() {
	        return quality;
	    }

	    public void setQuality(Integer quality) {
	        this.quality = quality;
	    }
	    
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                ", якість=" + quality +
	                '}';
	    }
	}
	
	class Sailer extends Person
	{
		private Integer Stamina;
		private Integer Power;
		private Integer Experience;
		
	    public Sailer() {
	        super();
	        System.out.print("\nПустий, той хто працює веслом, був створений");
	    }

	    public Sailer(String firstname, String lastname, Integer years, Integer Stamina, Integer Power, Integer Experience) {
	        super(firstname, lastname, years);
	        this.Stamina = Stamina;
	        this.Power = Power;
	        this.Experience = Experience;
	    }

	    public Sailer(Sailer other) {
	        super(other);
	        this.Stamina = other.Stamina;
	        this.Power = other.Power;
	        this.Experience = other.Experience;
	    }

	    {
	        this.Stamina = 0;
	        this.Power = 0;
	        this.Experience = 0;
	    }

	    public Integer getStamina() {
	        return Stamina;
	    }

	    public void setStamina(Integer Stamina) {
	        this.Stamina = Stamina;
	    }

	    public Integer getPower() {
	        return Power;
	    }

	    public void setPower(Integer Power) {
	        this.Power = Power;
	    }

	    public Integer getExperience() {
	        return Experience;
	    }

	    public void setExperience(Integer Experience) {
	        this.Experience = Experience;
	    }

	    @Override
	    public String toString() {
	        return "Sailer{" +
	                "ім'я='" + getFirstname() + '\'' +
	                ", прізвище='" + getLastname() + '\'' +
	                ", вік=" + getYears() +
	                ", енергія=" + Stamina +
	                ", потужність=" + Power +
	                ", досвід=" + Experience +
	                '}';
	    }

	}
	
	class Person
	{
		private String firstname;
		private String lastname;
		private Integer years;
		
	    public Person() {
	    	System.out.print("\nПуста людина була створена");
	    }

	    public Person(String firstname, String lastname, Integer years) {
	        this.firstname = firstname;
	        this.lastname = lastname;
	        this.years = years;
	    }

	    public Person(Person other) {
	        this.firstname = other.firstname;
	        this.lastname = other.lastname;
	        this.years = other.years;
	    }

	    {
	        this.firstname = "Невідомо";
	        this.lastname = "Невідомо";
	        this.years = 0;
	    }

	    public String getFirstname() {
	        return firstname;
	    }

	    public void setFirstname(String firstname) {
	        this.firstname = firstname;
	    }

	    public String getLastname() {
	        return lastname;
	    }

	    public void setLastname(String lastname) {
	        this.lastname = lastname;
	    }

	    public Integer getYears() {
	        return years;
	    }

	    public void setYears(Integer years) {
	        this.years = years;
	    }

	    @Override
	    public String toString() {
	        return "Людина{" +
	                "ім'я='" + firstname + '\'' +
	                ", прізвище='" + lastname + '\'' +
	                ", вік=" + years +
	                '}';
	    }
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-09-08 12:03:28.802
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-09-08 12:03:28.802
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-09-08 12:03:28.892
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
/**
 * 
 */
package CI_306.Shyryi.Lab3;

import java.util.List;
import java.util.ArrayList;

/**
 * 
 */
public class BoatOnOars {
	
	private String name;
	private Boat boat;
	private PairOfOars[] pairOfOars;
	private Sailer[] sailer;
	private List<Person> passengers = new ArrayList<>();

    public BoatOnOars() {
    	System.out.print("\nПуста шлюпка на веслах була створенна");
    }

    public BoatOnOars(String name, Boat boat, PairOfOars[] pairOfOars, Sailer[] sailer, List<Person> passengers) {
        this.name = name;
        this.boat = boat;
        this.pairOfOars = pairOfOars;
        this.sailer = sailer;
        this.passengers = passengers;
    }

    public BoatOnOars(BoatOnOars other) {
        this.name = other.name;
        this.boat = new Boat(other.boat);
        this.pairOfOars = other.pairOfOars.clone();
        this.sailer = other.sailer.clone();
        this.passengers = new ArrayList<>(other.passengers);
    }

    {
        this.name = "Невідомо";
        this.boat = new Boat();
        this.pairOfOars = new PairOfOars[2];
        this.sailer = new Sailer[2];
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Boat getBoat() {
        return boat;
    }

    public void setBoat(Boat boat) {
        this.boat = boat;
    }

    public PairOfOars[] getPairOfOars() {
        return pairOfOars;
    }

    public void setPairOfOars(PairOfOars[] pairOfOars) {
        this.pairOfOars = pairOfOars;
    }

    public Sailer[] getSailer() {
        return sailer;
    }

    public void setSailer(Sailer[] sailer) {
        this.sailer = sailer;
    }

    public List<Person> getPassengers() {
        return passengers;
    }

    public void setPassengers(List<Person> passengers) {
        this.passengers = passengers;
    }
	
	class Boat 
	{
		private Deck deck;
		private Body body;

	    public Boat() {
	    	System.out.print("\nПуста шлюпка була створенна");
	    }

	    public Boat(Deck deck, Body body) {
	        this.deck = deck;
	        this.body = body;
	    }

	    public Boat(Boat other) {
	        this.deck = new Deck(other.deck);
	        this.body = new Body(other.body);
	    }

	    {
	        this.deck = new Deck();
	        this.body = new Body();
	    }

	    public Deck getDeck() {
	        return deck;
	    }

	    public void setDeck(Deck deck) {
	        this.deck = deck;
	    }

	    public Body getBody() {
	        return body;
	    }

	    public void setBody(Body body) {
	        this.body = body;
	    }
		
	}
	
	class Deck
	{
		private Integer sailorsCapacity;
		private Integer passengerCapacity;
		
		 public Deck() {
			 System.out.print("\nПуста палуба була створенна");
	    }

	    public Deck(Integer sailorsCapacity, Integer passengerCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	        this.passengerCapacity = passengerCapacity;
	    }

	    public Deck(Deck other) {
	        this.sailorsCapacity = other.sailorsCapacity;
	        this.passengerCapacity = other.passengerCapacity;
	    }

	    {
	        this.sailorsCapacity = 0;
	        this.passengerCapacity = 0;
	    }

	    public Integer getSailorsCapacity() {
	        return sailorsCapacity;
	    }

	    public void setSailorsCapacity(Integer sailorsCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	    }

	    public Integer getPassengerCapacity() {
	        return passengerCapacity;
	    }

	    public void setPassengerCapacity(Integer passengerCapacity) {
	        this.passengerCapacity = passengerCapacity;
	    }
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "кількість of sailors='" + sailorsCapacity + '\'' +
	                ", кількість пасажирів='" + passengerCapacity + '\'' +
	                '}';
	    }
	}
	
	class Body
	{
		private String material;
		private Integer durability;
		
		public Body() {
			System.out.print("\nПустий корпус був створений");
	    }

	    public Body(String material, Integer durability) {
	        this.material = material;
	        this.durability = durability;
	    }

	    public Body(Body other) {
	        this.material = other.material;
	        this.durability = other.durability;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 0;
	    }

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }
	    @Override
	    public String toString() {
	        return "Корпус{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                '}';
	    }
	}
	
	class PairOfOars
	{
		private Oar rightOar;
		private Oar leftOar;
		
	    public PairOfOars() {
	    	System.out.print("\nПуста пара весел була створенна");
	    }

	    public PairOfOars(Oar rightOar, Oar leftOar) {
	        this.rightOar = rightOar;
	        this.leftOar = leftOar;
	    }

	    public PairOfOars(PairOfOars other) {
	        this.rightOar = new Oar(other.rightOar);
	        this.leftOar = new Oar(other.leftOar);
	    }

	    {
	        this.rightOar = new Oar();
	        this.leftOar = new Oar();
	    }
	    
	    public Boolean RowingToForward
	    {
	    	return leftOar.Rowing() && rightOar.Rowing();
	    }
	    
	    public Boolean RowingToBackward
	    {
	    	return leftOar.Rowing() && rightOar.Rowing();
	    }
	    
	    public Boolean RowingToLeft
	    {
	    	return rightOar.Rowing();
	    }
	    
	    public Boolean RowingToRight
	    {
	    	return leftOar.Rowing();
	    }

	    public Oar getRightOar() {
	        return rightOar;
	    }

	    public void setRightOar(Oar rightOar) {
	        this.rightOar = rightOar;
	    }

	    public Oar getLeftOar() {
	        return leftOar;
	    }

	    public void setLeftOar(Oar leftOar) {
	        this.leftOar = leftOar;
	    }
		
	}
	
	class Oar 
	{
		private String material;
		private Integer durability;
		private Integer maxDurability;
		private Integer quality;
		
		public Oar() {
			System.out.print("\nПусте весло було створене");
	    }

	    public Oar(String material, Integer durability, Integer quality) {
	        this.material = material;
	        this.durability = durability;
	        this.quality = quality;
	    }

	    public Oar(Oar other) {
	        this.material = other.material;
	        this.durability = other.durability;
	        this.quality = other.quality;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 1000;
	        this.quality = 30;
	    }
	    
	    public Boolean Rowing()
	    {
	    	if (durability > 0)
	    	{
	    		this.durability -= ((int)(Math.random() * 11)*100)/this.quality;
	    		return true;
	    	}
	    	return false;
	    }
	    
	    public Boolean Repair()
	    {
	    	if (this.maxDurability*this.quality)/100 > this.durability)
	    	{
	    		this.durability = ((this.maxDurability*100)/this.quality)(int)(Math.random() * 1.1);
	    		return true;
	    	}
	    	return false;
	    }
	    

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }

	    public Integer getQuality() {
	        return quality;
	    }

	    public void setQuality(Integer quality) {
	        this.quality = quality;
	    }
	    
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                ", якість=" + quality +
	                '}';
	    }
	}
	
	class Sailer extends Person
	{
		private Integer Stamina;
		private Integer Power;
		private Integer Experience;
		
	    public Sailer() {
	        super();
	        System.out.print("\nПустий, той хто працює веслом, був створений");
	    }

	    public Sailer(String firstname, String lastname, Integer years, Integer Stamina, Integer Power, Integer Experience) {
	        super(firstname, lastname, years);
	        this.Stamina = Stamina;
	        this.Power = Power;
	        this.Experience = Experience;
	    }

	    public Sailer(Sailer other) {
	        super(other);
	        this.Stamina = other.Stamina;
	        this.Power = other.Power;
	        this.Experience = other.Experience;
	    }

	    {
	        this.Stamina = 0;
	        this.Power = 0;
	        this.Experience = 0;
	    }

	    public Integer getStamina() {
	        return Stamina;
	    }

	    public void setStamina(Integer Stamina) {
	        this.Stamina = Stamina;
	    }

	    public Integer getPower() {
	        return Power;
	    }

	    public void setPower(Integer Power) {
	        this.Power = Power;
	    }

	    public Integer getExperience() {
	        return Experience;
	    }

	    public void setExperience(Integer Experience) {
	        this.Experience = Experience;
	    }

	    @Override
	    public String toString() {
	        return "Sailer{" +
	                "ім'я='" + getFirstname() + '\'' +
	                ", прізвище='" + getLastname() + '\'' +
	                ", вік=" + getYears() +
	                ", енергія=" + Stamina +
	                ", потужність=" + Power +
	                ", досвід=" + Experience +
	                '}';
	    }

	}
	
	class Person
	{
		private String firstname;
		private String lastname;
		private Integer years;
		
	    public Person() {
	    	System.out.print("\nПуста людина була створена");
	    }

	    public Person(String firstname, String lastname, Integer years) {
	        this.firstname = firstname;
	        this.lastname = lastname;
	        this.years = years;
	    }

	    public Person(Person other) {
	        this.firstname = other.firstname;
	        this.lastname = other.lastname;
	        this.years = other.years;
	    }

	    {
	        this.firstname = "Невідомо";
	        this.lastname = "Невідомо";
	        this.years = 0;
	    }

	    public String getFirstname() {
	        return firstname;
	    }

	    public void setFirstname(String firstname) {
	        this.firstname = firstname;
	    }

	    public String getLastname() {
	        return lastname;
	    }

	    public void setLastname(String lastname) {
	        this.lastname = lastname;
	    }

	    public Integer getYears() {
	        return years;
	    }

	    public void setYears(Integer years) {
	        this.years = years;
	    }

	    @Override
	    public String toString() {
	        return "Людина{" +
	                "ім'я='" + firstname + '\'' +
	                ", прізвище='" + lastname + '\'' +
	                ", вік=" + years +
	                '}';
	    }
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-09-08 12:03:28.893
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-09-08 12:03:28.893
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-09-08 12:03:34.554
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
/**
 * 
 */
package CI_306.Shyryi.Lab3;

import java.util.List;
import java.util.ArrayList;

/**
 * 
 */
public class BoatOnOars {
	
	private String name;
	private Boat boat;
	private PairOfOars[] pairOfOars;
	private Sailer[] sailer;
	private List<Person> passengers = new ArrayList<>();

    public BoatOnOars() {
    	System.out.print("\nПуста шлюпка на веслах була створенна");
    }

    public BoatOnOars(String name, Boat boat, PairOfOars[] pairOfOars, Sailer[] sailer, List<Person> passengers) {
        this.name = name;
        this.boat = boat;
        this.pairOfOars = pairOfOars;
        this.sailer = sailer;
        this.passengers = passengers;
    }

    public BoatOnOars(BoatOnOars other) {
        this.name = other.name;
        this.boat = new Boat(other.boat);
        this.pairOfOars = other.pairOfOars.clone();
        this.sailer = other.sailer.clone();
        this.passengers = new ArrayList<>(other.passengers);
    }

    {
        this.name = "Невідомо";
        this.boat = new Boat();
        this.pairOfOars = new PairOfOars[2];
        this.sailer = new Sailer[2];
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Boat getBoat() {
        return boat;
    }

    public void setBoat(Boat boat) {
        this.boat = boat;
    }

    public PairOfOars[] getPairOfOars() {
        return pairOfOars;
    }

    public void setPairOfOars(PairOfOars[] pairOfOars) {
        this.pairOfOars = pairOfOars;
    }

    public Sailer[] getSailer() {
        return sailer;
    }

    public void setSailer(Sailer[] sailer) {
        this.sailer = sailer;
    }

    public List<Person> getPassengers() {
        return passengers;
    }

    public void setPassengers(List<Person> passengers) {
        this.passengers = passengers;
    }
	
	class Boat 
	{
		private Deck deck;
		private Body body;

	    public Boat() {
	    	System.out.print("\nПуста шлюпка була створенна");
	    }

	    public Boat(Deck deck, Body body) {
	        this.deck = deck;
	        this.body = body;
	    }

	    public Boat(Boat other) {
	        this.deck = new Deck(other.deck);
	        this.body = new Body(other.body);
	    }

	    {
	        this.deck = new Deck();
	        this.body = new Body();
	    }

	    public Deck getDeck() {
	        return deck;
	    }

	    public void setDeck(Deck deck) {
	        this.deck = deck;
	    }

	    public Body getBody() {
	        return body;
	    }

	    public void setBody(Body body) {
	        this.body = body;
	    }
		
	}
	
	class Deck
	{
		private Integer sailorsCapacity;
		private Integer passengerCapacity;
		
		 public Deck() {
			 System.out.print("\nПуста палуба була створенна");
	    }

	    public Deck(Integer sailorsCapacity, Integer passengerCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	        this.passengerCapacity = passengerCapacity;
	    }

	    public Deck(Deck other) {
	        this.sailorsCapacity = other.sailorsCapacity;
	        this.passengerCapacity = other.passengerCapacity;
	    }

	    {
	        this.sailorsCapacity = 0;
	        this.passengerCapacity = 0;
	    }

	    public Integer getSailorsCapacity() {
	        return sailorsCapacity;
	    }

	    public void setSailorsCapacity(Integer sailorsCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	    }

	    public Integer getPassengerCapacity() {
	        return passengerCapacity;
	    }

	    public void setPassengerCapacity(Integer passengerCapacity) {
	        this.passengerCapacity = passengerCapacity;
	    }
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "кількість of sailors='" + sailorsCapacity + '\'' +
	                ", кількість пасажирів='" + passengerCapacity + '\'' +
	                '}';
	    }
	}
	
	class Body
	{
		private String material;
		private Integer durability;
		
		public Body() {
			System.out.print("\nПустий корпус був створений");
	    }

	    public Body(String material, Integer durability) {
	        this.material = material;
	        this.durability = durability;
	    }

	    public Body(Body other) {
	        this.material = other.material;
	        this.durability = other.durability;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 0;
	    }

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }
	    @Override
	    public String toString() {
	        return "Корпус{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                '}';
	    }
	}
	
	class PairOfOars
	{
		private Oar rightOar;
		private Oar leftOar;
		
	    public PairOfOars() {
	    	System.out.print("\nПуста пара весел була створенна");
	    }

	    public PairOfOars(Oar rightOar, Oar leftOar) {
	        this.rightOar = rightOar;
	        this.leftOar = leftOar;
	    }

	    public PairOfOars(PairOfOars other) {
	        this.rightOar = new Oar(other.rightOar);
	        this.leftOar = new Oar(other.leftOar);
	    }

	    {
	        this.rightOar = new Oar();
	        this.leftOar = new Oar();
	    }
	    
	    public Boolean RowingToForward
	    {
	    	return leftOar.Rowing() && rightOar.Rowing();
	    }
	    
	    public Boolean RowingToBackward
	    {
	    	return leftOar.Rowing() && rightOar.Rowing();
	    }
	    
	    public Boolean RowingToLeft
	    {
	    	return rightOar.Rowing();
	    }
	    
	    public Boolean RowingToRight
	    {
	    	return leftOar.Rowing();
	    }

	    public Oar getRightOar() {
	        return rightOar;
	    }

	    public void setRightOar(Oar rightOar) {
	        this.rightOar = rightOar;
	    }

	    public Oar getLeftOar() {
	        return leftOar;
	    }

	    public void setLeftOar(Oar leftOar) {
	        this.leftOar = leftOar;
	    }
		
	}
	
	class Oar 
	{
		private String material;
		private Integer durability;
		private Integer maxDurability;
		private Integer quality;
		
		public Oar() {
			System.out.print("\nПусте весло було створене");
	    }

	    public Oar(String material, Integer durability, Integer quality) {
	        this.material = material;
	        this.durability = durability;
	        this.quality = quality;
	    }

	    public Oar(Oar other) {
	        this.material = other.material;
	        this.durability = other.durability;
	        this.quality = other.quality;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 1000;
	        this.quality = 30;
	    }
	    
	    public Boolean Rowing(Іф)
	    {
	    	if (durability > 0)
	    	{
	    		this.durability -= ((int)(Math.random() * 11)*100)/this.quality;
	    		return true;
	    	}
	    	return false;
	    }
	    
	    public Boolean Repair()
	    {
	    	if (this.maxDurability*this.quality)/100 > this.durability)
	    	{
	    		this.durability = ((this.maxDurability*100)/this.quality)(int)(Math.random() * 1.1);
	    		return true;
	    	}
	    	return false;
	    }
	    

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }

	    public Integer getQuality() {
	        return quality;
	    }

	    public void setQuality(Integer quality) {
	        this.quality = quality;
	    }
	    
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                ", якість=" + quality +
	                '}';
	    }
	}
	
	class Sailer extends Person
	{
		private Integer Stamina;
		private Integer Power;
		private Integer Experience;
		
	    public Sailer() {
	        super();
	        System.out.print("\nПустий, той хто працює веслом, був створений");
	    }

	    public Sailer(String firstname, String lastname, Integer years, Integer Stamina, Integer Power, Integer Experience) {
	        super(firstname, lastname, years);
	        this.Stamina = Stamina;
	        this.Power = Power;
	        this.Experience = Experience;
	    }

	    public Sailer(Sailer other) {
	        super(other);
	        this.Stamina = other.Stamina;
	        this.Power = other.Power;
	        this.Experience = other.Experience;
	    }

	    {
	        this.Stamina = 0;
	        this.Power = 0;
	        this.Experience = 0;
	    }

	    public Integer getStamina() {
	        return Stamina;
	    }

	    public void setStamina(Integer Stamina) {
	        this.Stamina = Stamina;
	    }

	    public Integer getPower() {
	        return Power;
	    }

	    public void setPower(Integer Power) {
	        this.Power = Power;
	    }

	    public Integer getExperience() {
	        return Experience;
	    }

	    public void setExperience(Integer Experience) {
	        this.Experience = Experience;
	    }

	    @Override
	    public String toString() {
	        return "Sailer{" +
	                "ім'я='" + getFirstname() + '\'' +
	                ", прізвище='" + getLastname() + '\'' +
	                ", вік=" + getYears() +
	                ", енергія=" + Stamina +
	                ", потужність=" + Power +
	                ", досвід=" + Experience +
	                '}';
	    }

	}
	
	class Person
	{
		private String firstname;
		private String lastname;
		private Integer years;
		
	    public Person() {
	    	System.out.print("\nПуста людина була створена");
	    }

	    public Person(String firstname, String lastname, Integer years) {
	        this.firstname = firstname;
	        this.lastname = lastname;
	        this.years = years;
	    }

	    public Person(Person other) {
	        this.firstname = other.firstname;
	        this.lastname = other.lastname;
	        this.years = other.years;
	    }

	    {
	        this.firstname = "Невідомо";
	        this.lastname = "Невідомо";
	        this.years = 0;
	    }

	    public String getFirstname() {
	        return firstname;
	    }

	    public void setFirstname(String firstname) {
	        this.firstname = firstname;
	    }

	    public String getLastname() {
	        return lastname;
	    }

	    public void setLastname(String lastname) {
	        this.lastname = lastname;
	    }

	    public Integer getYears() {
	        return years;
	    }

	    public void setYears(Integer years) {
	        this.years = years;
	    }

	    @Override
	    public String toString() {
	        return "Людина{" +
	                "ім'я='" + firstname + '\'' +
	                ", прізвище='" + lastname + '\'' +
	                ", вік=" + years +
	                '}';
	    }
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-09-08 12:03:34.555
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-09-08 12:03:34.555
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-09-08 12:03:34.626
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
/**
 * 
 */
package CI_306.Shyryi.Lab3;

import java.util.List;
import java.util.ArrayList;

/**
 * 
 */
public class BoatOnOars {
	
	private String name;
	private Boat boat;
	private PairOfOars[] pairOfOars;
	private Sailer[] sailer;
	private List<Person> passengers = new ArrayList<>();

    public BoatOnOars() {
    	System.out.print("\nПуста шлюпка на веслах була створенна");
    }

    public BoatOnOars(String name, Boat boat, PairOfOars[] pairOfOars, Sailer[] sailer, List<Person> passengers) {
        this.name = name;
        this.boat = boat;
        this.pairOfOars = pairOfOars;
        this.sailer = sailer;
        this.passengers = passengers;
    }

    public BoatOnOars(BoatOnOars other) {
        this.name = other.name;
        this.boat = new Boat(other.boat);
        this.pairOfOars = other.pairOfOars.clone();
        this.sailer = other.sailer.clone();
        this.passengers = new ArrayList<>(other.passengers);
    }

    {
        this.name = "Невідомо";
        this.boat = new Boat();
        this.pairOfOars = new PairOfOars[2];
        this.sailer = new Sailer[2];
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Boat getBoat() {
        return boat;
    }

    public void setBoat(Boat boat) {
        this.boat = boat;
    }

    public PairOfOars[] getPairOfOars() {
        return pairOfOars;
    }

    public void setPairOfOars(PairOfOars[] pairOfOars) {
        this.pairOfOars = pairOfOars;
    }

    public Sailer[] getSailer() {
        return sailer;
    }

    public void setSailer(Sailer[] sailer) {
        this.sailer = sailer;
    }

    public List<Person> getPassengers() {
        return passengers;
    }

    public void setPassengers(List<Person> passengers) {
        this.passengers = passengers;
    }
	
	class Boat 
	{
		private Deck deck;
		private Body body;

	    public Boat() {
	    	System.out.print("\nПуста шлюпка була створенна");
	    }

	    public Boat(Deck deck, Body body) {
	        this.deck = deck;
	        this.body = body;
	    }

	    public Boat(Boat other) {
	        this.deck = new Deck(other.deck);
	        this.body = new Body(other.body);
	    }

	    {
	        this.deck = new Deck();
	        this.body = new Body();
	    }

	    public Deck getDeck() {
	        return deck;
	    }

	    public void setDeck(Deck deck) {
	        this.deck = deck;
	    }

	    public Body getBody() {
	        return body;
	    }

	    public void setBody(Body body) {
	        this.body = body;
	    }
		
	}
	
	class Deck
	{
		private Integer sailorsCapacity;
		private Integer passengerCapacity;
		
		 public Deck() {
			 System.out.print("\nПуста палуба була створенна");
	    }

	    public Deck(Integer sailorsCapacity, Integer passengerCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	        this.passengerCapacity = passengerCapacity;
	    }

	    public Deck(Deck other) {
	        this.sailorsCapacity = other.sailorsCapacity;
	        this.passengerCapacity = other.passengerCapacity;
	    }

	    {
	        this.sailorsCapacity = 0;
	        this.passengerCapacity = 0;
	    }

	    public Integer getSailorsCapacity() {
	        return sailorsCapacity;
	    }

	    public void setSailorsCapacity(Integer sailorsCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	    }

	    public Integer getPassengerCapacity() {
	        return passengerCapacity;
	    }

	    public void setPassengerCapacity(Integer passengerCapacity) {
	        this.passengerCapacity = passengerCapacity;
	    }
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "кількість of sailors='" + sailorsCapacity + '\'' +
	                ", кількість пасажирів='" + passengerCapacity + '\'' +
	                '}';
	    }
	}
	
	class Body
	{
		private String material;
		private Integer durability;
		
		public Body() {
			System.out.print("\nПустий корпус був створений");
	    }

	    public Body(String material, Integer durability) {
	        this.material = material;
	        this.durability = durability;
	    }

	    public Body(Body other) {
	        this.material = other.material;
	        this.durability = other.durability;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 0;
	    }

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }
	    @Override
	    public String toString() {
	        return "Корпус{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                '}';
	    }
	}
	
	class PairOfOars
	{
		private Oar rightOar;
		private Oar leftOar;
		
	    public PairOfOars() {
	    	System.out.print("\nПуста пара весел була створенна");
	    }

	    public PairOfOars(Oar rightOar, Oar leftOar) {
	        this.rightOar = rightOar;
	        this.leftOar = leftOar;
	    }

	    public PairOfOars(PairOfOars other) {
	        this.rightOar = new Oar(other.rightOar);
	        this.leftOar = new Oar(other.leftOar);
	    }

	    {
	        this.rightOar = new Oar();
	        this.leftOar = new Oar();
	    }
	    
	    public Boolean RowingToForward
	    {
	    	return leftOar.Rowing() && rightOar.Rowing();
	    }
	    
	    public Boolean RowingToBackward
	    {
	    	return leftOar.Rowing() && rightOar.Rowing();
	    }
	    
	    public Boolean RowingToLeft
	    {
	    	return rightOar.Rowing();
	    }
	    
	    public Boolean RowingToRight
	    {
	    	return leftOar.Rowing();
	    }

	    public Oar getRightOar() {
	        return rightOar;
	    }

	    public void setRightOar(Oar rightOar) {
	        this.rightOar = rightOar;
	    }

	    public Oar getLeftOar() {
	        return leftOar;
	    }

	    public void setLeftOar(Oar leftOar) {
	        this.leftOar = leftOar;
	    }
		
	}
	
	class Oar 
	{
		private String material;
		private Integer durability;
		private Integer maxDurability;
		private Integer quality;
		
		public Oar() {
			System.out.print("\nПусте весло було створене");
	    }

	    public Oar(String material, Integer durability, Integer quality) {
	        this.material = material;
	        this.durability = durability;
	        this.quality = quality;
	    }

	    public Oar(Oar other) {
	        this.material = other.material;
	        this.durability = other.durability;
	        this.quality = other.quality;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 1000;
	        this.quality = 30;
	    }
	    
	    public Boolean Rowing(Іф)
	    {
	    	if (durability > 0)
	    	{
	    		this.durability -= ((int)(Math.random() * 11)*100)/this.quality;
	    		return true;
	    	}
	    	return false;
	    }
	    
	    public Boolean Repair()
	    {
	    	if (this.maxDurability*this.quality)/100 > this.durability)
	    	{
	    		this.durability = ((this.maxDurability*100)/this.quality)(int)(Math.random() * 1.1);
	    		return true;
	    	}
	    	return false;
	    }
	    

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }

	    public Integer getQuality() {
	        return quality;
	    }

	    public void setQuality(Integer quality) {
	        this.quality = quality;
	    }
	    
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                ", якість=" + quality +
	                '}';
	    }
	}
	
	class Sailer extends Person
	{
		private Integer Stamina;
		private Integer Power;
		private Integer Experience;
		
	    public Sailer() {
	        super();
	        System.out.print("\nПустий, той хто працює веслом, був створений");
	    }

	    public Sailer(String firstname, String lastname, Integer years, Integer Stamina, Integer Power, Integer Experience) {
	        super(firstname, lastname, years);
	        this.Stamina = Stamina;
	        this.Power = Power;
	        this.Experience = Experience;
	    }

	    public Sailer(Sailer other) {
	        super(other);
	        this.Stamina = other.Stamina;
	        this.Power = other.Power;
	        this.Experience = other.Experience;
	    }

	    {
	        this.Stamina = 0;
	        this.Power = 0;
	        this.Experience = 0;
	    }

	    public Integer getStamina() {
	        return Stamina;
	    }

	    public void setStamina(Integer Stamina) {
	        this.Stamina = Stamina;
	    }

	    public Integer getPower() {
	        return Power;
	    }

	    public void setPower(Integer Power) {
	        this.Power = Power;
	    }

	    public Integer getExperience() {
	        return Experience;
	    }

	    public void setExperience(Integer Experience) {
	        this.Experience = Experience;
	    }

	    @Override
	    public String toString() {
	        return "Sailer{" +
	                "ім'я='" + getFirstname() + '\'' +
	                ", прізвище='" + getLastname() + '\'' +
	                ", вік=" + getYears() +
	                ", енергія=" + Stamina +
	                ", потужність=" + Power +
	                ", досвід=" + Experience +
	                '}';
	    }

	}
	
	class Person
	{
		private String firstname;
		private String lastname;
		private Integer years;
		
	    public Person() {
	    	System.out.print("\nПуста людина була створена");
	    }

	    public Person(String firstname, String lastname, Integer years) {
	        this.firstname = firstname;
	        this.lastname = lastname;
	        this.years = years;
	    }

	    public Person(Person other) {
	        this.firstname = other.firstname;
	        this.lastname = other.lastname;
	        this.years = other.years;
	    }

	    {
	        this.firstname = "Невідомо";
	        this.lastname = "Невідомо";
	        this.years = 0;
	    }

	    public String getFirstname() {
	        return firstname;
	    }

	    public void setFirstname(String firstname) {
	        this.firstname = firstname;
	    }

	    public String getLastname() {
	        return lastname;
	    }

	    public void setLastname(String lastname) {
	        this.lastname = lastname;
	    }

	    public Integer getYears() {
	        return years;
	    }

	    public void setYears(Integer years) {
	        this.years = years;
	    }

	    @Override
	    public String toString() {
	        return "Людина{" +
	                "ім'я='" + firstname + '\'' +
	                ", прізвище='" + lastname + '\'' +
	                ", вік=" + years +
	                '}';
	    }
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-09-08 12:03:34.627
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-09-08 12:03:34.627
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-09-08 12:03:35.370
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
/**
 * 
 */
package CI_306.Shyryi.Lab3;

import java.util.List;
import java.util.ArrayList;

/**
 * 
 */
public class BoatOnOars {
	
	private String name;
	private Boat boat;
	private PairOfOars[] pairOfOars;
	private Sailer[] sailer;
	private List<Person> passengers = new ArrayList<>();

    public BoatOnOars() {
    	System.out.print("\nПуста шлюпка на веслах була створенна");
    }

    public BoatOnOars(String name, Boat boat, PairOfOars[] pairOfOars, Sailer[] sailer, List<Person> passengers) {
        this.name = name;
        this.boat = boat;
        this.pairOfOars = pairOfOars;
        this.sailer = sailer;
        this.passengers = passengers;
    }

    public BoatOnOars(BoatOnOars other) {
        this.name = other.name;
        this.boat = new Boat(other.boat);
        this.pairOfOars = other.pairOfOars.clone();
        this.sailer = other.sailer.clone();
        this.passengers = new ArrayList<>(other.passengers);
    }

    {
        this.name = "Невідомо";
        this.boat = new Boat();
        this.pairOfOars = new PairOfOars[2];
        this.sailer = new Sailer[2];
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Boat getBoat() {
        return boat;
    }

    public void setBoat(Boat boat) {
        this.boat = boat;
    }

    public PairOfOars[] getPairOfOars() {
        return pairOfOars;
    }

    public void setPairOfOars(PairOfOars[] pairOfOars) {
        this.pairOfOars = pairOfOars;
    }

    public Sailer[] getSailer() {
        return sailer;
    }

    public void setSailer(Sailer[] sailer) {
        this.sailer = sailer;
    }

    public List<Person> getPassengers() {
        return passengers;
    }

    public void setPassengers(List<Person> passengers) {
        this.passengers = passengers;
    }
	
	class Boat 
	{
		private Deck deck;
		private Body body;

	    public Boat() {
	    	System.out.print("\nПуста шлюпка була створенна");
	    }

	    public Boat(Deck deck, Body body) {
	        this.deck = deck;
	        this.body = body;
	    }

	    public Boat(Boat other) {
	        this.deck = new Deck(other.deck);
	        this.body = new Body(other.body);
	    }

	    {
	        this.deck = new Deck();
	        this.body = new Body();
	    }

	    public Deck getDeck() {
	        return deck;
	    }

	    public void setDeck(Deck deck) {
	        this.deck = deck;
	    }

	    public Body getBody() {
	        return body;
	    }

	    public void setBody(Body body) {
	        this.body = body;
	    }
		
	}
	
	class Deck
	{
		private Integer sailorsCapacity;
		private Integer passengerCapacity;
		
		 public Deck() {
			 System.out.print("\nПуста палуба була створенна");
	    }

	    public Deck(Integer sailorsCapacity, Integer passengerCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	        this.passengerCapacity = passengerCapacity;
	    }

	    public Deck(Deck other) {
	        this.sailorsCapacity = other.sailorsCapacity;
	        this.passengerCapacity = other.passengerCapacity;
	    }

	    {
	        this.sailorsCapacity = 0;
	        this.passengerCapacity = 0;
	    }

	    public Integer getSailorsCapacity() {
	        return sailorsCapacity;
	    }

	    public void setSailorsCapacity(Integer sailorsCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	    }

	    public Integer getPassengerCapacity() {
	        return passengerCapacity;
	    }

	    public void setPassengerCapacity(Integer passengerCapacity) {
	        this.passengerCapacity = passengerCapacity;
	    }
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "кількість of sailors='" + sailorsCapacity + '\'' +
	                ", кількість пасажирів='" + passengerCapacity + '\'' +
	                '}';
	    }
	}
	
	class Body
	{
		private String material;
		private Integer durability;
		
		public Body() {
			System.out.print("\nПустий корпус був створений");
	    }

	    public Body(String material, Integer durability) {
	        this.material = material;
	        this.durability = durability;
	    }

	    public Body(Body other) {
	        this.material = other.material;
	        this.durability = other.durability;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 0;
	    }

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }
	    @Override
	    public String toString() {
	        return "Корпус{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                '}';
	    }
	}
	
	class PairOfOars
	{
		private Oar rightOar;
		private Oar leftOar;
		
	    public PairOfOars() {
	    	System.out.print("\nПуста пара весел була створенна");
	    }

	    public PairOfOars(Oar rightOar, Oar leftOar) {
	        this.rightOar = rightOar;
	        this.leftOar = leftOar;
	    }

	    public PairOfOars(PairOfOars other) {
	        this.rightOar = new Oar(other.rightOar);
	        this.leftOar = new Oar(other.leftOar);
	    }

	    {
	        this.rightOar = new Oar();
	        this.leftOar = new Oar();
	    }
	    
	    public Boolean RowingToForward
	    {
	    	return leftOar.Rowing() && rightOar.Rowing();
	    }
	    
	    public Boolean RowingToBackward
	    {
	    	return leftOar.Rowing() && rightOar.Rowing();
	    }
	    
	    public Boolean RowingToLeft
	    {
	    	return rightOar.Rowing();
	    }
	    
	    public Boolean RowingToRight
	    {
	    	return leftOar.Rowing();
	    }

	    public Oar getRightOar() {
	        return rightOar;
	    }

	    public void setRightOar(Oar rightOar) {
	        this.rightOar = rightOar;
	    }

	    public Oar getLeftOar() {
	        return leftOar;
	    }

	    public void setLeftOar(Oar leftOar) {
	        this.leftOar = leftOar;
	    }
		
	}
	
	class Oar 
	{
		private String material;
		private Integer durability;
		private Integer maxDurability;
		private Integer quality;
		
		public Oar() {
			System.out.print("\nПусте весло було створене");
	    }

	    public Oar(String material, Integer durability, Integer quality) {
	        this.material = material;
	        this.durability = durability;
	        this.quality = quality;
	    }

	    public Oar(Oar other) {
	        this.material = other.material;
	        this.durability = other.durability;
	        this.quality = other.quality;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 1000;
	        this.quality = 30;
	    }
	    
	    public Boolean Rowing()
	    {
	    	if (durability > 0)
	    	{
	    		this.durability -= ((int)(Math.random() * 11)*100)/this.quality;
	    		return true;
	    	}
	    	return false;
	    }
	    
	    public Boolean Repair()
	    {
	    	if (this.maxDurability*this.quality)/100 > this.durability)
	    	{
	    		this.durability = ((this.maxDurability*100)/this.quality)(int)(Math.random() * 1.1);
	    		return true;
	    	}
	    	return false;
	    }
	    

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }

	    public Integer getQuality() {
	        return quality;
	    }

	    public void setQuality(Integer quality) {
	        this.quality = quality;
	    }
	    
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                ", якість=" + quality +
	                '}';
	    }
	}
	
	class Sailer extends Person
	{
		private Integer Stamina;
		private Integer Power;
		private Integer Experience;
		
	    public Sailer() {
	        super();
	        System.out.print("\nПустий, той хто працює веслом, був створений");
	    }

	    public Sailer(String firstname, String lastname, Integer years, Integer Stamina, Integer Power, Integer Experience) {
	        super(firstname, lastname, years);
	        this.Stamina = Stamina;
	        this.Power = Power;
	        this.Experience = Experience;
	    }

	    public Sailer(Sailer other) {
	        super(other);
	        this.Stamina = other.Stamina;
	        this.Power = other.Power;
	        this.Experience = other.Experience;
	    }

	    {
	        this.Stamina = 0;
	        this.Power = 0;
	        this.Experience = 0;
	    }

	    public Integer getStamina() {
	        return Stamina;
	    }

	    public void setStamina(Integer Stamina) {
	        this.Stamina = Stamina;
	    }

	    public Integer getPower() {
	        return Power;
	    }

	    public void setPower(Integer Power) {
	        this.Power = Power;
	    }

	    public Integer getExperience() {
	        return Experience;
	    }

	    public void setExperience(Integer Experience) {
	        this.Experience = Experience;
	    }

	    @Override
	    public String toString() {
	        return "Sailer{" +
	                "ім'я='" + getFirstname() + '\'' +
	                ", прізвище='" + getLastname() + '\'' +
	                ", вік=" + getYears() +
	                ", енергія=" + Stamina +
	                ", потужність=" + Power +
	                ", досвід=" + Experience +
	                '}';
	    }

	}
	
	class Person
	{
		private String firstname;
		private String lastname;
		private Integer years;
		
	    public Person() {
	    	System.out.print("\nПуста людина була створена");
	    }

	    public Person(String firstname, String lastname, Integer years) {
	        this.firstname = firstname;
	        this.lastname = lastname;
	        this.years = years;
	    }

	    public Person(Person other) {
	        this.firstname = other.firstname;
	        this.lastname = other.lastname;
	        this.years = other.years;
	    }

	    {
	        this.firstname = "Невідомо";
	        this.lastname = "Невідомо";
	        this.years = 0;
	    }

	    public String getFirstname() {
	        return firstname;
	    }

	    public void setFirstname(String firstname) {
	        this.firstname = firstname;
	    }

	    public String getLastname() {
	        return lastname;
	    }

	    public void setLastname(String lastname) {
	        this.lastname = lastname;
	    }

	    public Integer getYears() {
	        return years;
	    }

	    public void setYears(Integer years) {
	        this.years = years;
	    }

	    @Override
	    public String toString() {
	        return "Людина{" +
	                "ім'я='" + firstname + '\'' +
	                ", прізвище='" + lastname + '\'' +
	                ", вік=" + years +
	                '}';
	    }
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-09-08 12:03:35.371
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-09-08 12:03:35.371
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-09-08 12:03:36.578
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
/**
 * 
 */
package CI_306.Shyryi.Lab3;

import java.util.List;
import java.util.ArrayList;

/**
 * 
 */
public class BoatOnOars {
	
	private String name;
	private Boat boat;
	private PairOfOars[] pairOfOars;
	private Sailer[] sailer;
	private List<Person> passengers = new ArrayList<>();

    public BoatOnOars() {
    	System.out.print("\nПуста шлюпка на веслах була створенна");
    }

    public BoatOnOars(String name, Boat boat, PairOfOars[] pairOfOars, Sailer[] sailer, List<Person> passengers) {
        this.name = name;
        this.boat = boat;
        this.pairOfOars = pairOfOars;
        this.sailer = sailer;
        this.passengers = passengers;
    }

    public BoatOnOars(BoatOnOars other) {
        this.name = other.name;
        this.boat = new Boat(other.boat);
        this.pairOfOars = other.pairOfOars.clone();
        this.sailer = other.sailer.clone();
        this.passengers = new ArrayList<>(other.passengers);
    }

    {
        this.name = "Невідомо";
        this.boat = new Boat();
        this.pairOfOars = new PairOfOars[2];
        this.sailer = new Sailer[2];
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Boat getBoat() {
        return boat;
    }

    public void setBoat(Boat boat) {
        this.boat = boat;
    }

    public PairOfOars[] getPairOfOars() {
        return pairOfOars;
    }

    public void setPairOfOars(PairOfOars[] pairOfOars) {
        this.pairOfOars = pairOfOars;
    }

    public Sailer[] getSailer() {
        return sailer;
    }

    public void setSailer(Sailer[] sailer) {
        this.sailer = sailer;
    }

    public List<Person> getPassengers() {
        return passengers;
    }

    public void setPassengers(List<Person> passengers) {
        this.passengers = passengers;
    }
	
	class Boat 
	{
		private Deck deck;
		private Body body;

	    public Boat() {
	    	System.out.print("\nПуста шлюпка була створенна");
	    }

	    public Boat(Deck deck, Body body) {
	        this.deck = deck;
	        this.body = body;
	    }

	    public Boat(Boat other) {
	        this.deck = new Deck(other.deck);
	        this.body = new Body(other.body);
	    }

	    {
	        this.deck = new Deck();
	        this.body = new Body();
	    }

	    public Deck getDeck() {
	        return deck;
	    }

	    public void setDeck(Deck deck) {
	        this.deck = deck;
	    }

	    public Body getBody() {
	        return body;
	    }

	    public void setBody(Body body) {
	        this.body = body;
	    }
		
	}
	
	class Deck
	{
		private Integer sailorsCapacity;
		private Integer passengerCapacity;
		
		 public Deck() {
			 System.out.print("\nПуста палуба була створенна");
	    }

	    public Deck(Integer sailorsCapacity, Integer passengerCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	        this.passengerCapacity = passengerCapacity;
	    }

	    public Deck(Deck other) {
	        this.sailorsCapacity = other.sailorsCapacity;
	        this.passengerCapacity = other.passengerCapacity;
	    }

	    {
	        this.sailorsCapacity = 0;
	        this.passengerCapacity = 0;
	    }

	    public Integer getSailorsCapacity() {
	        return sailorsCapacity;
	    }

	    public void setSailorsCapacity(Integer sailorsCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	    }

	    public Integer getPassengerCapacity() {
	        return passengerCapacity;
	    }

	    public void setPassengerCapacity(Integer passengerCapacity) {
	        this.passengerCapacity = passengerCapacity;
	    }
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "кількість of sailors='" + sailorsCapacity + '\'' +
	                ", кількість пасажирів='" + passengerCapacity + '\'' +
	                '}';
	    }
	}
	
	class Body
	{
		private String material;
		private Integer durability;
		
		public Body() {
			System.out.print("\nПустий корпус був створений");
	    }

	    public Body(String material, Integer durability) {
	        this.material = material;
	        this.durability = durability;
	    }

	    public Body(Body other) {
	        this.material = other.material;
	        this.durability = other.durability;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 0;
	    }

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }
	    @Override
	    public String toString() {
	        return "Корпус{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                '}';
	    }
	}
	
	class PairOfOars
	{
		private Oar rightOar;
		private Oar leftOar;
		
	    public PairOfOars() {
	    	System.out.print("\nПуста пара весел була створенна");
	    }

	    public PairOfOars(Oar rightOar, Oar leftOar) {
	        this.rightOar = rightOar;
	        this.leftOar = leftOar;
	    }

	    public PairOfOars(PairOfOars other) {
	        this.rightOar = new Oar(other.rightOar);
	        this.leftOar = new Oar(other.leftOar);
	    }

	    {
	        this.rightOar = new Oar();
	        this.leftOar = new Oar();
	    }
	    
	    public Boolean RowingToForward
	    {
	    	return leftOar.Rowing() && rightOar.Rowing();
	    }
	    
	    public Boolean RowingToBackward
	    {
	    	return leftOar.Rowing() && rightOar.Rowing();
	    }
	    
	    public Boolean RowingToLeft
	    {
	    	return rightOar.Rowing();
	    }
	    
	    public Boolean RowingToRight
	    {
	    	return leftOar.Rowing();
	    }

	    public Oar getRightOar() {
	        return rightOar;
	    }

	    public void setRightOar(Oar rightOar) {
	        this.rightOar = rightOar;
	    }

	    public Oar getLeftOar() {
	        return leftOar;
	    }

	    public void setLeftOar(Oar leftOar) {
	        this.leftOar = leftOar;
	    }
		
	}
	
	class Oar 
	{
		private String material;
		private Integer durability;
		private Integer maxDurability;
		private Integer quality;
		
		public Oar() {
			System.out.print("\nПусте весло було створене");
	    }

	    public Oar(String material, Integer durability, Integer quality) {
	        this.material = material;
	        this.durability = durability;
	        this.quality = quality;
	    }

	    public Oar(Oar other) {
	        this.material = other.material;
	        this.durability = other.durability;
	        this.quality = other.quality;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 1000;
	        this.quality = 30;
	    }
	    
	    public Boolean Rowing(Sai)
	    {
	    	if (durability > 0)
	    	{
	    		this.durability -= ((int)(Math.random() * 11)*100)/this.quality;
	    		return true;
	    	}
	    	return false;
	    }
	    
	    public Boolean Repair()
	    {
	    	if (this.maxDurability*this.quality)/100 > this.durability)
	    	{
	    		this.durability = ((this.maxDurability*100)/this.quality)(int)(Math.random() * 1.1);
	    		return true;
	    	}
	    	return false;
	    }
	    

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }

	    public Integer getQuality() {
	        return quality;
	    }

	    public void setQuality(Integer quality) {
	        this.quality = quality;
	    }
	    
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                ", якість=" + quality +
	                '}';
	    }
	}
	
	class Sailer extends Person
	{
		private Integer Stamina;
		private Integer Power;
		private Integer Experience;
		
	    public Sailer() {
	        super();
	        System.out.print("\nПустий, той хто працює веслом, був створений");
	    }

	    public Sailer(String firstname, String lastname, Integer years, Integer Stamina, Integer Power, Integer Experience) {
	        super(firstname, lastname, years);
	        this.Stamina = Stamina;
	        this.Power = Power;
	        this.Experience = Experience;
	    }

	    public Sailer(Sailer other) {
	        super(other);
	        this.Stamina = other.Stamina;
	        this.Power = other.Power;
	        this.Experience = other.Experience;
	    }

	    {
	        this.Stamina = 0;
	        this.Power = 0;
	        this.Experience = 0;
	    }

	    public Integer getStamina() {
	        return Stamina;
	    }

	    public void setStamina(Integer Stamina) {
	        this.Stamina = Stamina;
	    }

	    public Integer getPower() {
	        return Power;
	    }

	    public void setPower(Integer Power) {
	        this.Power = Power;
	    }

	    public Integer getExperience() {
	        return Experience;
	    }

	    public void setExperience(Integer Experience) {
	        this.Experience = Experience;
	    }

	    @Override
	    public String toString() {
	        return "Sailer{" +
	                "ім'я='" + getFirstname() + '\'' +
	                ", прізвище='" + getLastname() + '\'' +
	                ", вік=" + getYears() +
	                ", енергія=" + Stamina +
	                ", потужність=" + Power +
	                ", досвід=" + Experience +
	                '}';
	    }

	}
	
	class Person
	{
		private String firstname;
		private String lastname;
		private Integer years;
		
	    public Person() {
	    	System.out.print("\nПуста людина була створена");
	    }

	    public Person(String firstname, String lastname, Integer years) {
	        this.firstname = firstname;
	        this.lastname = lastname;
	        this.years = years;
	    }

	    public Person(Person other) {
	        this.firstname = other.firstname;
	        this.lastname = other.lastname;
	        this.years = other.years;
	    }

	    {
	        this.firstname = "Невідомо";
	        this.lastname = "Невідомо";
	        this.years = 0;
	    }

	    public String getFirstname() {
	        return firstname;
	    }

	    public void setFirstname(String firstname) {
	        this.firstname = firstname;
	    }

	    public String getLastname() {
	        return lastname;
	    }

	    public void setLastname(String lastname) {
	        this.lastname = lastname;
	    }

	    public Integer getYears() {
	        return years;
	    }

	    public void setYears(Integer years) {
	        this.years = years;
	    }

	    @Override
	    public String toString() {
	        return "Людина{" +
	                "ім'я='" + firstname + '\'' +
	                ", прізвище='" + lastname + '\'' +
	                ", вік=" + years +
	                '}';
	    }
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-09-08 12:03:36.578
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-09-08 12:03:36.578
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-09-08 12:03:36.652
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
/**
 * 
 */
package CI_306.Shyryi.Lab3;

import java.util.List;
import java.util.ArrayList;

/**
 * 
 */
public class BoatOnOars {
	
	private String name;
	private Boat boat;
	private PairOfOars[] pairOfOars;
	private Sailer[] sailer;
	private List<Person> passengers = new ArrayList<>();

    public BoatOnOars() {
    	System.out.print("\nПуста шлюпка на веслах була створенна");
    }

    public BoatOnOars(String name, Boat boat, PairOfOars[] pairOfOars, Sailer[] sailer, List<Person> passengers) {
        this.name = name;
        this.boat = boat;
        this.pairOfOars = pairOfOars;
        this.sailer = sailer;
        this.passengers = passengers;
    }

    public BoatOnOars(BoatOnOars other) {
        this.name = other.name;
        this.boat = new Boat(other.boat);
        this.pairOfOars = other.pairOfOars.clone();
        this.sailer = other.sailer.clone();
        this.passengers = new ArrayList<>(other.passengers);
    }

    {
        this.name = "Невідомо";
        this.boat = new Boat();
        this.pairOfOars = new PairOfOars[2];
        this.sailer = new Sailer[2];
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Boat getBoat() {
        return boat;
    }

    public void setBoat(Boat boat) {
        this.boat = boat;
    }

    public PairOfOars[] getPairOfOars() {
        return pairOfOars;
    }

    public void setPairOfOars(PairOfOars[] pairOfOars) {
        this.pairOfOars = pairOfOars;
    }

    public Sailer[] getSailer() {
        return sailer;
    }

    public void setSailer(Sailer[] sailer) {
        this.sailer = sailer;
    }

    public List<Person> getPassengers() {
        return passengers;
    }

    public void setPassengers(List<Person> passengers) {
        this.passengers = passengers;
    }
	
	class Boat 
	{
		private Deck deck;
		private Body body;

	    public Boat() {
	    	System.out.print("\nПуста шлюпка була створенна");
	    }

	    public Boat(Deck deck, Body body) {
	        this.deck = deck;
	        this.body = body;
	    }

	    public Boat(Boat other) {
	        this.deck = new Deck(other.deck);
	        this.body = new Body(other.body);
	    }

	    {
	        this.deck = new Deck();
	        this.body = new Body();
	    }

	    public Deck getDeck() {
	        return deck;
	    }

	    public void setDeck(Deck deck) {
	        this.deck = deck;
	    }

	    public Body getBody() {
	        return body;
	    }

	    public void setBody(Body body) {
	        this.body = body;
	    }
		
	}
	
	class Deck
	{
		private Integer sailorsCapacity;
		private Integer passengerCapacity;
		
		 public Deck() {
			 System.out.print("\nПуста палуба була створенна");
	    }

	    public Deck(Integer sailorsCapacity, Integer passengerCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	        this.passengerCapacity = passengerCapacity;
	    }

	    public Deck(Deck other) {
	        this.sailorsCapacity = other.sailorsCapacity;
	        this.passengerCapacity = other.passengerCapacity;
	    }

	    {
	        this.sailorsCapacity = 0;
	        this.passengerCapacity = 0;
	    }

	    public Integer getSailorsCapacity() {
	        return sailorsCapacity;
	    }

	    public void setSailorsCapacity(Integer sailorsCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	    }

	    public Integer getPassengerCapacity() {
	        return passengerCapacity;
	    }

	    public void setPassengerCapacity(Integer passengerCapacity) {
	        this.passengerCapacity = passengerCapacity;
	    }
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "кількість of sailors='" + sailorsCapacity + '\'' +
	                ", кількість пасажирів='" + passengerCapacity + '\'' +
	                '}';
	    }
	}
	
	class Body
	{
		private String material;
		private Integer durability;
		
		public Body() {
			System.out.print("\nПустий корпус був створений");
	    }

	    public Body(String material, Integer durability) {
	        this.material = material;
	        this.durability = durability;
	    }

	    public Body(Body other) {
	        this.material = other.material;
	        this.durability = other.durability;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 0;
	    }

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }
	    @Override
	    public String toString() {
	        return "Корпус{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                '}';
	    }
	}
	
	class PairOfOars
	{
		private Oar rightOar;
		private Oar leftOar;
		
	    public PairOfOars() {
	    	System.out.print("\nПуста пара весел була створенна");
	    }

	    public PairOfOars(Oar rightOar, Oar leftOar) {
	        this.rightOar = rightOar;
	        this.leftOar = leftOar;
	    }

	    public PairOfOars(PairOfOars other) {
	        this.rightOar = new Oar(other.rightOar);
	        this.leftOar = new Oar(other.leftOar);
	    }

	    {
	        this.rightOar = new Oar();
	        this.leftOar = new Oar();
	    }
	    
	    public Boolean RowingToForward
	    {
	    	return leftOar.Rowing() && rightOar.Rowing();
	    }
	    
	    public Boolean RowingToBackward
	    {
	    	return leftOar.Rowing() && rightOar.Rowing();
	    }
	    
	    public Boolean RowingToLeft
	    {
	    	return rightOar.Rowing();
	    }
	    
	    public Boolean RowingToRight
	    {
	    	return leftOar.Rowing();
	    }

	    public Oar getRightOar() {
	        return rightOar;
	    }

	    public void setRightOar(Oar rightOar) {
	        this.rightOar = rightOar;
	    }

	    public Oar getLeftOar() {
	        return leftOar;
	    }

	    public void setLeftOar(Oar leftOar) {
	        this.leftOar = leftOar;
	    }
		
	}
	
	class Oar 
	{
		private String material;
		private Integer durability;
		private Integer maxDurability;
		private Integer quality;
		
		public Oar() {
			System.out.print("\nПусте весло було створене");
	    }

	    public Oar(String material, Integer durability, Integer quality) {
	        this.material = material;
	        this.durability = durability;
	        this.quality = quality;
	    }

	    public Oar(Oar other) {
	        this.material = other.material;
	        this.durability = other.durability;
	        this.quality = other.quality;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 1000;
	        this.quality = 30;
	    }
	    
	    public Boolean Rowing(Sai)
	    {
	    	if (durability > 0)
	    	{
	    		this.durability -= ((int)(Math.random() * 11)*100)/this.quality;
	    		return true;
	    	}
	    	return false;
	    }
	    
	    public Boolean Repair()
	    {
	    	if (this.maxDurability*this.quality)/100 > this.durability)
	    	{
	    		this.durability = ((this.maxDurability*100)/this.quality)(int)(Math.random() * 1.1);
	    		return true;
	    	}
	    	return false;
	    }
	    

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }

	    public Integer getQuality() {
	        return quality;
	    }

	    public void setQuality(Integer quality) {
	        this.quality = quality;
	    }
	    
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                ", якість=" + quality +
	                '}';
	    }
	}
	
	class Sailer extends Person
	{
		private Integer Stamina;
		private Integer Power;
		private Integer Experience;
		
	    public Sailer() {
	        super();
	        System.out.print("\nПустий, той хто працює веслом, був створений");
	    }

	    public Sailer(String firstname, String lastname, Integer years, Integer Stamina, Integer Power, Integer Experience) {
	        super(firstname, lastname, years);
	        this.Stamina = Stamina;
	        this.Power = Power;
	        this.Experience = Experience;
	    }

	    public Sailer(Sailer other) {
	        super(other);
	        this.Stamina = other.Stamina;
	        this.Power = other.Power;
	        this.Experience = other.Experience;
	    }

	    {
	        this.Stamina = 0;
	        this.Power = 0;
	        this.Experience = 0;
	    }

	    public Integer getStamina() {
	        return Stamina;
	    }

	    public void setStamina(Integer Stamina) {
	        this.Stamina = Stamina;
	    }

	    public Integer getPower() {
	        return Power;
	    }

	    public void setPower(Integer Power) {
	        this.Power = Power;
	    }

	    public Integer getExperience() {
	        return Experience;
	    }

	    public void setExperience(Integer Experience) {
	        this.Experience = Experience;
	    }

	    @Override
	    public String toString() {
	        return "Sailer{" +
	                "ім'я='" + getFirstname() + '\'' +
	                ", прізвище='" + getLastname() + '\'' +
	                ", вік=" + getYears() +
	                ", енергія=" + Stamina +
	                ", потужність=" + Power +
	                ", досвід=" + Experience +
	                '}';
	    }

	}
	
	class Person
	{
		private String firstname;
		private String lastname;
		private Integer years;
		
	    public Person() {
	    	System.out.print("\nПуста людина була створена");
	    }

	    public Person(String firstname, String lastname, Integer years) {
	        this.firstname = firstname;
	        this.lastname = lastname;
	        this.years = years;
	    }

	    public Person(Person other) {
	        this.firstname = other.firstname;
	        this.lastname = other.lastname;
	        this.years = other.years;
	    }

	    {
	        this.firstname = "Невідомо";
	        this.lastname = "Невідомо";
	        this.years = 0;
	    }

	    public String getFirstname() {
	        return firstname;
	    }

	    public void setFirstname(String firstname) {
	        this.firstname = firstname;
	    }

	    public String getLastname() {
	        return lastname;
	    }

	    public void setLastname(String lastname) {
	        this.lastname = lastname;
	    }

	    public Integer getYears() {
	        return years;
	    }

	    public void setYears(Integer years) {
	        this.years = years;
	    }

	    @Override
	    public String toString() {
	        return "Людина{" +
	                "ім'я='" + firstname + '\'' +
	                ", прізвище='" + lastname + '\'' +
	                ", вік=" + years +
	                '}';
	    }
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-09-08 12:03:36.652
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-09-08 12:03:36.653
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-09-08 12:03:37.704
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
/**
 * 
 */
package CI_306.Shyryi.Lab3;

import java.util.List;
import java.util.ArrayList;

/**
 * 
 */
public class BoatOnOars {
	
	private String name;
	private Boat boat;
	private PairOfOars[] pairOfOars;
	private Sailer[] sailer;
	private List<Person> passengers = new ArrayList<>();

    public BoatOnOars() {
    	System.out.print("\nПуста шлюпка на веслах була створенна");
    }

    public BoatOnOars(String name, Boat boat, PairOfOars[] pairOfOars, Sailer[] sailer, List<Person> passengers) {
        this.name = name;
        this.boat = boat;
        this.pairOfOars = pairOfOars;
        this.sailer = sailer;
        this.passengers = passengers;
    }

    public BoatOnOars(BoatOnOars other) {
        this.name = other.name;
        this.boat = new Boat(other.boat);
        this.pairOfOars = other.pairOfOars.clone();
        this.sailer = other.sailer.clone();
        this.passengers = new ArrayList<>(other.passengers);
    }

    {
        this.name = "Невідомо";
        this.boat = new Boat();
        this.pairOfOars = new PairOfOars[2];
        this.sailer = new Sailer[2];
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Boat getBoat() {
        return boat;
    }

    public void setBoat(Boat boat) {
        this.boat = boat;
    }

    public PairOfOars[] getPairOfOars() {
        return pairOfOars;
    }

    public void setPairOfOars(PairOfOars[] pairOfOars) {
        this.pairOfOars = pairOfOars;
    }

    public Sailer[] getSailer() {
        return sailer;
    }

    public void setSailer(Sailer[] sailer) {
        this.sailer = sailer;
    }

    public List<Person> getPassengers() {
        return passengers;
    }

    public void setPassengers(List<Person> passengers) {
        this.passengers = passengers;
    }
	
	class Boat 
	{
		private Deck deck;
		private Body body;

	    public Boat() {
	    	System.out.print("\nПуста шлюпка була створенна");
	    }

	    public Boat(Deck deck, Body body) {
	        this.deck = deck;
	        this.body = body;
	    }

	    public Boat(Boat other) {
	        this.deck = new Deck(other.deck);
	        this.body = new Body(other.body);
	    }

	    {
	        this.deck = new Deck();
	        this.body = new Body();
	    }

	    public Deck getDeck() {
	        return deck;
	    }

	    public void setDeck(Deck deck) {
	        this.deck = deck;
	    }

	    public Body getBody() {
	        return body;
	    }

	    public void setBody(Body body) {
	        this.body = body;
	    }
		
	}
	
	class Deck
	{
		private Integer sailorsCapacity;
		private Integer passengerCapacity;
		
		 public Deck() {
			 System.out.print("\nПуста палуба була створенна");
	    }

	    public Deck(Integer sailorsCapacity, Integer passengerCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	        this.passengerCapacity = passengerCapacity;
	    }

	    public Deck(Deck other) {
	        this.sailorsCapacity = other.sailorsCapacity;
	        this.passengerCapacity = other.passengerCapacity;
	    }

	    {
	        this.sailorsCapacity = 0;
	        this.passengerCapacity = 0;
	    }

	    public Integer getSailorsCapacity() {
	        return sailorsCapacity;
	    }

	    public void setSailorsCapacity(Integer sailorsCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	    }

	    public Integer getPassengerCapacity() {
	        return passengerCapacity;
	    }

	    public void setPassengerCapacity(Integer passengerCapacity) {
	        this.passengerCapacity = passengerCapacity;
	    }
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "кількість of sailors='" + sailorsCapacity + '\'' +
	                ", кількість пасажирів='" + passengerCapacity + '\'' +
	                '}';
	    }
	}
	
	class Body
	{
		private String material;
		private Integer durability;
		
		public Body() {
			System.out.print("\nПустий корпус був створений");
	    }

	    public Body(String material, Integer durability) {
	        this.material = material;
	        this.durability = durability;
	    }

	    public Body(Body other) {
	        this.material = other.material;
	        this.durability = other.durability;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 0;
	    }

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }
	    @Override
	    public String toString() {
	        return "Корпус{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                '}';
	    }
	}
	
	class PairOfOars
	{
		private Oar rightOar;
		private Oar leftOar;
		
	    public PairOfOars() {
	    	System.out.print("\nПуста пара весел була створенна");
	    }

	    public PairOfOars(Oar rightOar, Oar leftOar) {
	        this.rightOar = rightOar;
	        this.leftOar = leftOar;
	    }

	    public PairOfOars(PairOfOars other) {
	        this.rightOar = new Oar(other.rightOar);
	        this.leftOar = new Oar(other.leftOar);
	    }

	    {
	        this.rightOar = new Oar();
	        this.leftOar = new Oar();
	    }
	    
	    public Boolean RowingToForward
	    {
	    	return leftOar.Rowing() && rightOar.Rowing();
	    }
	    
	    public Boolean RowingToBackward
	    {
	    	return leftOar.Rowing() && rightOar.Rowing();
	    }
	    
	    public Boolean RowingToLeft
	    {
	    	return rightOar.Rowing();
	    }
	    
	    public Boolean RowingToRight
	    {
	    	return leftOar.Rowing();
	    }

	    public Oar getRightOar() {
	        return rightOar;
	    }

	    public void setRightOar(Oar rightOar) {
	        this.rightOar = rightOar;
	    }

	    public Oar getLeftOar() {
	        return leftOar;
	    }

	    public void setLeftOar(Oar leftOar) {
	        this.leftOar = leftOar;
	    }
		
	}
	
	class Oar 
	{
		private String material;
		private Integer durability;
		private Integer maxDurability;
		private Integer quality;
		
		public Oar() {
			System.out.print("\nПусте весло було створене");
	    }

	    public Oar(String material, Integer durability, Integer quality) {
	        this.material = material;
	        this.durability = durability;
	        this.quality = quality;
	    }

	    public Oar(Oar other) {
	        this.material = other.material;
	        this.durability = other.durability;
	        this.quality = other.quality;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 1000;
	        this.quality = 30;
	    }
	    
	    public Boolean Rowing(Sailer)
	    {
	    	if (durability > 0)
	    	{
	    		this.durability -= ((int)(Math.random() * 11)*100)/this.quality;
	    		return true;
	    	}
	    	return false;
	    }
	    
	    public Boolean Repair()
	    {
	    	if (this.maxDurability*this.quality)/100 > this.durability)
	    	{
	    		this.durability = ((this.maxDurability*100)/this.quality)(int)(Math.random() * 1.1);
	    		return true;
	    	}
	    	return false;
	    }
	    

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }

	    public Integer getQuality() {
	        return quality;
	    }

	    public void setQuality(Integer quality) {
	        this.quality = quality;
	    }
	    
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                ", якість=" + quality +
	                '}';
	    }
	}
	
	class Sailer extends Person
	{
		private Integer Stamina;
		private Integer Power;
		private Integer Experience;
		
	    public Sailer() {
	        super();
	        System.out.print("\nПустий, той хто працює веслом, був створений");
	    }

	    public Sailer(String firstname, String lastname, Integer years, Integer Stamina, Integer Power, Integer Experience) {
	        super(firstname, lastname, years);
	        this.Stamina = Stamina;
	        this.Power = Power;
	        this.Experience = Experience;
	    }

	    public Sailer(Sailer other) {
	        super(other);
	        this.Stamina = other.Stamina;
	        this.Power = other.Power;
	        this.Experience = other.Experience;
	    }

	    {
	        this.Stamina = 0;
	        this.Power = 0;
	        this.Experience = 0;
	    }

	    public Integer getStamina() {
	        return Stamina;
	    }

	    public void setStamina(Integer Stamina) {
	        this.Stamina = Stamina;
	    }

	    public Integer getPower() {
	        return Power;
	    }

	    public void setPower(Integer Power) {
	        this.Power = Power;
	    }

	    public Integer getExperience() {
	        return Experience;
	    }

	    public void setExperience(Integer Experience) {
	        this.Experience = Experience;
	    }

	    @Override
	    public String toString() {
	        return "Sailer{" +
	                "ім'я='" + getFirstname() + '\'' +
	                ", прізвище='" + getLastname() + '\'' +
	                ", вік=" + getYears() +
	                ", енергія=" + Stamina +
	                ", потужність=" + Power +
	                ", досвід=" + Experience +
	                '}';
	    }

	}
	
	class Person
	{
		private String firstname;
		private String lastname;
		private Integer years;
		
	    public Person() {
	    	System.out.print("\nПуста людина була створена");
	    }

	    public Person(String firstname, String lastname, Integer years) {
	        this.firstname = firstname;
	        this.lastname = lastname;
	        this.years = years;
	    }

	    public Person(Person other) {
	        this.firstname = other.firstname;
	        this.lastname = other.lastname;
	        this.years = other.years;
	    }

	    {
	        this.firstname = "Невідомо";
	        this.lastname = "Невідомо";
	        this.years = 0;
	    }

	    public String getFirstname() {
	        return firstname;
	    }

	    public void setFirstname(String firstname) {
	        this.firstname = firstname;
	    }

	    public String getLastname() {
	        return lastname;
	    }

	    public void setLastname(String lastname) {
	        this.lastname = lastname;
	    }

	    public Integer getYears() {
	        return years;
	    }

	    public void setYears(Integer years) {
	        this.years = years;
	    }

	    @Override
	    public String toString() {
	        return "Людина{" +
	                "ім'я='" + firstname + '\'' +
	                ", прізвище='" + lastname + '\'' +
	                ", вік=" + years +
	                '}';
	    }
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-09-08 12:03:37.705
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-09-08 12:03:37.705
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-09-08 12:03:37.797
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
/**
 * 
 */
package CI_306.Shyryi.Lab3;

import java.util.List;
import java.util.ArrayList;

/**
 * 
 */
public class BoatOnOars {
	
	private String name;
	private Boat boat;
	private PairOfOars[] pairOfOars;
	private Sailer[] sailer;
	private List<Person> passengers = new ArrayList<>();

    public BoatOnOars() {
    	System.out.print("\nПуста шлюпка на веслах була створенна");
    }

    public BoatOnOars(String name, Boat boat, PairOfOars[] pairOfOars, Sailer[] sailer, List<Person> passengers) {
        this.name = name;
        this.boat = boat;
        this.pairOfOars = pairOfOars;
        this.sailer = sailer;
        this.passengers = passengers;
    }

    public BoatOnOars(BoatOnOars other) {
        this.name = other.name;
        this.boat = new Boat(other.boat);
        this.pairOfOars = other.pairOfOars.clone();
        this.sailer = other.sailer.clone();
        this.passengers = new ArrayList<>(other.passengers);
    }

    {
        this.name = "Невідомо";
        this.boat = new Boat();
        this.pairOfOars = new PairOfOars[2];
        this.sailer = new Sailer[2];
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Boat getBoat() {
        return boat;
    }

    public void setBoat(Boat boat) {
        this.boat = boat;
    }

    public PairOfOars[] getPairOfOars() {
        return pairOfOars;
    }

    public void setPairOfOars(PairOfOars[] pairOfOars) {
        this.pairOfOars = pairOfOars;
    }

    public Sailer[] getSailer() {
        return sailer;
    }

    public void setSailer(Sailer[] sailer) {
        this.sailer = sailer;
    }

    public List<Person> getPassengers() {
        return passengers;
    }

    public void setPassengers(List<Person> passengers) {
        this.passengers = passengers;
    }
	
	class Boat 
	{
		private Deck deck;
		private Body body;

	    public Boat() {
	    	System.out.print("\nПуста шлюпка була створенна");
	    }

	    public Boat(Deck deck, Body body) {
	        this.deck = deck;
	        this.body = body;
	    }

	    public Boat(Boat other) {
	        this.deck = new Deck(other.deck);
	        this.body = new Body(other.body);
	    }

	    {
	        this.deck = new Deck();
	        this.body = new Body();
	    }

	    public Deck getDeck() {
	        return deck;
	    }

	    public void setDeck(Deck deck) {
	        this.deck = deck;
	    }

	    public Body getBody() {
	        return body;
	    }

	    public void setBody(Body body) {
	        this.body = body;
	    }
		
	}
	
	class Deck
	{
		private Integer sailorsCapacity;
		private Integer passengerCapacity;
		
		 public Deck() {
			 System.out.print("\nПуста палуба була створенна");
	    }

	    public Deck(Integer sailorsCapacity, Integer passengerCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	        this.passengerCapacity = passengerCapacity;
	    }

	    public Deck(Deck other) {
	        this.sailorsCapacity = other.sailorsCapacity;
	        this.passengerCapacity = other.passengerCapacity;
	    }

	    {
	        this.sailorsCapacity = 0;
	        this.passengerCapacity = 0;
	    }

	    public Integer getSailorsCapacity() {
	        return sailorsCapacity;
	    }

	    public void setSailorsCapacity(Integer sailorsCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	    }

	    public Integer getPassengerCapacity() {
	        return passengerCapacity;
	    }

	    public void setPassengerCapacity(Integer passengerCapacity) {
	        this.passengerCapacity = passengerCapacity;
	    }
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "кількість of sailors='" + sailorsCapacity + '\'' +
	                ", кількість пасажирів='" + passengerCapacity + '\'' +
	                '}';
	    }
	}
	
	class Body
	{
		private String material;
		private Integer durability;
		
		public Body() {
			System.out.print("\nПустий корпус був створений");
	    }

	    public Body(String material, Integer durability) {
	        this.material = material;
	        this.durability = durability;
	    }

	    public Body(Body other) {
	        this.material = other.material;
	        this.durability = other.durability;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 0;
	    }

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }
	    @Override
	    public String toString() {
	        return "Корпус{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                '}';
	    }
	}
	
	class PairOfOars
	{
		private Oar rightOar;
		private Oar leftOar;
		
	    public PairOfOars() {
	    	System.out.print("\nПуста пара весел була створенна");
	    }

	    public PairOfOars(Oar rightOar, Oar leftOar) {
	        this.rightOar = rightOar;
	        this.leftOar = leftOar;
	    }

	    public PairOfOars(PairOfOars other) {
	        this.rightOar = new Oar(other.rightOar);
	        this.leftOar = new Oar(other.leftOar);
	    }

	    {
	        this.rightOar = new Oar();
	        this.leftOar = new Oar();
	    }
	    
	    public Boolean RowingToForward
	    {
	    	return leftOar.Rowing() && rightOar.Rowing();
	    }
	    
	    public Boolean RowingToBackward
	    {
	    	return leftOar.Rowing() && rightOar.Rowing();
	    }
	    
	    public Boolean RowingToLeft
	    {
	    	return rightOar.Rowing();
	    }
	    
	    public Boolean RowingToRight
	    {
	    	return leftOar.Rowing();
	    }

	    public Oar getRightOar() {
	        return rightOar;
	    }

	    public void setRightOar(Oar rightOar) {
	        this.rightOar = rightOar;
	    }

	    public Oar getLeftOar() {
	        return leftOar;
	    }

	    public void setLeftOar(Oar leftOar) {
	        this.leftOar = leftOar;
	    }
		
	}
	
	class Oar 
	{
		private String material;
		private Integer durability;
		private Integer maxDurability;
		private Integer quality;
		
		public Oar() {
			System.out.print("\nПусте весло було створене");
	    }

	    public Oar(String material, Integer durability, Integer quality) {
	        this.material = material;
	        this.durability = durability;
	        this.quality = quality;
	    }

	    public Oar(Oar other) {
	        this.material = other.material;
	        this.durability = other.durability;
	        this.quality = other.quality;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 1000;
	        this.quality = 30;
	    }
	    
	    public Boolean Rowing(Sailer)
	    {
	    	if (durability > 0)
	    	{
	    		this.durability -= ((int)(Math.random() * 11)*100)/this.quality;
	    		return true;
	    	}
	    	return false;
	    }
	    
	    public Boolean Repair()
	    {
	    	if (this.maxDurability*this.quality)/100 > this.durability)
	    	{
	    		this.durability = ((this.maxDurability*100)/this.quality)(int)(Math.random() * 1.1);
	    		return true;
	    	}
	    	return false;
	    }
	    

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }

	    public Integer getQuality() {
	        return quality;
	    }

	    public void setQuality(Integer quality) {
	        this.quality = quality;
	    }
	    
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                ", якість=" + quality +
	                '}';
	    }
	}
	
	class Sailer extends Person
	{
		private Integer Stamina;
		private Integer Power;
		private Integer Experience;
		
	    public Sailer() {
	        super();
	        System.out.print("\nПустий, той хто працює веслом, був створений");
	    }

	    public Sailer(String firstname, String lastname, Integer years, Integer Stamina, Integer Power, Integer Experience) {
	        super(firstname, lastname, years);
	        this.Stamina = Stamina;
	        this.Power = Power;
	        this.Experience = Experience;
	    }

	    public Sailer(Sailer other) {
	        super(other);
	        this.Stamina = other.Stamina;
	        this.Power = other.Power;
	        this.Experience = other.Experience;
	    }

	    {
	        this.Stamina = 0;
	        this.Power = 0;
	        this.Experience = 0;
	    }

	    public Integer getStamina() {
	        return Stamina;
	    }

	    public void setStamina(Integer Stamina) {
	        this.Stamina = Stamina;
	    }

	    public Integer getPower() {
	        return Power;
	    }

	    public void setPower(Integer Power) {
	        this.Power = Power;
	    }

	    public Integer getExperience() {
	        return Experience;
	    }

	    public void setExperience(Integer Experience) {
	        this.Experience = Experience;
	    }

	    @Override
	    public String toString() {
	        return "Sailer{" +
	                "ім'я='" + getFirstname() + '\'' +
	                ", прізвище='" + getLastname() + '\'' +
	                ", вік=" + getYears() +
	                ", енергія=" + Stamina +
	                ", потужність=" + Power +
	                ", досвід=" + Experience +
	                '}';
	    }

	}
	
	class Person
	{
		private String firstname;
		private String lastname;
		private Integer years;
		
	    public Person() {
	    	System.out.print("\nПуста людина була створена");
	    }

	    public Person(String firstname, String lastname, Integer years) {
	        this.firstname = firstname;
	        this.lastname = lastname;
	        this.years = years;
	    }

	    public Person(Person other) {
	        this.firstname = other.firstname;
	        this.lastname = other.lastname;
	        this.years = other.years;
	    }

	    {
	        this.firstname = "Невідомо";
	        this.lastname = "Невідомо";
	        this.years = 0;
	    }

	    public String getFirstname() {
	        return firstname;
	    }

	    public void setFirstname(String firstname) {
	        this.firstname = firstname;
	    }

	    public String getLastname() {
	        return lastname;
	    }

	    public void setLastname(String lastname) {
	        this.lastname = lastname;
	    }

	    public Integer getYears() {
	        return years;
	    }

	    public void setYears(Integer years) {
	        this.years = years;
	    }

	    @Override
	    public String toString() {
	        return "Людина{" +
	                "ім'я='" + firstname + '\'' +
	                ", прізвище='" + lastname + '\'' +
	                ", вік=" + years +
	                '}';
	    }
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-09-08 12:03:37.797
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-09-08 12:03:37.798
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-09-08 12:03:38.920
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
/**
 * 
 */
package CI_306.Shyryi.Lab3;

import java.util.List;
import java.util.ArrayList;

/**
 * 
 */
public class BoatOnOars {
	
	private String name;
	private Boat boat;
	private PairOfOars[] pairOfOars;
	private Sailer[] sailer;
	private List<Person> passengers = new ArrayList<>();

    public BoatOnOars() {
    	System.out.print("\nПуста шлюпка на веслах була створенна");
    }

    public BoatOnOars(String name, Boat boat, PairOfOars[] pairOfOars, Sailer[] sailer, List<Person> passengers) {
        this.name = name;
        this.boat = boat;
        this.pairOfOars = pairOfOars;
        this.sailer = sailer;
        this.passengers = passengers;
    }

    public BoatOnOars(BoatOnOars other) {
        this.name = other.name;
        this.boat = new Boat(other.boat);
        this.pairOfOars = other.pairOfOars.clone();
        this.sailer = other.sailer.clone();
        this.passengers = new ArrayList<>(other.passengers);
    }

    {
        this.name = "Невідомо";
        this.boat = new Boat();
        this.pairOfOars = new PairOfOars[2];
        this.sailer = new Sailer[2];
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Boat getBoat() {
        return boat;
    }

    public void setBoat(Boat boat) {
        this.boat = boat;
    }

    public PairOfOars[] getPairOfOars() {
        return pairOfOars;
    }

    public void setPairOfOars(PairOfOars[] pairOfOars) {
        this.pairOfOars = pairOfOars;
    }

    public Sailer[] getSailer() {
        return sailer;
    }

    public void setSailer(Sailer[] sailer) {
        this.sailer = sailer;
    }

    public List<Person> getPassengers() {
        return passengers;
    }

    public void setPassengers(List<Person> passengers) {
        this.passengers = passengers;
    }
	
	class Boat 
	{
		private Deck deck;
		private Body body;

	    public Boat() {
	    	System.out.print("\nПуста шлюпка була створенна");
	    }

	    public Boat(Deck deck, Body body) {
	        this.deck = deck;
	        this.body = body;
	    }

	    public Boat(Boat other) {
	        this.deck = new Deck(other.deck);
	        this.body = new Body(other.body);
	    }

	    {
	        this.deck = new Deck();
	        this.body = new Body();
	    }

	    public Deck getDeck() {
	        return deck;
	    }

	    public void setDeck(Deck deck) {
	        this.deck = deck;
	    }

	    public Body getBody() {
	        return body;
	    }

	    public void setBody(Body body) {
	        this.body = body;
	    }
		
	}
	
	class Deck
	{
		private Integer sailorsCapacity;
		private Integer passengerCapacity;
		
		 public Deck() {
			 System.out.print("\nПуста палуба була створенна");
	    }

	    public Deck(Integer sailorsCapacity, Integer passengerCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	        this.passengerCapacity = passengerCapacity;
	    }

	    public Deck(Deck other) {
	        this.sailorsCapacity = other.sailorsCapacity;
	        this.passengerCapacity = other.passengerCapacity;
	    }

	    {
	        this.sailorsCapacity = 0;
	        this.passengerCapacity = 0;
	    }

	    public Integer getSailorsCapacity() {
	        return sailorsCapacity;
	    }

	    public void setSailorsCapacity(Integer sailorsCapacity) {
	        this.sailorsCapacity = sailorsCapacity;
	    }

	    public Integer getPassengerCapacity() {
	        return passengerCapacity;
	    }

	    public void setPassengerCapacity(Integer passengerCapacity) {
	        this.passengerCapacity = passengerCapacity;
	    }
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "кількість of sailors='" + sailorsCapacity + '\'' +
	                ", кількість пасажирів='" + passengerCapacity + '\'' +
	                '}';
	    }
	}
	
	class Body
	{
		private String material;
		private Integer durability;
		
		public Body() {
			System.out.print("\nПустий корпус був створений");
	    }

	    public Body(String material, Integer durability) {
	        this.material = material;
	        this.durability = durability;
	    }

	    public Body(Body other) {
	        this.material = other.material;
	        this.durability = other.durability;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 0;
	    }

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }
	    @Override
	    public String toString() {
	        return "Корпус{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                '}';
	    }
	}
	
	class PairOfOars
	{
		private Oar rightOar;
		private Oar leftOar;
		
	    public PairOfOars() {
	    	System.out.print("\nПуста пара весел була створенна");
	    }

	    public PairOfOars(Oar rightOar, Oar leftOar) {
	        this.rightOar = rightOar;
	        this.leftOar = leftOar;
	    }

	    public PairOfOars(PairOfOars other) {
	        this.rightOar = new Oar(other.rightOar);
	        this.leftOar = new Oar(other.leftOar);
	    }

	    {
	        this.rightOar = new Oar();
	        this.leftOar = new Oar();
	    }
	    
	    public Boolean RowingToForward
	    {
	    	return leftOar.Rowing() && rightOar.Rowing();
	    }
	    
	    public Boolean RowingToBackward
	    {
	    	return leftOar.Rowing() && rightOar.Rowing();
	    }
	    
	    public Boolean RowingToLeft
	    {
	    	return rightOar.Rowing();
	    }
	    
	    public Boolean RowingToRight
	    {
	    	return leftOar.Rowing();
	    }

	    public Oar getRightOar() {
	        return rightOar;
	    }

	    public void setRightOar(Oar rightOar) {
	        this.rightOar = rightOar;
	    }

	    public Oar getLeftOar() {
	        return leftOar;
	    }

	    public void setLeftOar(Oar leftOar) {
	        this.leftOar = leftOar;
	    }
		
	}
	
	class Oar 
	{
		private String material;
		private Integer durability;
		private Integer maxDurability;
		private Integer quality;
		
		public Oar() {
			System.out.print("\nПусте весло було створене");
	    }

	    public Oar(String material, Integer durability, Integer quality) {
	        this.material = material;
	        this.durability = durability;
	        this.quality = quality;
	    }

	    public Oar(Oar other) {
	        this.material = other.material;
	        this.durability = other.durability;
	        this.quality = other.quality;
	    }

	    {
	        this.material = "Невідомо";
	        this.durability = 1000;
	        this.quality = 30;
	    }
	    
	    public Boolean Rowing(Sailer )
	    {
	    	if (durability > 0)
	    	{
	    		this.durability -= ((int)(Math.random() * 11)*100)/this.quality;
	    		return true;
	    	}
	    	return false;
	    }
	    
	    public Boolean Repair()
	    {
	    	if (this.maxDurability*this.quality)/100 > this.durability)
	    	{
	    		this.durability = ((this.maxDurability*100)/this.quality)(int)(Math.random() * 1.1);
	    		return true;
	    	}
	    	return false;
	    }
	    

	    public String getMaterial() {
	        return material;
	    }

	    public void setMaterial(String material) {
	        this.material = material;
	    }

	    public Integer getDurability() {
	        return durability;
	    }

	    public void setDurability(Integer durability) {
	        this.durability = durability;
	    }

	    public Integer getQuality() {
	        return quality;
	    }

	    public void setQuality(Integer quality) {
	        this.quality = quality;
	    }
	    
	    @Override
	    public String toString() {
	        return "Весло{" +
	                "матеріал='" + material + '\'' +
	                ", справність='" + durability + '\'' +
	                ", якість=" + quality +
	                '}';
	    }
	}
	
	class Sailer extends Person
	{
		private Integer Stamina;
		private Integer Power;
		private Integer Experience;
		
	    public Sailer() {
	        super();
	        System.out.print("\nПустий, той хто працює веслом, був створений");
	    }

	    public Sailer(String firstname, String lastname, Integer years, Integer Stamina, Integer Power, Integer Experience) {
	        super(firstname, lastname, years);
	        this.Stamina = Stamina;
	        this.Power = Power;
	        this.Experience = Experience;
	    }

	    public Sailer(Sailer other) {
	        super(other);
	        this.Stamina = other.Stamina;
	        this.Power = other.Power;
	        this.Experience = other.Experience;
	    }

	    {
	        this.Stamina = 0;
	        this.Power = 0;
	        this.Experience = 0;
	    }

	    public Integer getStamina() {
	        return Stamina;
	    }

	    public void setStamina(Integer Stamina) {
	        this.Stamina = Stamina;
	    }

	    public Integer getPower() {
	        return Power;
	    }

	    public void setPower(Integer Power) {
	        this.Power = Power;
	    }

	    public Integer getExperience() {
	        return Experience;
	    }

	    public void setExperience(Integer Experience) {
	        this.Experience = Experience;
	    }

	    @Override
	    public String toString() {
	        return "Sailer{" +
	                "ім'я='" + getFirstname() + '\'' +
	                ", прізвище='" + getLastname() + '\'' +
	                ", вік=" + getYears() +
	                ", енергія=" + Stamina +
	                ", потужність=" + Power +
	                ", досвід=" + Experience +
	                '}';
	    }

	}
	
	class Person
	{
		private String firstname;
		private String lastname;
		private Integer years;
		
	    public Person() {
	    	System.out.print("\nПуста людина була створена");
	    }

	    public Person(String firstname, String lastname, Integer years) {
	        this.firstname = firstname;
	        this.lastname = lastname;
	        this.years = years;
	    }

	    public Person(Person other) {
	        this.firstname = other.firstname;
	        this.lastname = other.lastname;
	        this.years = other.years;
	    }

	    {
	        this.firstname = "Невідомо";
	        this.lastname = "Невідомо";
	        this.years = 0;
	    }

	    public String getFirstname() {
	        return firstname;
	    }

	    public void setFirstname(String firstname) {
	        this.firstname = firstname;
	    }

	    public String getLastname() {
	        return lastname;
	    }

	    public void setLastname(String lastname) {
	        this.lastname = lastname;
	    }

	    public Integer getYears() {
	        return years;
	    }

	    public void setYears(Integer years) {
	        this.years = years;
	    }

	    @Override
	    public String toString() {
	        return "Людина{" +
	                "ім'я='" + firstname + '\'' +
	                ", прізвище='" + lastname + '\'' +
	                ", вік=" + years +
	                '}';
	    }
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1207)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3079)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2286)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3103)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:213)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
